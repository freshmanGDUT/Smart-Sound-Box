
#line 3 "config.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer configYY_create_buffer
#define yy_delete_buffer configYY_delete_buffer
#define yy_flex_debug configYY_flex_debug
#define yy_init_buffer configYY_init_buffer
#define yy_flush_buffer configYY_flush_buffer
#define yy_load_buffer_state configYY_load_buffer_state
#define yy_switch_to_buffer configYY_switch_to_buffer
#define yyin configYYin
#define yyleng configYYleng
#define yylex configYYlex
#define yylineno configYYlineno
#define yyout configYYout
#define yyrestart configYYrestart
#define yytext configYYtext
#define yywrap configYYwrap
#define yyalloc configYYalloc
#define yyrealloc configYYrealloc
#define yyfree configYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE configYYrestart(configYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int configYYleng;

extern FILE *configYYin, *configYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up configYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up configYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via configYYrestart()), so that the user can continue scanning by
	 * just pointing configYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when configYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int configYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow configYYwrap()'s to do buffer switches
 * instead of setting up a fresh configYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void configYYrestart (FILE *input_file  );
void configYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE configYY_create_buffer (FILE *file,int size  );
void configYY_delete_buffer (YY_BUFFER_STATE b  );
void configYY_flush_buffer (YY_BUFFER_STATE b  );
void configYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void configYYpop_buffer_state (void );

static void configYYensure_buffer_stack (void );
static void configYY_load_buffer_state (void );
static void configYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER configYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE configYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE configYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE configYY_scan_bytes (yyconst char *bytes,int len  );

void *configYYalloc (yy_size_t  );
void *configYYrealloc (void *,yy_size_t  );
void configYYfree (void *  );

#define yy_new_buffer configYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        configYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            configYY_create_buffer(configYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        configYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            configYY_create_buffer(configYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *configYYin = (FILE *) 0, *configYYout = (FILE *) 0;

typedef int yy_state_type;

extern int configYYlineno;

int configYYlineno = 1;

extern char *configYYtext;
#define yytext_ptr configYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up configYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	configYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 64
#define YY_END_OF_BUFFER 65
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[599] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   65,   62,   63,    1,
        2,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   62,
       56,    1,   57,   61,   59,   58,   60,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,    0,   56,
       57,   59,   58,   60,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       13,   21,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   46,   48,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   13,   21,   55,   55,   55,   25,   55,
       55,   55,   38,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   29,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   46,   48,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   25,   55,   55,   55,   38,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   29,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,    6,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   17,   55,   18,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   19,   55,   55,   55,    6,   30,   55,   55,   55,
       54,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   34,   55,   55,   26,   55,   17,    7,   18,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   23,   55,
        5,   55,   55,   19,   55,   55,   55,   55,   30,   55,
       55,   55,   54,   55,   41,   55,   22,   55,   55,   55,

       55,   55,   55,   34,   55,   55,   26,   55,    7,   55,
       55,   55,   55,   55,   55,   55,   55,   47,   23,   55,
       55,    5,   55,   55,   55,    3,   55,   44,   55,   55,
       55,   55,   41,   55,   22,   12,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   37,   55,
       55,   55,   47,   55,   55,   55,   55,   20,    3,   55,
       44,   55,   55,   55,   55,   55,   12,   49,   51,   55,
       55,   32,   55,   55,   55,   55,   16,   55,   55,   37,
       55,   55,   55,   55,   55,   55,   55,   20,   55,   45,
       55,   55,   55,    8,   49,   51,   50,   55,   32,   55,

       55,   55,   55,   16,   27,   55,   33,   14,   55,   55,
       55,   55,   36,   55,   45,   55,   55,   42,    8,   50,
       55,   43,   55,   52,   55,   27,   55,   55,   33,   14,
       55,   55,   55,   55,   36,   55,   55,   55,   42,   55,
       43,   55,   52,   55,   55,   55,   55,   55,   55,   40,
       55,   55,   39,   55,   10,   55,   55,   35,   55,   55,
       15,   40,   55,   55,   39,   55,   10,   11,   55,   35,
        4,   55,   15,   55,   55,   31,   11,   55,    4,   55,
       55,   55,   31,   55,   55,   55,   55,   55,   24,   55,
       53,   28,   24,    9,   53,   28,    9,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    1,    1,    1,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    7,    1,
        1,    1,    1,    1,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   18,    8,   19,   20,   21,   22,   23,
        8,    8,   24,   25,    8,    8,   26,   27,    8,    8,
        1,    1,    1,    1,    8,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,    8,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[53] =
    {   0,
        1,    2,    2,    2,    2,    1,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4
    } ;

static yyconst flex_int16_t yy_base[611] =
    {   0,
        0,    2,    6,    0,   56,   58,   61,   65,   69,   73,
       76,   78,   81,   85,   89,   95,  739,  740,  740,  740,
      740,    0,  713,  699,   65,  696,   67,   63,   73,   70,
      699,  693,   71,  705,  685,   82,   78,   79,  699,  727,
      740,  726,    0,  740,    0,    0,    0,    0,  708,  699,
      681,  104,  677,  686,   86,  683,  681,  693,  689,  680,
      678,   90,  677,  122,  678,  669,  668,  669,  684,  683,
      669,  665,  657,  661,  670,  656,  672,  659,  699,  740,
        0,    0,    0,    0,  682,  655,  669,  657,  665,  676,
      648,  658,  661,  646,  661,  658,  642,  657,  655,  648,

      644,  637,  651,  646,  643,  640,  643,  638,  649,  644,
      624,  638,  631,  627,  631,  630,  620,  622,  629,  628,
      617,  636,  120,  634,  638,  616,  632,  629,  631,  638,
      617,  611,  635,  621,  620,  607,  608,  617,  631,  623,
      602,  599,  600,  604,  614,  593,  607,  604,  590,  598,
      625,  596,  587,  601,  586,  614,  106,  617,  597,  596,
      591,  582,  584,  596,  595,  581,  570,  610,  575,  608,
      615,  614,  583,  573,  577,  568,  596,  582,  599,  564,
      567,  100,  574,  591,  564,  556,  557,  565,  555,  567,
      570,  568,  558,  559,  548,  131,  561,  552,  555,  558,

      549,  586,  585,  558,  554,  540,  553,  553,  536,  540,
      547,  547,  536,  574,  573,  534,  533,  527,  569,  534,
      523,  536,  565,  535,  514,  531,  551,  526,  533,  521,
      514,  514,  555,  512,  540,  522,  525,  500,  138,  539,
      522,  533,  510,  517,  508,  506,  498,  541,  540,  503,
      495,  500,  501,  499,  504,  489,  501,  518,  491,  485,
      491,  483,  526,  494,  494,  492,  522,  491,  484,  488,
      488,  481,  480,  505,  501,  474,  512,  477,  468,  467,
      465,  477,  472,  471,  487,  457,  481,  490,  464,  469,
      471,  455,  483,  488,  468,  467,  462,  471,  464,  450,

      458,  452,  135,  456,  485,  441,  136,  444,  434,  451,
      446,  448,  448,  467,  446,  433,  436,  429,  446,  428,
      427,  457,  426,  431,  466,  439,  464,  415,  417,  423,
      430,  425,  416,  415,  420,  423,  411,  413,  404,  409,
      412,  136,  413,  406,  409,  446,  445,  406,  404,  400,
      441,  418,  391,  404,  394,  397,  395,  408,  396,  402,
      391,  430,  416,  389,  427,  396,  425,  424,  423,  378,
      392,  394,  377,  388,  391,  374,  406,  384,  149,  383,
      412,  381,  380,  409,  383,  371,  372,  361,  404,  374,
      357,  371,  400,  366,  398,  359,  396,  367,  350,  353,

      362,  362,  357,  389,  346,  345,  386,  347,  384,  353,
      352,  344,  337,  336,  338,  338,  337,  375,  374,  339,
      330,  371,  357,  327,  351,  367,  320,  365,  334,  321,
      349,  331,  360,  329,  358,  357,  323,  322,  316,  335,
      309,  325,  328,  323,  310,  304,  316,  330,  344,  310,
      295,  304,  340,  295,  312,  295,  310,  335,  334,  307,
      332,  283,  302,  287,  298,  284,  326,  325,  324,  279,
      292,  321,  280,  279,  281,  274,  316,  272,  276,  313,
      269,  268,  273,  276,  264,  268,  270,  305,  260,  303,
      272,  262,  256,  299,  298,  297,  296,  258,  294,  260,

      262,  261,  256,  289,  153,  265,  287,  286,  255,  276,
      249,  237,  281,  250,  279,  261,  232,  276,  275,  274,
      246,  272,  241,  270,  230,  268,  233,  246,  265,  264,
      225,  223,  222,  220,  259,  240,  223,  216,  255,  224,
      253,  223,  251,  212,  205,  239,  203,  204,  207,  244,
      212,  198,  237,  191,  229,   70,   90,  154,  112,  128,
      159,  160,  125,  119,  164,  122,  166,  167,  147,  169,
      170,  141,  172,  147,  141,  176,  178,  153,  180,  139,
      152,  145,  184,  141,  143,  145,  156,  156,  190,  148,
      192,  193,  194,  195,  196,  197,  198,  740,  200,  204,

      208,  212,  216,  220,  221,  225,  229,  233,  237,  241
    } ;

static yyconst flex_int16_t yy_def[611] =
    {   0,
      599,  599,  598,    3,  600,  600,  601,  601,  602,  602,
      599,  599,  603,  603,  604,  604,  598,  598,  598,  598,
      598,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  606,
      598,  606,  607,  598,  608,  609,  610,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  606,  598,
      607,  608,  609,  610,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,

      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,

      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  598,  598,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  598,  598,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  598,  605,  605,  605,  598,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  598,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,

      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  598,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  598,  605,  598,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  598,  605,  605,  605,  605,  598,  605,
      605,  605,  598,  605,  605,  605,  605,  605,  605,  605,

      605,  605,  605,  598,  605,  605,  598,  605,  598,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  598,  605,
      605,  598,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  598,  605,  598,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  598,  605,  605,  605,  605,  605,  598,  605,
      598,  605,  605,  605,  605,  605,  598,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  598,
      605,  605,  605,  605,  605,  605,  605,  598,  605,  605,
      605,  605,  605,  605,  598,  598,  605,  605,  598,  605,

      605,  605,  605,  598,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  598,  605,  605,  605,  598,  598,
      605,  605,  605,  605,  605,  598,  605,  605,  598,  598,
      605,  605,  605,  605,  598,  605,  605,  605,  598,  605,
      598,  605,  598,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  598,  605,  605,  598,  605,  598,  605,  605,  598,
      605,  605,  598,  605,  605,  605,  598,  605,  598,  605,
      605,  605,  598,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  598,  605,  598,  598,  598,    0,  598,  598,

      598,  598,  598,  598,  598,  598,  598,  598,  598,  598
    } ;

static yyconst flex_int16_t yy_nxt[793] =
    {   0,
      598,  598,   19,   20,   19,   20,   18,   18,   19,   20,
       18,   21,   18,   22,   22,   22,   22,   22,   22,   22,
       22,   23,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   24,   25,   26,   27,   28,
       29,   30,   22,   22,   31,   32,   33,   34,   35,   22,
       36,   37,   38,   39,   22,   22,   22,   22,   41,   42,
       41,   42,   18,   44,   20,   18,   18,   44,   20,   18,
       18,   44,   20,   18,   18,   44,   20,   18,   19,   20,
       19,   20,   18,   44,   20,   18,   18,   44,   20,   18,
       18,   44,   20,   18,   56,   18,   18,   44,   20,   18,

       51,   18,   54,   61,   58,   52,   57,   55,   59,   62,
       65,   70,   66,   74,  568,   88,   71,   67,   60,  199,
       76,   75,   72,   77,  569,  200,   94,   73,   89,   95,
       90,  102,  105,   91,  106,  103,  107,  384,  108,  109,
      163,  110,  164,  343,  165,  225,  226,  240,  241,  283,
      419,  284,  348,  242,  526,  570,  571,  344,  572,  349,
      573,  562,  385,  574,  575,  565,  576,  567,  577,  578,
      570,  579,  580,  573,  420,  581,  582,  583,  527,  577,
      584,  579,  585,  586,  587,  583,  588,  589,  590,  591,
      592,  593,  594,  595,  596,  593,  597,  595,  596,  597,

       18,   18,   18,   18,   40,   40,   40,   40,   43,   43,
       43,   43,   45,   45,   45,   45,   46,   46,   46,   46,
       47,   47,   47,   47,   48,   79,   79,   79,   79,   81,
      567,   81,   81,   82,  566,   82,   82,   83,  565,   83,
       83,   84,  564,  563,   84,  562,  561,  560,  559,  558,
      557,  556,  543,  555,  541,  554,  539,  553,  552,  551,
      535,  550,  549,  548,  547,  530,  529,  546,  545,  526,
      544,  543,  542,  541,  540,  520,  519,  539,  538,  537,
      515,  536,  535,  534,  533,  532,  531,  530,  529,  528,
      504,  525,  524,  523,  522,  499,  521,  520,  496,  495,

      519,  518,  517,  516,  515,  514,  488,  513,  512,  511,
      510,  509,  508,  507,  480,  506,  505,  504,  503,  502,
      501,  500,  499,  498,  497,  496,  495,  467,  494,  493,
      492,  491,  490,  461,  489,  459,  488,  487,  486,  485,
      484,  453,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  435,
      466,  433,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  422,  455,  454,  419,  453,  452,  451,  450,
      449,  448,  447,  446,  445,  409,  444,  407,  443,  442,
      404,  441,  440,  439,  438,  437,  436,  435,  434,  433,

      432,  393,  431,  430,  429,  389,  428,  427,  426,  425,
      384,  424,  423,  422,  421,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  369,  409,  367,  408,  407,  406,
      405,  404,  403,  402,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  390,  389,  346,  388,  387,
      386,  383,  382,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  347,  346,  345,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,

      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  277,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  267,  308,  307,  306,  263,  305,  304,
      303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
      293,  249,  248,  292,  291,  290,  289,  288,  287,  286,
      285,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  215,  214,  259,  258,  257,  256,
      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      245,  244,  243,  239,  238,  237,  236,  235,  234,  233,

      232,  231,  230,  229,  228,  227,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,
      210,  209,  208,  207,  206,  205,  204,  203,  202,  201,
      198,  197,  196,  195,  194,  193,  192,  191,  190,  189,
      188,  187,  186,  185,  184,  183,  182,  181,  180,  179,
      178,  177,  176,  175,  174,  173,  172,  171,  170,  169,
      168,  167,  166,  162,  161,  160,  159,  158,  157,  156,
      155,  154,  153,  152,  151,  150,  149,  148,  147,  146,
      145,  144,  143,  142,  141,  140,  139,  138,  137,  136,
      135,  134,  133,  132,  131,  130,  129,  128,  127,  126,

      125,   80,  124,  123,  122,  121,  120,  119,  118,  117,
      116,  115,  114,  113,  112,  111,  104,  101,  100,   99,
       98,   97,   96,   93,   92,   87,   86,   85,   80,   80,
       78,   69,   68,   64,   63,   53,   50,   49,  598,   17,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598

    } ;

static yyconst flex_int16_t yy_chk[793] =
    {   0,
        0,    0,    1,    1,    2,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,
        6,    6,    7,    7,    7,    7,    8,    8,    8,    8,
        9,    9,    9,    9,   10,   10,   10,   10,   11,   11,
       12,   12,   13,   13,   13,   13,   14,   14,   14,   14,
       15,   15,   15,   15,   28,   15,   16,   16,   16,   16,

       25,   16,   27,   30,   29,   25,   28,   27,   29,   30,
       33,   36,   33,   37,  556,   52,   36,   33,   29,  157,
       38,   37,   36,   38,  557,  157,   55,   36,   52,   55,
       52,   62,   64,   52,   64,   62,   64,  342,   64,   64,
      123,   64,  123,  303,  123,  182,  182,  196,  196,  239,
      379,  239,  307,  196,  505,  558,  559,  303,  560,  307,
      561,  562,  342,  563,  564,  565,  566,  567,  568,  569,
      570,  571,  572,  573,  379,  574,  575,  576,  505,  577,
      578,  579,  580,  581,  582,  583,  584,  585,  586,  587,
      588,  589,  590,  591,  592,  593,  594,  595,  596,  597,

      599,  599,  599,  599,  600,  600,  600,  600,  601,  601,
      601,  601,  602,  602,  602,  602,  603,  603,  603,  603,
      604,  604,  604,  604,  605,  606,  606,  606,  606,  607,
      555,  607,  607,  608,  554,  608,  608,  609,  553,  609,
      609,  610,  552,  551,  610,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,
      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,

      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,

      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,
      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  306,  305,  304,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,

      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  244,  243,  242,  241,
      240,  238,  237,  236,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  197,  195,  194,  193,  192,  191,  190,  189,

      188,  187,  186,  185,  184,  183,  181,  180,  179,  178,
      177,  176,  175,  174,  173,  172,  171,  170,  169,  168,
      167,  166,  165,  164,  163,  162,  161,  160,  159,  158,
      156,  155,  154,  153,  152,  151,  150,  149,  148,  147,
      146,  145,  144,  143,  142,  141,  140,  139,  138,  137,
      136,  135,  134,  133,  132,  131,  130,  129,  128,  127,
      126,  125,  124,  122,  121,  120,  119,  118,  117,  116,
      115,  114,  113,  112,  111,  110,  109,  108,  107,  106,
      105,  104,  103,  102,  101,  100,   99,   98,   97,   96,
       95,   94,   93,   92,   91,   90,   89,   88,   87,   86,

       85,   79,   78,   77,   76,   75,   74,   73,   72,   71,
       70,   69,   68,   67,   66,   65,   63,   61,   60,   59,
       58,   57,   56,   54,   53,   51,   50,   49,   42,   40,
       39,   35,   34,   32,   31,   26,   24,   23,   17,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      598,  598

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int configYY_flex_debug;
int configYY_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *configYYtext;
#line 1 "config.ll"
/*
  config.ll

  Copyright (c) 2000-2001 Dragos Acostachioaie

  This file is part of DOC++.

  DOC++ is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the license, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
#line 24 "config.ll"

#include <errno.h>
#include <stdio.h>

#include "McDArray.h"
#include "doc.h"

static const char*	inputString;
static int		inputPosition;
bool			reverseValue = false;
McString*		string_data;
long*			integer_data;
double*			real_data;
bool*			boolean_data;
McDArray<McString *>*	list_data;

bool			onlyDocs       			= true;
bool			commentExtn    			= false;
McString		configFile			("doc++.conf");
bool			HTMLsyntax     			= false;
McString		fileList;
bool			java           			= false;
bool			php           			= false;
bool			noDefines			= false;
bool			withPrivate    			= false;
bool			fastNotSmall   			= false;
bool			QuantelExtn    			= false;
bool			internalDoc			= false;
bool			doTeX          			= false;
bool			upArrows       			= false;
bool			verb				= false;
bool			scanIncludes			= false;
bool			idl				= false;
bool			doDOCBOOK			= false;
bool			doDOCBOOKXML			= false;
bool			doXML				= false;
McDArray<McString *>	inputFiles;

bool			withTables     			= false;
bool			withBorders    			= false;
McString		ownFooter;
McString		outputDir			= ".";
bool			showFilenames  			= false;
bool			showFilePath   			= false;
bool			noGifs         			= false;
bool			forceGifs      			= false;
bool			showInherited  			= true;
bool			javaGraphs     			= true;
bool			trivialGraphs  			= false;
bool			alwaysPrintDocSection   	= true;
bool			showMembersInTOC		= false;
bool			useGeneral     			= true;
bool			sortEntries    			= false;
McString		ownHeader;
bool			printGroupDocBeforeGroup	= false;
bool			printClassDocBeforeGroup	= false;
McString		htmlSuffix			(".html");
McString		htmlStyleSheet;

bool			onlyClassGraph			= false;
McString		texFile;
bool			generateIndex			= false;
McString		texOption;
McDArray<McString *>	texPackages;
McString		texTitle;
int			depthTOC			= 1;
bool			noLatex        			= false;
bool			noClassGraph			= false;
McString		texOutputName;
bool			doListing			= false;
bool			hideIndexOnEverySection		= false;

#undef YY_INPUT
#define	YY_INPUT(buf, result, max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
    int c = 0;

    while(c < max_size && inputString[inputPosition])
	{
	*buf = inputString[inputPosition++];
	c++;
	buf++;
	}
    return c;
}








#line 970 "config.cc"

#define INITIAL 0
#define Start 1
#define SkipComment 2
#define String 3
#define Integer 4
#define Real 5
#define Boolean 6
#define List 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int configYYlex_destroy (void );

int configYYget_debug (void );

void configYYset_debug (int debug_flag  );

YY_EXTRA_TYPE configYYget_extra (void );

void configYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *configYYget_in (void );

void configYYset_in  (FILE * in_str  );

FILE *configYYget_out (void );

void configYYset_out  (FILE * out_str  );

int configYYget_leng (void );

char *configYYget_text (void );

int configYYget_lineno (void );

void configYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int configYYwrap (void );
#else
extern int configYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( configYYtext, configYYleng, 1, configYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( configYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( configYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, configYYin))==0 && ferror(configYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(configYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int configYYlex (void);

#define YY_DECL int configYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after configYYtext and configYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 122 "config.ll"


#line 1167 "config.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! configYYin )
			configYYin = stdin;

		if ( ! configYYout )
			configYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			configYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				configYY_create_buffer(configYYin,YY_BUF_SIZE );
		}

		configYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of configYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 599 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 740 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 124 "config.ll"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 126 "config.ll"
{
			BEGIN(SkipComment);
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "config.ll"
{
			reverseValue = true;
			boolean_data = &onlyDocs;
			BEGIN(Boolean);
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 136 "config.ll"
{
			boolean_data = &commentExtn;
			BEGIN(Boolean);
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 141 "config.ll"
{
			boolean_data = &HTMLsyntax;
			BEGIN(Boolean);
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 146 "config.ll"
{
			string_data = &fileList;
			BEGIN(String);
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 151 "config.ll"
{
			boolean_data = &java;
			BEGIN(Boolean);
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 156 "config.ll"
{
			boolean_data = &noDefines;
			BEGIN(Boolean);
			}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 161 "config.ll"
{
			boolean_data = &withPrivate;
			BEGIN(Boolean);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 166 "config.ll"
{
			boolean_data = &fastNotSmall;
			BEGIN(Boolean);
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 171 "config.ll"
{
			boolean_data = &QuantelExtn;
			BEGIN(Boolean);
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 176 "config.ll"
{
			boolean_data = &internalDoc;
			BEGIN(Boolean);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 181 "config.ll"
{
			boolean_data = &doTeX;
			BEGIN(Boolean);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 186 "config.ll"
{
			boolean_data = &upArrows;
			BEGIN(Boolean);
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 191 "config.ll"
{
			boolean_data = &verb;
			BEGIN(Boolean);
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 196 "config.ll"
{
			boolean_data = &scanIncludes;
			BEGIN(Boolean);
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 201 "config.ll"
{
			boolean_data = &idl;
			BEGIN(Boolean);
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 206 "config.ll"
{
			boolean_data = &php;
			BEGIN(Boolean);
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 211 "config.ll"
{
			boolean_data = &doDOCBOOK;
			BEGIN(Boolean);
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 216 "config.ll"
{
			boolean_data = &doDOCBOOKXML;
			BEGIN(Boolean);
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 221 "config.ll"
{
			boolean_data = &doXML;
			BEGIN(Boolean);
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 226 "config.ll"
{
			list_data = &inputFiles;
			BEGIN(List);
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 231 "config.ll"
{
			boolean_data = &withTables;
			BEGIN(Boolean);
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 236 "config.ll"
{
			boolean_data = &withBorders;
			BEGIN(Boolean);
			}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 241 "config.ll"
{
			string_data = &ownFooter;
			BEGIN(String);
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 246 "config.ll"
{
			string_data = &outputDir;
			BEGIN(String);
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 251 "config.ll"
{
			boolean_data = &showFilenames;
			BEGIN(Boolean);
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 256 "config.ll"
{
			boolean_data = &showFilePath;
			BEGIN(Boolean);
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 261 "config.ll"
{
			boolean_data = &noGifs;
			BEGIN(Boolean);
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 266 "config.ll"
{
			boolean_data = &forceGifs;
			BEGIN(Boolean);
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 271 "config.ll"
{
			reverseValue = true;
			boolean_data = &showInherited;
			BEGIN(Boolean);
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 277 "config.ll"
{
			reverseValue = true;
			boolean_data = &javaGraphs;
			BEGIN(Boolean);
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 283 "config.ll"
{
			boolean_data = &trivialGraphs;
			BEGIN(Boolean);
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 288 "config.ll"
{
			reverseValue = true;
			boolean_data = &alwaysPrintDocSection;
			BEGIN(Boolean);
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 294 "config.ll"
{
			boolean_data = &showMembersInTOC;
			BEGIN(Boolean);
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 299 "config.ll"
{
			reverseValue = true;
			boolean_data = &useGeneral;
			BEGIN(Boolean);
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 305 "config.ll"
{
			boolean_data = &sortEntries;
			BEGIN(Boolean);
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 310 "config.ll"
{
			string_data = &ownHeader;
			BEGIN(String);
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 315 "config.ll"
{
			boolean_data = &printGroupDocBeforeGroup;
			BEGIN(Boolean);
			}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 320 "config.ll"
{
			boolean_data = &printClassDocBeforeGroup;
			BEGIN(Boolean);
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 325 "config.ll"
{
			string_data = &htmlSuffix;
			BEGIN(String);
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 330 "config.ll"
{
			string_data = &htmlStyleSheet;
			BEGIN(String);
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 335 "config.ll"
{
			boolean_data = &onlyClassGraph;
			BEGIN(Boolean);
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 340 "config.ll"
{
			string_data = &texFile;
			BEGIN(String);
			}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 345 "config.ll"
{
			boolean_data = &generateIndex;
			BEGIN(Boolean);
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 350 "config.ll"
{
			// FIXME: this should be a list of style options
			string_data = &texOption;
			BEGIN(String);
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 356 "config.ll"
{
			list_data = &texPackages;
			BEGIN(List);
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 361 "config.ll"
{
			string_data = &texTitle;
			BEGIN(String);
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 366 "config.ll"
{
			integer_data = (long *)&depthTOC;
			BEGIN(Integer);
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 371 "config.ll"
{
			boolean_data = &noLatex;
			BEGIN(Boolean);
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 376 "config.ll"
{
			boolean_data = &noClassGraph;
			BEGIN(Boolean);
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 381 "config.ll"
{
			string_data = &texOutputName;
			BEGIN(String);
			}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 386 "config.ll"
{
			boolean_data = &doListing;
			BEGIN(Boolean);
			}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 391 "config.ll"
{
			boolean_data = &hideIndexOnEverySection;
			BEGIN(Boolean);
			}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 396 "config.ll"
{
			fprintf(stderr, "Unknown token `%s'\n", configYYtext);
			}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 400 "config.ll"
{
			BEGIN(Start);
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 404 "config.ll"
{
			*string_data = configYYtext;
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 408 "config.ll"
{
			if(strcmp(configYYtext, "yes") == 0 || strcmp(configYYtext, "true") == 0)
			    *boolean_data = true;
			else
			    if(strcmp(configYYtext, "no") == 0 || strcmp(configYYtext, "false") == 0)
				*boolean_data = false;
			    else
				fprintf(stderr, "Invalid value `%s' for token\n",
				    configYYtext);
			if(reverseValue)
			    {
			    *boolean_data = !(*boolean_data);
			    reverseValue = false;
			    }
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 424 "config.ll"
{
			long tmp = strtol(configYYtext, 0, 0);
			if(errno == ERANGE)
			    fprintf(stderr, "Invalid value `%s' for token\n",
				configYYtext);
			else
			    *integer_data = tmp;
			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 433 "config.ll"
{
			list_data->append(new McString(configYYtext));
			}
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 437 "config.ll"
{
			BEGIN(Start);
			}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 441 "config.ll"

	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 442 "config.ll"

	YY_BREAK
case 64:
YY_RULE_SETUP
#line 444 "config.ll"
ECHO;
	YY_BREAK
#line 1768 "config.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(String):
case YY_STATE_EOF(Integer):
case YY_STATE_EOF(Real):
case YY_STATE_EOF(Boolean):
case YY_STATE_EOF(List):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed configYYin at a new source and called
			 * configYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = configYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( configYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * configYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of configYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					configYYrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			configYYrestart(configYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) configYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 599 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 599 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 598);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up configYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					configYYrestart(configYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( configYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve configYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void configYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        configYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            configYY_create_buffer(configYYin,YY_BUF_SIZE );
	}

	configYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	configYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void configYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		configYYpop_buffer_state();
	 *		configYYpush_buffer_state(new_buffer);
     */
	configYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	configYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (configYYwrap()) processing, but the only time this flag
	 * is looked at is after configYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void configYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	configYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE configYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) configYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in configYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) configYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in configYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	configYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with configYY_create_buffer()
 * 
 */
    void configYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		configYYfree((void *) b->yy_ch_buf  );

	configYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a configYYrestart() or at EOF.
 */
    static void configYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	configYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then configYY_init_buffer was _probably_
     * called from configYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void configYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		configYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void configYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	configYYensure_buffer_stack();

	/* This block is copied from configYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from configYY_switch_to_buffer. */
	configYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void configYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	configYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		configYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void configYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)configYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in configYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)configYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in configYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE configYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) configYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in configYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	configYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to configYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       configYY_scan_bytes() instead.
 */
YY_BUFFER_STATE configYY_scan_string (yyconst char * yystr )
{
    
	return configYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to configYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE configYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) configYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in configYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = configYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in configYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up configYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		configYYtext[configYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = configYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		configYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int configYYget_lineno  (void)
{
        
    return configYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *configYYget_in  (void)
{
        return configYYin;
}

/** Get the output stream.
 * 
 */
FILE *configYYget_out  (void)
{
        return configYYout;
}

/** Get the length of the current token.
 * 
 */
int configYYget_leng  (void)
{
        return configYYleng;
}

/** Get the current token.
 * 
 */

char *configYYget_text  (void)
{
        return configYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void configYYset_lineno (int  line_number )
{
    
    configYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see configYY_switch_to_buffer
 */
void configYYset_in (FILE *  in_str )
{
        configYYin = in_str ;
}

void configYYset_out (FILE *  out_str )
{
        configYYout = out_str ;
}

int configYYget_debug  (void)
{
        return configYY_flex_debug;
}

void configYYset_debug (int  bdebug )
{
        configYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from configYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    configYYin = stdin;
    configYYout = stdout;
#else
    configYYin = (FILE *) 0;
    configYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * configYYlex_init()
     */
    return 0;
}

/* configYYlex_destroy is for both reentrant and non-reentrant scanners. */
int configYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		configYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		configYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	configYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * configYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *configYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *configYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void configYYfree (void * ptr )
{
	free( (char *) ptr );	/* see configYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 444 "config.ll"



void parseConfig(const McString s)
{
    inputString = s;
    inputPosition = 0;
    configYYrestart(configYYin);
    BEGIN(Start);
    configYYlex();
}

extern "C" {
    int configYYwrap()
	{
	return 1;
	}
};

