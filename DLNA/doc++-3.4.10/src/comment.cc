
#line 3 "comment.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentYY_create_buffer
#define yy_delete_buffer commentYY_delete_buffer
#define yy_flex_debug commentYY_flex_debug
#define yy_init_buffer commentYY_init_buffer
#define yy_flush_buffer commentYY_flush_buffer
#define yy_load_buffer_state commentYY_load_buffer_state
#define yy_switch_to_buffer commentYY_switch_to_buffer
#define yyin commentYYin
#define yyleng commentYYleng
#define yylex commentYYlex
#define yylineno commentYYlineno
#define yyout commentYYout
#define yyrestart commentYYrestart
#define yytext commentYYtext
#define yywrap commentYYwrap
#define yyalloc commentYYalloc
#define yyrealloc commentYYrealloc
#define yyfree commentYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentYYrestart(commentYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentYYleng;

extern FILE *commentYYin, *commentYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentYYrestart()), so that the user can continue scanning by
	 * just pointing commentYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentYYrestart (FILE *input_file  );
void commentYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentYY_create_buffer (FILE *file,int size  );
void commentYY_delete_buffer (YY_BUFFER_STATE b  );
void commentYY_flush_buffer (YY_BUFFER_STATE b  );
void commentYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentYYpop_buffer_state (void );

static void commentYYensure_buffer_stack (void );
static void commentYY_load_buffer_state (void );
static void commentYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentYY_scan_bytes (yyconst char *bytes,int len  );

void *commentYYalloc (yy_size_t  );
void *commentYYrealloc (void *,yy_size_t  );
void commentYYfree (void *  );

#define yy_new_buffer commentYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentYY_create_buffer(commentYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentYY_create_buffer(commentYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *commentYYin = (FILE *) 0, *commentYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentYYlineno;

int commentYYlineno = 1;

extern char *commentYYtext;
#define yytext_ptr commentYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[769] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   29,   29,
       27,   27,    0,    0,   25,   25,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   57,   57,
       62,   59,   60,   59,    4,    4,    4,    4,    1,    1,
        1,   59,    1,    1,   35,   48,   35,   29,   30,   29,
       27,   28,   27,   31,   44,   31,   25,   26,   25,   32,
       45,   32,   33,   46,   33,   34,   47,   34,   36,   49,
       36,   37,   50,   37,   42,   55,   42,   43,   56,   43,
       38,   51,   38,   39,   52,   39,   40,   53,   40,   41,

       54,   41,   57,   58,   57,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    6,    0,    3,
        2,    5,   48,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   44,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   45,   46,   47,   49,   50,   55,   56,
       51,   52,   53,   54,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    7,    0,    0,    0,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,    7,   29,   29,   29,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,    7,   27,   27,   27,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        7,   25,   25,   25,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,    7,   57,
       57,   57,   22,    0,    0,   23,    0,    0,    0,    0,
       20,   19,    0,    0,    0,    0,    7,    0,   21,    0,
       22,   29,   29,   23,   29,   29,   29,   29,   20,   19,
       29,   29,   29,   29,    7,   29,   21,   29,   22,   27,

       27,   23,   27,   27,   27,   27,   20,   19,   27,   27,
       27,   27,    7,   27,   21,   27,   22,   25,   25,   23,
       25,   25,   25,   25,   20,   19,   25,   25,   25,   25,
        7,   25,   21,   25,   22,   57,   57,   23,   57,   57,
       57,   57,   20,   19,   57,   57,   57,   57,    7,   57,
       21,   57,   22,    0,    0,    0,   13,    0,    0,   20,
       19,   12,    0,    0,    0,   11,   21,    0,   22,   29,
       29,   29,   13,   29,   29,   20,   19,   12,   29,   29,
       29,   11,   21,   29,   22,   27,   27,   27,   13,   27,
       27,   20,   19,   12,   27,   27,   27,   11,   21,   27,

       22,   25,   25,   25,   13,   25,   25,   20,   19,   12,
       25,   25,   25,   11,   21,   25,   22,   57,   57,   57,
       13,   57,   57,   20,   19,   12,   57,   57,   57,   11,
       21,   57,    8,    0,    0,   13,    0,    0,   12,    0,
        0,   18,   11,    0,    8,   29,   29,   13,   29,   29,
       12,   29,   29,   18,   11,   29,    8,   27,   27,   13,
       27,   27,   12,   27,   27,   18,   11,   27,    8,   25,
       25,   13,   25,   25,   12,   25,   25,   18,   11,   25,
        8,   57,   57,   13,   57,   57,   12,   57,   57,   18,
       11,   57,    8,    0,    0,    0,    0,    0,    0,   18,

        9,    8,   29,   29,   29,   29,   29,   29,   18,    9,
        8,   27,   27,   27,   27,   27,   27,   18,    9,    8,
       25,   25,   25,   25,   25,   25,   18,    9,    8,   57,
       57,   57,   57,   57,   57,   18,    9,    0,    0,    0,
        0,    0,    0,    9,   29,   29,   29,   29,   29,   29,
        9,   27,   27,   27,   27,   27,   27,    9,   25,   25,
       25,   25,   25,   25,    9,   57,   57,   57,   57,   57,
       57,    9,    0,   14,   24,   17,    0,    0,   29,   14,
       24,   17,   29,   29,   27,   14,   24,   17,   27,   27,
       25,   14,   24,   17,   25,   25,   57,   14,   24,   17,

       57,   57,   10,   14,   17,    0,    0,   10,   14,   17,
       29,   29,   10,   14,   17,   27,   27,   10,   14,   17,
       25,   25,   10,   14,   17,   57,   57,   10,    0,    0,
       10,   29,   29,   10,   27,   27,   10,   25,   25,   10,
       57,   57,    0,   15,   29,   15,   27,   15,   25,   15,
       57,   15,   16,   15,   16,   15,   16,   15,   16,   15,
       16,   15,   16,   16,   16,   16,   16,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    1,    6,    7,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    4,    8,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    8,    1,    1,    1,    1,    9,    1,   10,   11,

       12,   13,   14,   15,   16,    1,    1,   17,   18,   19,
       20,   21,    1,   22,   23,   24,   25,   26,    1,   27,
       28,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[29] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[793] =
    {   0,
     1081,    0,    2,    3,    9,   14, 1080,   11, 1079,   20,
     1078,   21, 1077,   22, 1076,   23, 1075,   24, 1074,   30,
     1073,   31, 1072,   32, 1071,   33, 1070,   34, 1069,   40,
     1068,   41, 1067,   42, 1066,   43, 1065,   44, 1064,   50,
     1066, 1085, 1085,   50, 1085, 1085,   49,    0, 1085,   62,
       75,   77,   50,    0, 1085,   79,    0,    0, 1085,   74,
        0, 1085,   92, 1085,   86,    0,    0, 1085,  110, 1085,
      104,    0, 1085,  122,    0, 1085,  135,    0, 1085,  137,
        0, 1085,  139,    0, 1085,  141,    0, 1085,  143,    0,
     1085,  145,    0, 1085,  147,    0, 1085,  149,    0, 1085,

      151,    0,    0, 1085,  146,   69,   97, 1038, 1048, 1044,
     1050, 1052,  151, 1048,  162, 1031, 1046, 1085,  174,  178,
      182, 1085,  184,    0,   77,  100, 1030, 1040, 1036, 1042,
     1044,  173, 1040,  176, 1023, 1038,    0,  105,  177, 1022,
     1032, 1028, 1034, 1036,  181, 1032,  182, 1015, 1030,  197,
        0,  141,  184, 1014, 1024, 1020, 1026, 1028,  193, 1024,
      193, 1007, 1022,  204,  208,  214,  216,  218,  220,  222,
      224,  226,  228,  230,    0,  212,  223, 1006, 1016, 1012,
     1018, 1020,  227, 1016,  196,  999, 1014, 1011, 1000, 1002,
     1012, 1011,   58,  994, 1001, 1000,  995,  993, 1003,  990,

     1001,  993,  990,  988,  995,  984,  986,  996,  995,  144,
      978,  985,  984,  979,  977,  987,  974,  985,  977,  974,
      972,  979,  968,  970,  980,  979,  227,  962,  969,  968,
      963,  961,  971,  958,  969,  961,  958,  956,  963,  952,
      954,  964,  963,  228,  946,  953,  952,  947,  945,  955,
      942,  953,  945,  942,  940,  947,  936,  938,  948,  947,
      229,  930,  937,  936,  931,  929,  939,  926,  937,  929,
      926,  924,  922,  929,  921,  248,  930,  924,  928,  930,
      918,  925,  927,  911,  924,  908,  250,  922,  919,  907,
      906,  913,  905,  252,  914,  908,  912,  914,  902,  909,

      911,  895,  908,  892,  254,  906,  903,  891,  890,  897,
      889,  256,  898,  892,  896,  898,  886,  893,  895,  879,
      892,  876,  258,  890,  887,  875,  874,  881,  873,  260,
      882,  876,  880,  882,  870,  877,  879,  863,  876,  860,
      262,  874,  871,  859,  858,  865,  857,  264,  866,  860,
      864,  866,  854,  861,  863,  847,  860,  844,  266,  858,
      855,  843,  268,  845,  852,  270,  842,  851,  842,  838,
      272,  857,  840,  847,  836,  833,  274,  842,  276,  837,
      278,  832,  839,  280,  829,  838,  829,  825,  282,  844,
      827,  834,  823,  820,  284,  829,  286,  824,  288,  819,

      826,  290,  816,  825,  816,  812,  292,  831,  814,  821,
      810,  807,  294,  816,  296,  811,  298,  806,  813,  300,
      803,  812,  803,  799,  302,  818,  801,  808,  797,  794,
      304,  803,  306,  798,  308,  793,  800,  310,  790,  799,
      790,  786,  312,  805,  788,  795,  784,  781,  314,  790,
      316,  785,  318,  778,  789,  774,  320,  788,  780,  322,
      793,  324,  774,  774,  773,  326,  328,  771,  330,  768,
      779,  764,  332,  778,  770,  334,  783,  336,  764,  764,
      763,  338,  340,  761,  342,  758,  769,  754,  344,  768,
      760,  346,  773,  348,  754,  754,  753,  350,  352,  751,

      354,  748,  759,  744,  356,  758,  750,  358,  763,  360,
      744,  744,  743,  362,  364,  741,  366,  738,  749,  734,
      368,  748,  740,  370,  753,  372,  734,  734,  733,  374,
      376,  731,  378,  741,  733,  380,  730,  738,  382,  727,
      734,  384,  386,  725,  388,  734,  726,  390,  723,  731,
      392,  720,  727,  394,  396,  718,  398,  727,  719,  400,
      716,  724,  402,  713,  720,  404,  406,  711,  408,  720,
      712,  410,  709,  717,  412,  706,  713,  414,  416,  704,
      418,  713,  705,  420,  702,  710,  422,  699,  706,  424,
      426,  697,  428,  691,  694,  701,  693,  700,  694,  430,

      432,  434,  685,  688,  695,  687,  694,  688,  436,  438,
      440,  679,  682,  689,  681,  688,  682,  442,  444,  446,
      673,  676,  683,  675,  682,  676,  448,  450,  452,  667,
      670,  677,  669,  676,  670,  454,  456,  673,  665,  458,
      659,  666,  657,  460,  668,  660,  462,  654,  661,  652,
      464,  663,  655,  466,  649,  656,  647,  468,  658,  650,
      470,  644,  651,  642,  472,  653,  645,  474,  639,  646,
      637,  476,  649,  478,  480,  482,  635,  642,  646,  484,
      486,  488,  632,  639,  643,  490,  492,  494,  629,  636,
      640,  496,  498,  500,  626,  633,  637,  502,  504,  506,

      623,  630,  508,  510,  512,  629,  624,  514,  516,  518,
      627,  622,  520,  522,  524,  625,  620,  526,  528,  530,
      623,  618,  532,  534,  536,  621,  616,  538,  615,  615,
      540,  613,  613,  542,  611,  611,  544,  228,  223,  546,
      218,  195,  172,  548,  156,  550,  116,  552,   65,  554,
       41,  556,  558,  560,  562,  564,  566,  568,  570,  572,
      574,  576,  578,  580,  582,  584,  586, 1085,  589,  591,
      593,  595,  597,  599,  601,  603,  605,  607,  609,  611,
      613,  615,  617,  619,  621,  623,  625,  627,    6,    3,
        1,    0

    } ;

static yyconst flex_int16_t yy_def[793] =
    {   0,
      769,  769,  770,  770,  771,  771,  772,  772,  773,  773,
      774,  774,  775,  775,  776,  776,  777,  777,  778,  778,
      779,  779,  780,  780,  781,  781,  782,  782,  783,  783,
      784,  784,  785,  785,  786,  786,  787,  787,  788,  788,
      768,  768,  768,  768,  768,  768,  768,   44,  768,  768,
      768,  768,  768,   44,  768,  768,   44,  789,  768,  789,
      790,  768,  790,  768,  768,   44,  791,  768,  791,  768,
      768,   44,  768,  768,   44,  768,  768,   44,  768,  768,
       44,  768,  768,   44,  768,  768,   44,  768,  768,   44,
      768,  768,   44,  768,  768,   44,  768,  768,   44,  768,

      768,   44,  792,  768,  792,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  768,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  792,  792,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
      792,  792,  768,  768,  768,  768,  768,  768,  768,  768,

      768,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  792,  792,
      792,  792,  792,  792,  792,  792,  792,  768,  768,  768,
      768,  768,  768,  768,  789,  789,  789,  789,  789,  789,
      789,  790,  790,  790,  790,  790,  790,  790,  791,  791,
      791,  791,  791,  791,  791,  792,  792,  792,  792,  792,
      792,  792,  768,  768,  768,  768,  768,  768,  789,  789,
      789,  789,  789,  789,  790,  790,  790,  790,  790,  790,
      791,  791,  791,  791,  791,  791,  792,  792,  792,  792,

      792,  792,  768,  768,  768,  768,  768,  789,  789,  789,
      789,  789,  790,  790,  790,  790,  790,  791,  791,  791,
      791,  791,  792,  792,  792,  792,  792,  768,  768,  768,
      789,  789,  789,  790,  790,  790,  791,  791,  791,  792,
      792,  792,  768,  768,  789,  789,  790,  790,  791,  791,
      792,  792,  768,  768,  789,  789,  790,  790,  791,  791,
      792,  792,  768,  789,  790,  791,  792,    0,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768

    } ;

static yyconst flex_int16_t yy_nxt[1114] =
    {   0,
      175,  151,   43,  137,   46,   46,  124,   44,   47,   47,
       48,   50,   51,   56,   52,   53,   50,   51,   57,   52,
       53,   54,   59,   62,   65,   68,   71,   60,   63,   66,
       69,   72,   74,   77,   80,   83,   86,   75,   78,   81,
       84,   87,   89,   92,   95,   98,  101,   90,   93,   96,
       99,  102,  104,  118,  122,  118,  122,  105,  106,  761,
      107,  108,  109,  119,  120,  110,  119,  111,  112,  278,
      113,  114,  115,  116,  279,  117,  121,  121,  121,  121,
      123,  123,  125,  759,  126,  127,  128,  150,  150,  129,
      188,  130,  131,  189,  132,  133,  134,  135,  205,  136,

      138,  206,  139,  140,  141,  164,  164,  142,  190,  143,
      144,  207,  145,  146,  147,  148,  191,  149,  152,  208,
      153,  154,  155,  165,  165,  156,  222,  157,  158,  223,
      159,  160,  161,  162,  757,  163,  166,  166,  167,  167,
      168,  168,  169,  169,  170,  170,  171,  171,  172,  172,
      173,  173,  174,  174,  176,  296,  177,  178,  179,  197,
      297,  180,  239,  181,  182,  240,  183,  184,  185,  186,
      198,  187,  199,  201,  755,  119,  120,  202,  119,  119,
      120,  214,  119,  121,  121,  123,  123,  218,  224,  231,
      753,  219,  215,  235,  216,  241,  225,  236,  150,  150,

      232,  248,  233,  242,  252,  164,  164,  269,  253,  165,
      165,  270,  249,  752,  250,  166,  166,  167,  167,  168,
      168,  169,  169,  170,  170,  171,  171,  172,  172,  173,
      173,  174,  174,  256,  258,  265,  257,  751,  314,  332,
      350,  750,  259,  315,  333,  351,  266,  749,  267,  366,
      366,  377,  377,  384,  366,  395,  377,  402,  366,  413,
      377,  420,  366,  431,  377,  438,  366,  449,  377,  453,
      453,  366,  366,  460,  460,  377,  377,  467,  467,  469,
      453,  384,  366,  476,  460,  395,  377,  483,  467,  485,
      453,  402,  366,  492,  460,  413,  377,  499,  467,  501,

      453,  420,  366,  508,  460,  431,  377,  515,  467,  517,
      453,  438,  366,  524,  460,  449,  377,  531,  467,  453,
      453,  536,  536,  460,  460,  539,  539,  543,  543,  467,
      467,  469,  453,  548,  536,  476,  460,  551,  539,  555,
      543,  483,  467,  485,  453,  560,  536,  492,  460,  563,
      539,  567,  543,  499,  467,  501,  453,  572,  536,  508,
      460,  575,  539,  579,  543,  515,  467,  517,  453,  584,
      536,  524,  460,  587,  539,  591,  543,  531,  467,  593,
      593,  536,  536,  539,  539,  600,  600,  543,  543,  602,
      593,  548,  536,  551,  539,  609,  600,  555,  543,  611,

      593,  560,  536,  563,  539,  618,  600,  567,  543,  620,
      593,  572,  536,  575,  539,  627,  600,  579,  543,  629,
      593,  584,  536,  587,  539,  636,  600,  591,  543,  593,
      593,  600,  600,  644,  644,  602,  593,  609,  600,  651,
      644,  611,  593,  618,  600,  658,  644,  620,  593,  627,
      600,  665,  644,  629,  593,  636,  600,  672,  644,  675,
      675,  644,  644,  681,  675,  651,  644,  687,  675,  658,
      644,  693,  675,  665,  644,  699,  675,  672,  644,  704,
      704,  675,  675,  705,  705,  709,  704,  681,  675,  710,
      705,  714,  704,  687,  675,  715,  705,  719,  704,  693,

      675,  720,  705,  724,  704,  699,  675,  725,  705,  728,
      728,  704,  704,  705,  705,  731,  728,  709,  704,  710,
      705,  734,  728,  714,  704,  715,  705,  737,  728,  719,
      704,  720,  705,  740,  728,  724,  704,  725,  705,  728,
      728,  731,  728,  734,  728,  737,  728,  740,  728,  754,
      754,  756,  754,  758,  754,  760,  754,  762,  754,  763,
      763,  754,  754,  764,  763,  756,  754,  765,  763,  758,
      754,  766,  763,  760,  754,  767,  763,  762,  754,  763,
      763,  764,  763,  765,  763,  766,  763,  767,  763,   42,
       42,   45,   45,   49,   49,   55,   55,   58,   58,   61,

       61,   64,   64,   67,   67,   70,   70,   73,   73,   76,
       76,   79,   79,   82,   82,   85,   85,   88,   88,   91,
       91,   94,   94,   97,   97,  100,  100,  103,  103,  748,
      747,  746,  745,  744,  743,  742,  741,  739,  738,  736,
      735,  733,  732,  730,  729,  727,  726,  723,  722,  721,
      718,  717,  716,  713,  712,  711,  708,  707,  706,  703,
      702,  701,  700,  698,  697,  696,  695,  694,  692,  691,
      690,  689,  688,  686,  685,  684,  683,  682,  680,  679,
      678,  677,  676,  674,  673,  671,  670,  669,  668,  667,
      666,  664,  663,  662,  661,  660,  659,  657,  656,  655,

      654,  653,  652,  650,  649,  648,  647,  646,  645,  643,
      642,  641,  640,  639,  638,  637,  635,  634,  633,  632,
      631,  630,  628,  626,  625,  624,  623,  622,  621,  619,
      617,  616,  615,  614,  613,  612,  610,  608,  607,  606,
      605,  604,  603,  601,  599,  598,  597,  596,  595,  594,
      592,  590,  589,  588,  525,  586,  585,  583,  582,  581,
      580,  578,  577,  576,  509,  574,  573,  571,  570,  569,
      568,  566,  565,  564,  493,  562,  561,  559,  558,  557,
      556,  554,  553,  552,  477,  550,  549,  547,  546,  545,
      544,  542,  541,  540,  461,  538,  537,  535,  534,  533,

      532,  530,  529,  528,  527,  526,  525,  523,  522,  521,
      520,  519,  518,  516,  514,  513,  512,  511,  510,  509,
      507,  506,  505,  504,  503,  502,  500,  498,  497,  496,
      495,  494,  493,  491,  490,  489,  488,  487,  486,  484,
      482,  481,  480,  479,  478,  477,  475,  474,  473,  472,
      471,  470,  468,  466,  465,  464,  463,  462,  461,  459,
      458,  457,  456,  455,  454,  452,  451,  450,  448,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  437,  436,
      435,  434,  433,  432,  430,  429,  428,  427,  426,  425,
      424,  423,  422,  421,  419,  418,  417,  416,  415,  414,

      412,  411,  410,  409,  408,  407,  406,  405,  404,  403,
      401,  400,  399,  398,  397,  396,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  383,  382,  381,  380,
      379,  378,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  365,  364,  363,  362,  361,  360,  359,  358,
      357,  356,  355,  354,  353,  352,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  313,  312,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,

      301,  300,  299,  298,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  280,
      277,  276,  275,  274,  273,  272,  271,  268,  264,  263,
      262,  261,  260,  255,  254,  251,  247,  246,  245,  244,
      243,  238,  237,  234,  230,  229,  228,  227,  226,  221,
      220,  217,  213,  212,  211,  210,  209,  204,  203,  200,
      196,  195,  194,  193,  192,  768,  104,  101,   98,   95,
       92,   89,   86,   83,   80,   77,   74,   71,   68,   65,
       62,   59,   56,   43,   41,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768
    } ;

static yyconst flex_int16_t yy_chk[1114] =
    {   0,
      792,  791,    2,  790,    3,    4,  789,    2,    3,    4,
        4,    5,    5,    8,    5,    5,    6,    6,    8,    6,
        6,    6,   10,   12,   14,   16,   18,   10,   12,   14,
       16,   18,   20,   22,   24,   26,   28,   20,   22,   24,
       26,   28,   30,   32,   34,   36,   38,   30,   32,   34,
       36,   38,   40,   47,   53,   47,   53,   40,   44,  751,
       44,   44,   44,   50,   50,   44,   50,   44,   44,  193,
       44,   44,   44,   44,  193,   44,   51,   51,   52,   52,
       56,   56,   60,  749,   60,   60,   60,   65,   65,   60,
      106,   60,   60,  106,   60,   60,   60,   60,  125,   60,

       63,  125,   63,   63,   63,   71,   71,   63,  107,   63,
       63,  126,   63,   63,   63,   63,  107,   63,   69,  126,
       69,   69,   69,   74,   74,   69,  138,   69,   69,  138,
       69,   69,   69,   69,  747,   69,   77,   77,   80,   80,
       83,   83,   86,   86,   89,   89,   92,   92,   95,   95,
       98,   98,  101,  101,  105,  210,  105,  105,  105,  113,
      210,  105,  152,  105,  105,  152,  105,  105,  105,  105,
      113,  105,  113,  115,  745,  119,  119,  115,  119,  120,
      120,  132,  120,  121,  121,  123,  123,  134,  139,  145,
      743,  134,  132,  147,  132,  153,  139,  147,  150,  150,

      145,  159,  145,  153,  161,  164,  164,  185,  161,  165,
      165,  185,  159,  742,  159,  166,  166,  167,  167,  168,
      168,  169,  169,  170,  170,  171,  171,  172,  172,  173,
      173,  174,  174,  176,  177,  183,  176,  741,  227,  244,
      261,  739,  177,  227,  244,  261,  183,  738,  183,  276,
      276,  287,  287,  294,  294,  305,  305,  312,  312,  323,
      323,  330,  330,  341,  341,  348,  348,  359,  359,  363,
      363,  366,  366,  371,  371,  377,  377,  379,  379,  381,
      381,  384,  384,  389,  389,  395,  395,  397,  397,  399,
      399,  402,  402,  407,  407,  413,  413,  415,  415,  417,

      417,  420,  420,  425,  425,  431,  431,  433,  433,  435,
      435,  438,  438,  443,  443,  449,  449,  451,  451,  453,
      453,  457,  457,  460,  460,  462,  462,  466,  466,  467,
      467,  469,  469,  473,  473,  476,  476,  478,  478,  482,
      482,  483,  483,  485,  485,  489,  489,  492,  492,  494,
      494,  498,  498,  499,  499,  501,  501,  505,  505,  508,
      508,  510,  510,  514,  514,  515,  515,  517,  517,  521,
      521,  524,  524,  526,  526,  530,  530,  531,  531,  533,
      533,  536,  536,  539,  539,  542,  542,  543,  543,  545,
      545,  548,  548,  551,  551,  554,  554,  555,  555,  557,

      557,  560,  560,  563,  563,  566,  566,  567,  567,  569,
      569,  572,  572,  575,  575,  578,  578,  579,  579,  581,
      581,  584,  584,  587,  587,  590,  590,  591,  591,  593,
      593,  600,  600,  601,  601,  602,  602,  609,  609,  610,
      610,  611,  611,  618,  618,  619,  619,  620,  620,  627,
      627,  628,  628,  629,  629,  636,  636,  637,  637,  640,
      640,  644,  644,  647,  647,  651,  651,  654,  654,  658,
      658,  661,  661,  665,  665,  668,  668,  672,  672,  674,
      674,  675,  675,  676,  676,  680,  680,  681,  681,  682,
      682,  686,  686,  687,  687,  688,  688,  692,  692,  693,

      693,  694,  694,  698,  698,  699,  699,  700,  700,  703,
      703,  704,  704,  705,  705,  708,  708,  709,  709,  710,
      710,  713,  713,  714,  714,  715,  715,  718,  718,  719,
      719,  720,  720,  723,  723,  724,  724,  725,  725,  728,
      728,  731,  731,  734,  734,  737,  737,  740,  740,  744,
      744,  746,  746,  748,  748,  750,  750,  752,  752,  753,
      753,  754,  754,  755,  755,  756,  756,  757,  757,  758,
      758,  759,  759,  760,  760,  761,  761,  762,  762,  763,
      763,  764,  764,  765,  765,  766,  766,  767,  767,  769,
      769,  770,  770,  771,  771,  772,  772,  773,  773,  774,

      774,  775,  775,  776,  776,  777,  777,  778,  778,  779,
      779,  780,  780,  781,  781,  782,  782,  783,  783,  784,
      784,  785,  785,  786,  786,  787,  787,  788,  788,  736,
      735,  733,  732,  730,  729,  727,  726,  722,  721,  717,
      716,  712,  711,  707,  706,  702,  701,  697,  696,  695,
      691,  690,  689,  685,  684,  683,  679,  678,  677,  673,
      671,  670,  669,  667,  666,  664,  663,  662,  660,  659,
      657,  656,  655,  653,  652,  650,  649,  648,  646,  645,
      643,  642,  641,  639,  638,  635,  634,  633,  632,  631,
      630,  626,  625,  624,  623,  622,  621,  617,  616,  615,

      614,  613,  612,  608,  607,  606,  605,  604,  603,  599,
      598,  597,  596,  595,  594,  592,  589,  588,  586,  585,
      583,  582,  580,  577,  576,  574,  573,  571,  570,  568,
      565,  564,  562,  561,  559,  558,  556,  553,  552,  550,
      549,  547,  546,  544,  541,  540,  538,  537,  535,  534,
      532,  529,  528,  527,  525,  523,  522,  520,  519,  518,
      516,  513,  512,  511,  509,  507,  506,  504,  503,  502,
      500,  497,  496,  495,  493,  491,  490,  488,  487,  486,
      484,  481,  480,  479,  477,  475,  474,  472,  471,  470,
      468,  465,  464,  463,  461,  459,  458,  456,  455,  454,

      452,  450,  448,  447,  446,  445,  444,  442,  441,  440,
      439,  437,  436,  434,  432,  430,  429,  428,  427,  426,
      424,  423,  422,  421,  419,  418,  416,  414,  412,  411,
      410,  409,  408,  406,  405,  404,  403,  401,  400,  398,
      396,  394,  393,  392,  391,  390,  388,  387,  386,  385,
      383,  382,  380,  378,  376,  375,  374,  373,  372,  370,
      369,  368,  367,  365,  364,  362,  361,  360,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  347,  346,
      345,  344,  343,  342,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  329,  328,  327,  326,  325,  324,

      322,  321,  320,  319,  318,  317,  316,  315,  314,  313,
      311,  310,  309,  308,  307,  306,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  293,  292,  291,  290,
      289,  288,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  243,  242,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  232,  231,  230,  229,  228,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  217,  216,  215,

      214,  213,  212,  211,  209,  208,  207,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  197,  196,  195,  194,
      192,  191,  190,  189,  188,  187,  186,  184,  182,  181,
      180,  179,  178,  163,  162,  160,  158,  157,  156,  155,
      154,  149,  148,  146,  144,  143,  142,  141,  140,  136,
      135,  133,  131,  130,  129,  128,  127,  117,  116,  114,
      112,  111,  110,  109,  108,   41,   39,   37,   35,   33,
       31,   29,   27,   25,   23,   21,   19,   17,   15,   13,
       11,    9,    7,    1,  768,  768,  768,  768,  768,  768,
      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,

      768,  768,  768,  768,  768,  768,  768,  768,  768,  768,
      768,  768,  768
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int commentYY_flex_debug;
int commentYY_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentYYtext;
#line 1 "comment.ll"
/*
  comment.ll

  Copyright (c) 1999-2000 Dragos Acostachioaie

  This file is part of DOC++.

  DOC++ is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the license, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
#line 24 "comment.ll"

#include <assert.h>
#include <ctype.h>
#include <iostream>
#include <stdarg.h>
#include <stdio.h>

#include "doc.h"

using namespace std;

static const char	*inputString;
static int		inputPosition;

static Entry		*current = 0;

static int		yyLineNr = 0;

static void lineCount()
{
    const char *c = commentYYtext;
    for(; *c; ++c)
	yyLineNr += (*c == '\n');
}

#undef	YY_INPUT
#define	YY_INPUT(buf, result, max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
    int c = 0;
    while(c < max_size && inputString[inputPosition])
	{
	*buf = inputString[inputPosition++];
	c++;
	buf++;
	}
    return c;
}

static char nonewline(char c)
{
    return (c == '\n') ? ' ' : c;
}




















#line 1066 "comment.cc"

#define INITIAL 0
#define CppDoc 1
#define CppMemo 2
#define See 3
#define Args 4
#define Type 5
#define Author 6
#define Name 7
#define Version 8
#define Deprecated 9
#define Since 10
#define Param 11
#define Field 12
#define Memo 13
#define Return 14
#define Exception 15
#define Precondition 16
#define Postcondition 17
#define Invariant 18
#define Filename 19

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentYYlex_destroy (void );

int commentYYget_debug (void );

void commentYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentYYget_extra (void );

void commentYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentYYget_in (void );

void commentYYset_in  (FILE * in_str  );

FILE *commentYYget_out (void );

void commentYYset_out  (FILE * out_str  );

int commentYYget_leng (void );

char *commentYYget_text (void );

int commentYYget_lineno (void );

void commentYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentYYwrap (void );
#else
extern int commentYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentYYtext, commentYYleng, 1, commentYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentYYin))==0 && ferror(commentYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentYYlex (void);

#define YY_DECL int commentYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentYYtext and commentYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentYYtext[commentYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 92 "comment.ll"


#line 1278 "comment.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentYYin )
			commentYYin = stdin;

		if ( ! commentYYout )
			commentYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentYY_create_buffer(commentYYin,YY_BUF_SIZE );
		}

		commentYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 769 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1085 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 94 "comment.ll"
{
					current->memo += nonewline(*commentYYtext);
					current->doc += commentYYtext;
					}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 99 "comment.ll"
{
					BEGIN(CppDoc);
					lineCount();
					current->memo += *commentYYtext;
					current->doc += commentYYtext;
					}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 106 "comment.ll"
{
					BEGIN(CppDoc);
					lineCount();
                                        current->doc += commentYYtext;
					}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 112 "comment.ll"
{
					current->doc += *commentYYtext;
					lineCount();
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 117 "comment.ll"
{
					current->memo += commentYYtext;
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 121 "comment.ll"
{
					current->doc += commentYYtext;
					}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 125 "comment.ll"
{
					lineCount();
					current->see.append(new McString);
					BEGIN(See);
					}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 131 "comment.ll"
{
					lineCount();
					BEGIN(Author);
					}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 136 "comment.ll"
{
					lineCount();
					BEGIN(Version);
					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 141 "comment.ll"
{
					lineCount();
					BEGIN(Deprecated);
					}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 146 "comment.ll"
{
					lineCount();
					BEGIN(Since);
					}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 151 "comment.ll"
{
					lineCount();
					current->param.append(new McString);
					BEGIN(Param);
					}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 157 "comment.ll"
{
					lineCount();
					current->field.append(new McString);
					BEGIN(Field);
					}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 163 "comment.ll"
{
					lineCount();
					current->exception.append(new McString);
					BEGIN(Exception);
					}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 169 "comment.ll"
{
					lineCount();
					current->precondition.append(new McString);
					BEGIN(Precondition);
					}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 175 "comment.ll"
{
					lineCount();
					current->postcondition.append(new McString);
					BEGIN(Postcondition);
					}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 181 "comment.ll"
{
					lineCount();
					current->invariant.append(new McString);
					BEGIN(Invariant);
					}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 187 "comment.ll"
{
					lineCount();
					current->retrn.append(new McString);
					BEGIN(Return);
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 193 "comment.ll"
{
					lineCount();
					current->name.clear();
					current->section = MANUAL_SEC;
					BEGIN(Name);
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 200 "comment.ll"
{
					lineCount();
					current->memo.clear();
					BEGIN(Memo);
					}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 206 "comment.ll"
{
					lineCount();
					current->type.clear();
					BEGIN(Type);
					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 212 "comment.ll"
{
					lineCount();
					current->args.clear();
					BEGIN(Args);
					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 218 "comment.ll"
{
					BEGIN(CppDoc);
                                        }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 222 "comment.ll"
{
					BEGIN(Filename);
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 226 "comment.ll"
{
					current->name = commentYYtext;
					}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 230 "comment.ll"
{
					BEGIN(CppDoc);
					yyLineNr++;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 235 "comment.ll"
{
					current->type = commentYYtext;
					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 239 "comment.ll"
{
					BEGIN(CppDoc);
					yyLineNr++;
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 244 "comment.ll"
{
					current->args = commentYYtext;
					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 248 "comment.ll"
{
					BEGIN(CppDoc);
					yyLineNr++;
					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 253 "comment.ll"
{
					current->author += *commentYYtext;
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 257 "comment.ll"
{
					current->version += *commentYYtext;
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 261 "comment.ll"
{
					current->deprecated += *commentYYtext;
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 265 "comment.ll"
{
					current->since += *commentYYtext;
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 269 "comment.ll"
{
					*(current->see.last()) += *commentYYtext;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 273 "comment.ll"
{
					*(current->param.last()) += *commentYYtext;
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 277 "comment.ll"
{
					*(current->field.last()) += *commentYYtext;
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 281 "comment.ll"
{
					*(current->exception.last()) += *commentYYtext;
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 285 "comment.ll"
{
					*(current->precondition.last()) += *commentYYtext;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 289 "comment.ll"
{
					*(current->postcondition.last()) += *commentYYtext;
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 293 "comment.ll"
{
					*(current->invariant.last()) += *commentYYtext;
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 297 "comment.ll"
{
					current->memo += nonewline(*commentYYtext);
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 301 "comment.ll"
{
					*(current->retrn.last()) += *commentYYtext;
					}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 305 "comment.ll"
{
					current->author += '\n';
					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 309 "comment.ll"
{
					current->version += '\n';
					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 313 "comment.ll"
{
					current->deprecated += '\n';
					}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 317 "comment.ll"
{
					current->since += '\n';
					}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 321 "comment.ll"
{
					*(current->see.last()) += '\n';
					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 325 "comment.ll"
{
					*(current->param.last()) += '\n';
					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 329 "comment.ll"
{
					*(current->field.last()) += '\n';
					}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 333 "comment.ll"
{
					*(current->exception.last()) += '\n';
					}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 337 "comment.ll"
{
					*(current->precondition.last()) += '\n';
					}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 341 "comment.ll"
{
					*(current->postcondition.last()) += '\n';
					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 345 "comment.ll"
{
					*(current->invariant.last()) += '\n';
					}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 349 "comment.ll"
{
					current->memo += nonewline(*commentYYtext);
					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 353 "comment.ll"
{
					*(current->retrn.last()) += '\n';
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 357 "comment.ll"
{
					current->fileName = commentYYtext;
					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 361 "comment.ll"
{
					BEGIN(CppDoc);
					yyLineNr++;
					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 366 "comment.ll"

	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 367 "comment.ll"
{
					yyLineNr++;
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 371 "comment.ll"
ECHO;
	YY_BREAK
#line 1864 "comment.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CppDoc):
case YY_STATE_EOF(CppMemo):
case YY_STATE_EOF(See):
case YY_STATE_EOF(Args):
case YY_STATE_EOF(Type):
case YY_STATE_EOF(Author):
case YY_STATE_EOF(Name):
case YY_STATE_EOF(Version):
case YY_STATE_EOF(Deprecated):
case YY_STATE_EOF(Since):
case YY_STATE_EOF(Param):
case YY_STATE_EOF(Field):
case YY_STATE_EOF(Memo):
case YY_STATE_EOF(Return):
case YY_STATE_EOF(Exception):
case YY_STATE_EOF(Precondition):
case YY_STATE_EOF(Postcondition):
case YY_STATE_EOF(Invariant):
case YY_STATE_EOF(Filename):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentYYin at a new source and called
			 * commentYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					commentYYrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentYYrestart(commentYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 769 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 769 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 768);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentYYrestart(commentYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentYY_create_buffer(commentYYin,YY_BUF_SIZE );
	}

	commentYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentYYpop_buffer_state();
	 *		commentYYpush_buffer_state(new_buffer);
     */
	commentYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentYYwrap()) processing, but the only time this flag
	 * is looked at is after commentYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentYY_create_buffer()
 * 
 */
    void commentYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentYYfree((void *) b->yy_ch_buf  );

	commentYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentYYrestart() or at EOF.
 */
    static void commentYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentYY_init_buffer was _probably_
     * called from commentYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentYYensure_buffer_stack();

	/* This block is copied from commentYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentYY_switch_to_buffer. */
	commentYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentYY_scan_string (yyconst char * yystr )
{
    
	return commentYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentYYtext[commentYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentYYget_lineno  (void)
{
        
    return commentYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentYYget_in  (void)
{
        return commentYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentYYget_out  (void)
{
        return commentYYout;
}

/** Get the length of the current token.
 * 
 */
int commentYYget_leng  (void)
{
        return commentYYleng;
}

/** Get the current token.
 * 
 */

char *commentYYget_text  (void)
{
        return commentYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentYYset_lineno (int  line_number )
{
    
    commentYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentYY_switch_to_buffer
 */
void commentYYset_in (FILE *  in_str )
{
        commentYYin = in_str ;
}

void commentYYset_out (FILE *  out_str )
{
        commentYYout = out_str ;
}

int commentYYget_debug  (void)
{
        return commentYY_flex_debug;
}

void commentYYset_debug (int  bdebug )
{
        commentYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentYYin = stdin;
    commentYYout = stdout;
#else
    commentYYin = (FILE *) 0;
    commentYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentYYlex_init()
     */
    return 0;
}

/* commentYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 371 "comment.ll"



void parseDoc(Entry *rt)
{
    Entry *_current = current;

    if(rt->doc.length())
	{
	rt->program = rt->doc;
	rt->doc.clear();
	inputString = rt->program.c_str();
	inputPosition = 0;
	current = rt;
	commentYYrestart(commentYYin);
	if(rt->memo.length())
	    BEGIN(CppDoc);
	else
	    BEGIN(CppMemo);
	commentYYlex();
	rt->program.clear();

	/* Fill in the name if there is none.
           This is for stand alone documentation without an associated
           class, member, etc.
	*/
	if(rt->name.length() == 0 && rt->memo.length() != 0)
	    {
	    rt->name = rt->memo;
	    rt->memo.clear();
	    }
	current = _current;
	}
}

extern "C" {
    int commentYYwrap()
	{
	return 1;
	}
};

