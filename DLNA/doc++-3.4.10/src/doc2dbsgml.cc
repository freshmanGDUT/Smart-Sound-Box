
#line 3 "doc2dbsgml.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer doc2dbsgmlYY_create_buffer
#define yy_delete_buffer doc2dbsgmlYY_delete_buffer
#define yy_flex_debug doc2dbsgmlYY_flex_debug
#define yy_init_buffer doc2dbsgmlYY_init_buffer
#define yy_flush_buffer doc2dbsgmlYY_flush_buffer
#define yy_load_buffer_state doc2dbsgmlYY_load_buffer_state
#define yy_switch_to_buffer doc2dbsgmlYY_switch_to_buffer
#define yyin doc2dbsgmlYYin
#define yyleng doc2dbsgmlYYleng
#define yylex doc2dbsgmlYYlex
#define yylineno doc2dbsgmlYYlineno
#define yyout doc2dbsgmlYYout
#define yyrestart doc2dbsgmlYYrestart
#define yytext doc2dbsgmlYYtext
#define yywrap doc2dbsgmlYYwrap
#define yyalloc doc2dbsgmlYYalloc
#define yyrealloc doc2dbsgmlYYrealloc
#define yyfree doc2dbsgmlYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE doc2dbsgmlYYrestart(doc2dbsgmlYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int doc2dbsgmlYYleng;

extern FILE *doc2dbsgmlYYin, *doc2dbsgmlYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up doc2dbsgmlYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up doc2dbsgmlYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via doc2dbsgmlYYrestart()), so that the user can continue scanning by
	 * just pointing doc2dbsgmlYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when doc2dbsgmlYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int doc2dbsgmlYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow doc2dbsgmlYYwrap()'s to do buffer switches
 * instead of setting up a fresh doc2dbsgmlYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void doc2dbsgmlYYrestart (FILE *input_file  );
void doc2dbsgmlYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE doc2dbsgmlYY_create_buffer (FILE *file,int size  );
void doc2dbsgmlYY_delete_buffer (YY_BUFFER_STATE b  );
void doc2dbsgmlYY_flush_buffer (YY_BUFFER_STATE b  );
void doc2dbsgmlYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void doc2dbsgmlYYpop_buffer_state (void );

static void doc2dbsgmlYYensure_buffer_stack (void );
static void doc2dbsgmlYY_load_buffer_state (void );
static void doc2dbsgmlYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER doc2dbsgmlYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE doc2dbsgmlYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE doc2dbsgmlYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE doc2dbsgmlYY_scan_bytes (yyconst char *bytes,int len  );

void *doc2dbsgmlYYalloc (yy_size_t  );
void *doc2dbsgmlYYrealloc (void *,yy_size_t  );
void doc2dbsgmlYYfree (void *  );

#define yy_new_buffer doc2dbsgmlYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        doc2dbsgmlYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            doc2dbsgmlYY_create_buffer(doc2dbsgmlYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        doc2dbsgmlYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            doc2dbsgmlYY_create_buffer(doc2dbsgmlYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *doc2dbsgmlYYin = (FILE *) 0, *doc2dbsgmlYYout = (FILE *) 0;

typedef int yy_state_type;

extern int doc2dbsgmlYYlineno;

int doc2dbsgmlYYlineno = 1;

extern char *doc2dbsgmlYYtext;
#define yytext_ptr doc2dbsgmlYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up doc2dbsgmlYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	doc2dbsgmlYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 114
#define YY_END_OF_BUFFER 115
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[283] =
    {   0,
        6,    6,   11,   11,   12,   12,  115,   37,  114,   37,
      114,   38,  114,    3,   37,  114,   21,   37,  114,   22,
       37,  114,   25,   37,  114,   18,   37,  114,   19,   37,
      114,   37,  114,   24,   37,  114,   20,   37,  114,   23,
       37,  114,   17,  114,   17,  114,   13,   17,  114,    8,
       17,  114,   15,   17,  114,   16,   17,  114,   14,   17,
      114,    9,   17,  114,    6,   17,  114,    6,   17,  114,
        6,   13,   17,  114,    6,   15,   17,  114,    6,   16,
       17,  114,    7,   13,   17,  114,    6,   14,   17,  114,
      114,  114,   71,  114,   71,  114,   69,   71,  114,   72,

      114,   71,  114,   71,  114,   71,  114,   69,   71,  114,
       68,   72,  114,   71,  114,   67,  114,   66,  114,   87,
      114,   87,  114,   83,  114,   86,   87,  114,   87,  114,
       87,  114,   10,   17,  114,   76,  114,   76,  114,   77,
      114,   76,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,   34,  114,   34,  114,   35,  114,   34,  114,
       11,   17,  114,   11,   13,   17,  114,   12,   17,  114,
       12,   13,   17,  114,   61,  114,   61,  114,   62,  114,
       39,   61,  114,   39,   61,  114,   40,   61,  114,   40,
       61,  114,   60,   61,  114,   41,   61,  114,   63,  114,

       63,  114,   63,  114,   65,   28,    2,   26,   27,    6,
        6,    6,   65,   70,   80,   79,   68,   82,   85,   78,
       97,   96,   98,   91,   90,   92,  103,  102,  104,   88,
      109,  108,  110,  100,   99,  101,   94,   93,   95,  106,
      105,  107,  112,  111,  113,   89,   11,   12,    1,   81,
       75,   84,   59,   58,   44,   45,   57,   75,   73,   46,
       53,   50,   52,   42,   56,   48,   54,    5,   74,   51,
       43,   49,   55,   47,   64,    4,   30,   32,   36,   31,
       33,   29
    } ;

static yyconst flex_int16_t yy_accept[364] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    6,    7,    7,    7,    7,    7,    8,   10,   12,
       14,   17,   20,   23,   26,   29,   32,   34,   37,   40,
       43,   45,   47,   50,   53,   56,   59,   62,   65,   68,
       71,   75,   79,   83,   87,   91,   92,   93,   95,   97,
      100,  102,  104,  106,  108,  111,  114,  116,  118,  120,
      122,  124,  126,  129,  131,  133,  136,  138,  140,  142,
      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,

      155,  157,  159,  161,  164,  168,  171,  175,  177,  179,
      181,  184,  187,  190,  193,  196,  199,  201,  203,  205,
      205,  206,  206,  206,  207,  208,  208,  209,  210,  210,
      210,  211,  212,  214,  214,  214,  214,  214,  214,  214,
      215,  216,  217,  217,  218,  218,  219,  220,  221,  222,
      223,  224,  225,  226,  227,  228,  229,  230,  231,  232,
      233,  234,  235,  236,  237,  238,  239,  240,  241,  242,
      243,  244,  245,  246,  247,  247,  248,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  250,  250,

      250,  250,  250,  250,  251,  252,  252,  253,  253,  254,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  256,  256,  256,  256,  256,  256,  256,
      257,  257,  257,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  259,  259,  259,  259,  260,  260,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  262,  263,  264,
      264,  265,  266,  267,  267,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  269,  269,  269,  270,  270,  271,
      272,  273,  274,  274,  275,  275,  275,  275,  275,  275,

      275,  275,  275,  275,  275,  275,  276,  276,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  278,  278,  278,
      278,  278,  279,  280,  280,  280,  280,  281,  281,  282,
      282,  283,  283
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    9,   10,    1,   11,
       12,   13,    1,   14,   15,   16,   17,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   18,
        1,   19,    1,   20,    1,   21,   22,   23,   24,    1,
        1,    1,   25,    1,    1,   26,   27,    1,   28,   29,
        1,   30,   31,   32,   33,    1,    1,    1,    1,    1,
       34,   35,   36,   37,   38,    1,   39,   40,   41,   42,

       43,   44,   45,    1,   46,    1,    1,   47,   48,   49,
       50,   51,   52,   53,    1,   54,   55,   56,    1,    1,
       57,    1,   58,   59,   60,   61,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[62] =
    {   0,
        1,    1,    1,    2,    3,    1,    3,    3,    3,    3,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        1,    1,    1,    3,    1,    3,    1,    3,    1,    3,
        1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    1,    4,
        1
    } ;

static yyconst flex_int16_t yy_base[380] =
    {   0,
        0,   60,  120,  180,  513,  512,  240,  300,  516,  515,
        9,   19,   18,   28,   29,   30,   45,   46,  509,  508,
      510,  508,   52,   53,  360,  418,   69,   70,   79,   84,
       89,   96,  476,  535,   15,   58,  509,  749,  506,  749,
       67,  749,  749,  749,  749,  749,   83,  749,  749,  749,
      749,  505,  749,  749,  749,  749,  749,  749,    0,    3,
        0,    0,    0,  749,    0,  749,  504,  749,  503,  103,
      107,  128,  498,  101,  131,  137,  146,  749,  749,  749,
      501,  749,  467,  484,  493,  749,  749,  497,  749,  481,
      128,  131,  137,  468,  145,  155,  157,  176,  185,  749,

      494,  749,  450,  199,  202,  205,  208,  749,  490,  749,
      749,   30,  593,  749,  749,  749,  749,  489,  473,  487,
      749,  481,  444,  749,  749,  439,  749,  749,  438,  430,
        0,   25,    0,  216,  222,  463,  226,  462,  468,  749,
      453,  452,  248,  251,  463,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  420,  231,  257,  414,  413,  271,
      628,  261,  438,  133,   89,  264,  439,  437,   15,  436,
      411,  120,  413,  411,  175,  410,  262,  749,  412,  410,

      408,  410,  431,  430,  434,  442,  749,  403,  749,  749,
      424,  416,  149,  421,  413,  412,  418,  389,  416,  387,
      386,  267,  749,  409,  412,  411,  410,  268,  285,  749,
      409,  408,  749,  402,  406,  382,  404,  403,  402,  399,
      398,  373,  396,  386,  382,  361,  357,  363,  174,  362,
      348,  749,  392,  151,  400,  749,  345,  749,  382,  381,
      380,  379,  377,  376,  375,  369,  749,  749,  749,  317,
      749,  749,  749,  373,  749,  346,  369,  364,  361,  342,
      339,  332,  276,  749,  331,  203,  366,  322,  749,  749,
      749,  749,  358,  749,  357,  351,  355,  330,  353,  328,

      312,  317,  329,  324,  347,  749,  346,  749,  269,  310,
      316,  302,  302,  314,  309,  311,  294,  308,  298,  306,
      291,  290,  295,  302,  301,  284,  292,  278,  291,  275,
      275,  279,  285,  277,  254,  260,  246,  258,  240,  236,
      229,  237,  243,  210,  201,  177,  749,  164,  165,  156,
      148,  749,  749,  126,  126,   55,  749,  274,  749,  304,
      749,  749,  683,  687,  691,  695,  699,  703,  707,  711,
      715,  719,  723,  725,  729,  732,  736,  740,  744
    } ;

static yyconst flex_int16_t yy_def[380] =
    {   0,
      363,  363,  364,  364,    4,    4,  365,  365,  366,  366,
      367,  367,  366,  366,  366,  366,  368,  368,    4,    4,
      366,  366,  369,  369,  366,  366,  370,  370,    4,    4,
        4,    4,  371,  371,  372,  372,  362,  362,  373,  362,
      362,  362,  362,  362,  362,  362,  374,  362,  362,  362,
      362,  373,  362,  362,  362,  362,  362,  362,  375,  376,
      375,  375,  375,  362,  375,  362,  373,  362,  373,  362,
      362,  362,  377,  362,  362,  362,  362,  362,  362,  362,
      373,  362,  362,  362,  362,  362,  362,  373,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      373,  362,  362,  362,  362,  362,  362,  362,  373,  362,
      362,  362,  362,  362,  362,  362,  362,  373,  362,  373,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      375,  376,  375,  362,  362,  362,  362,  362,  377,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  378,  379,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  378,  378,  379,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  378,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,    0,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362
    } ;

static yyconst flex_int16_t yy_nxt[811] =
    {   0,
      362,   39,  362,   40,  133,  362,   41,   42,   43,   44,
       69,   70,   71,   72,   73,  362,  118,   45,   46,   67,
       69,   75,   76,   77,   73,   74,  133,  362,   78,   67,
       67,   67,  119,  233,   47,   74,   48,   49,   78,  362,
       79,   79,   79,   79,  234,  362,   81,   81,   82,   82,
      362,   83,   83,   88,   88,   89,   89,   84,   84,  118,
       50,   39,  120,   40,   90,   90,   41,   42,   43,   44,
      101,  101,  102,  102,  178,  119,  179,   45,   46,   85,
       85,  104,  104,  105,  120,   51,  104,  104,  105,  125,
       51,  106,  106,  107,   47,   51,   48,   49,  106,  106,

      107,  122,   51,  103,  103,  134,  135,  134,  123,  137,
      137,  137,  126,  141,  359,  228,  127,  142,  128,  136,
       50,   52,  129,  138,   53,  130,   54,   53,   53,   53,
      134,  135,  134,  143,  144,  143,  228,   53,   53,  137,
      137,  137,  149,  150,  136,  152,  153,  136,  143,  144,
      143,  155,  156,  138,   55,  225,   56,   53,  226,  159,
      160,  237,  136,  254,  227,  151,  238,  287,  154,  162,
      163,  165,  166,  239,  157,  260,  283,   53,  283,   53,
       57,   52,  161,  358,   53,  357,   54,   53,   53,   53,
      168,  169,  164,  233,  167,  356,  260,   53,   53,  171,

      172,  176,  176,  176,  176,  176,  176,  177,  177,  177,
      177,  177,  177,  170,   55,  355,   56,   53,  134,  135,
      134,  354,  173,  353,  137,  137,  137,  242,  137,  137,
      137,  284,  136,  176,  176,  176,  352,   53,  138,   53,
       57,   60,  138,  174,   61,  302,  351,   61,   61,   61,
      143,  144,  143,  137,  137,  137,  303,   61,   61,  177,
      177,  177,  350,  222,  136,  222,  229,  138,  229,  222,
      270,  222,  270,  180,   62,  180,   63,   61,  283,  223,
      283,  349,  230,  244,  348,  223,  271,  229,  347,  229,
      245,  182,  346,  345,  185,  186,  344,   61,  343,   64,

       65,   60,  246,  230,   61,  342,  341,   61,   61,   61,
      182,  313,  247,  185,  360,  340,  186,   61,   61,  270,
      360,  270,  314,  339,  315,  338,  360,  337,  336,  335,
      334,  333,  360,  284,   62,  271,   63,   61,  332,  331,
      330,  329,  328,  327,  360,  326,  325,  324,  323,  322,
      360,  321,  320,  319,  318,  317,  360,   61,  316,   64,
       65,   67,  360,  361,  306,  306,  312,  311,  310,  309,
      308,  306,  307,  306,  305,  294,  294,  304,  254,  301,
      300,  299,   91,  298,  297,   92,  296,  294,  295,   93,
       94,  294,  293,  292,  291,  289,   95,  292,  291,  290,

      289,   96,  288,  256,  254,  286,   97,  285,  282,  281,
      280,  279,   98,  278,  275,  277,  273,  272,   99,   67,
      269,  268,  267,  276,  275,  274,  273,  272,  269,  268,
      267,  266,  265,  264,  258,  263,  258,  262,  261,  258,
       91,  259,  258,   92,  257,  256,  254,   93,   94,  252,
      252,  251,  250,  249,   95,  248,  243,  241,  240,   96,
      236,  235,  232,  231,   97,  224,  210,  209,  208,  207,
       98,  206,  205,  140,  204,  203,   99,  109,  202,  110,
      201,  200,  111,  111,  111,  112,  199,  198,  121,  197,
      121,  121,  175,  113,  114,  121,  158,  148,  121,  147,

      146,  145,  121,  140,  121,  121,  121,  121,  362,   67,
      115,   67,  116,  111,   86,   86,   67,   67,   58,   58,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  111,  362,  111,  109,  362,  110,  362,
      362,  111,  111,  111,  112,  362,  362,  362,  362,  362,
      362,  362,  113,  114,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  115,
      362,  116,  111,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  111,  362,  111,  180,  362,  180,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  181,
      362,  362,  362,  182,  183,  184,  185,  186,  187,  362,
      188,  189,  362,  362,  362,  190,  362,  362,  362,  362,
      362,  362,  182,  191,  192,  185,  362,  362,  186,  193,
      362,  362,  194,  195,  362,  362,  362,  196,  211,  362,
      212,  213,  214,  362,  362,  215,  362,  362,  362,  362,
      216,  362,  362,  362,  362,  362,  362,  217,  362,  218,
      213,  362,  362,  219,  362,  362,  362,  220,  362,  362,
      362,  362,  221,   38,   38,   38,   38,   51,   51,   51,
       51,   59,   59,   59,   59,   66,   66,   66,   66,   68,

       68,   68,   68,   80,   80,   80,   80,   87,   87,   87,
       87,  100,  100,  100,  100,  108,  108,  108,  108,  117,
      117,  117,  117,  120,  120,  120,  120,  124,  124,  131,
      131,  131,  132,  132,  132,  132,  139,  362,  139,  139,
      253,  362,  253,  253,  255,  255,  255,  255,   37,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362
    } ;

static yyconst flex_int16_t yy_chk[811] =
    {   0,
        0,    1,    0,    1,   60,    0,    1,    1,    1,    1,
       11,   11,   11,   11,   11,    0,   35,    1,    1,   13,
       12,   12,   12,   12,   12,   11,  132,    0,   13,   14,
       15,   16,   35,  189,    1,   12,    1,    1,   14,    0,
       15,   16,   15,   16,  189,    0,   17,   18,   17,   18,
        0,   17,   18,   23,   24,   23,   24,   17,   18,   36,
        1,    2,   60,    2,   23,   24,    2,    2,    2,    2,
       27,   28,   27,   28,  112,   36,  112,    2,    2,   17,
       18,   29,   29,   29,  132,   29,   30,   30,   30,   47,
       30,   31,   31,   31,    2,   31,    2,    2,   32,   32,

       32,   41,   32,   27,   28,   70,   70,   70,   41,   71,
       71,   71,   47,   74,  356,  185,   47,   74,   47,   70,
        2,    3,   47,   71,    3,   47,    3,    3,    3,    3,
       72,   72,   72,   75,   75,   75,  185,    3,    3,   76,
       76,   76,   91,   91,   72,   92,   92,   75,   77,   77,
       77,   93,   93,   76,    3,  184,    3,    3,  184,   95,
       95,  192,   77,  254,  184,   91,  192,  254,   92,   96,
       96,   97,   97,  192,   93,  213,  249,    3,  249,    3,
        3,    4,   95,  355,    4,  354,    4,    4,    4,    4,
       98,   98,   96,  195,   97,  351,  213,    4,    4,   99,

       99,  104,  104,  104,  105,  105,  105,  106,  106,  106,
      107,  107,  107,   98,    4,  350,    4,    4,  134,  134,
      134,  349,   99,  348,  135,  135,  135,  195,  137,  137,
      137,  249,  134,  176,  176,  176,  346,    4,  135,    4,
        4,    7,  137,   99,    7,  286,  345,    7,    7,    7,
      143,  143,  143,  144,  144,  144,  286,    7,    7,  177,
      177,  177,  344,  182,  143,  182,  186,  144,  186,  222,
      228,  222,  228,  180,    7,  180,    7,    7,  283,  182,
      283,  343,  186,  197,  342,  222,  228,  229,  341,  229,
      197,  180,  340,  339,  180,  180,  338,    7,  337,    7,

        7,    8,  197,  229,    8,  336,  335,    8,    8,    8,
      180,  309,  197,  180,  358,  334,  180,    8,    8,  270,
      358,  270,  309,  333,  309,  332,  358,  331,  330,  329,
      328,  327,  358,  283,    8,  270,    8,    8,  326,  325,
      324,  323,  322,  321,  360,  320,  319,  318,  317,  316,
      360,  315,  314,  313,  312,  311,  360,    8,  310,    8,
        8,   25,  360,  360,  307,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  293,  288,  287,  285,
      282,  281,   25,  280,  279,   25,  278,  277,  276,   25,
       25,  274,  266,  265,  264,  263,   25,  262,  261,  260,

      259,   25,  257,  255,  253,  251,   25,  250,  248,  247,
      246,  245,   25,  244,  243,  242,  241,  240,   25,   26,
      239,  238,  237,  236,  235,  234,  232,  231,  227,  226,
      225,  224,  221,  220,  219,  218,  217,  216,  215,  214,
       26,  212,  211,   26,  208,  206,  205,   26,   26,  204,
      203,  202,  201,  200,   26,  199,  196,  194,  193,   26,
      191,  190,  188,  187,   26,  183,  179,  178,  175,  145,
       26,  142,  141,  139,  138,  136,   26,   33,  130,   33,
      129,  126,   33,   33,   33,   33,  123,  122,  120,  119,
      118,  109,  103,   33,   33,  101,   94,   90,   88,   85,

       84,   83,   81,   73,   69,   67,   52,   39,   37,   22,
       33,   21,   33,   33,   20,   19,   10,    9,    6,    5,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   33,    0,   33,   34,    0,   34,    0,
        0,   34,   34,   34,   34,    0,    0,    0,    0,    0,
        0,    0,   34,   34,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   34,
        0,   34,   34,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   34,    0,   34,  113,    0,  113,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  113,
        0,    0,    0,  113,  113,  113,  113,  113,  113,    0,
      113,  113,    0,    0,    0,  113,    0,    0,    0,    0,
        0,    0,  113,  113,  113,  113,    0,    0,  113,  113,
        0,    0,  113,  113,    0,    0,    0,  113,  181,    0,
      181,  181,  181,    0,    0,  181,    0,    0,    0,    0,
      181,    0,    0,    0,    0,    0,    0,  181,    0,  181,
      181,    0,    0,  181,    0,    0,    0,  181,    0,    0,
        0,    0,  181,  363,  363,  363,  363,  364,  364,  364,
      364,  365,  365,  365,  365,  366,  366,  366,  366,  367,

      367,  367,  367,  368,  368,  368,  368,  369,  369,  369,
      369,  370,  370,  370,  370,  371,  371,  371,  371,  372,
      372,  372,  372,  373,  373,  373,  373,  374,  374,  375,
      375,  375,  376,  376,  376,  376,  377,    0,  377,  377,
      378,    0,  378,  378,  379,  379,  379,  379,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362
    } ;

extern int doc2dbsgmlYY_flex_debug;
int doc2dbsgmlYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up doc2dbsgmlYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *doc2dbsgmlYYtext;
#line 1 "doc2dbsgml.ll"
/*
  doc2dbsgml-sgml.ll

  Copyright (c) 2000 Caolan McNamara

  This file is part of DOC++.

  DOC++ is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the license, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
#line 24 "doc2dbsgml.ll"
#include <assert.h>
#include <fstream>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "classgraph.h"
#include "doc.h"

using namespace std;

#define YY_DECL int doc2dbsgmlYYlex()

#undef	YY_INPUT
#define	YY_INPUT(buf, result, max_size) result = yyread(buf, max_size);

static Entry*	current;
static int	inPos;
static int	lastContext;
static const char*	inStr;

static enum {
    C_COMMENT,
    SHORT_C_COMMENT,
    CC_COMMENT
} commentMode;

static int	escapePercent = 0;
static int	verbMode      = 0;
static int	skip          = 0;
static int	tab           = 0;
static int	yyLineNr      = 0;
static Entry*	ref           = 0;
static Entry*	noref         = ref + 1;
static char	yyFileName[264];
static bool		mathmode      = false;
static int	tabFlag	      = 0;

static int yyread(char *buf, int max_size)
{
    int c = 0;
    while(c < max_size && inStr[inPos])
	{
	*buf = inStr[inPos++];
	c++;
	buf++;
	}
    return c;
}

extern "C" {
    int doc2dbsgmlYYwrap()
	{
	return 1;
	}
}

static void setupVerbMode()
{
    if(skip)
	{
	fprintf(out, "\\strut\\goodbreak\n");
	fprintf(out, "\\noindent{\\tiny\\em %s}", yyFileName);
	fprintf(out, "\\strut\\nopagebreak\\\\\n");
	skip = 0;
	}
    fprintf(out, "\\cxxCodeLine{%d} ", yyLineNr);
    verbMode = 1;
    tab = 0;
}

static void closeVerbMode()
{
    fprintf(out, "%c\n", 3);
    verbMode = 0;
}


















#line 934 "doc2dbsgml.cc"

#define INITIAL 0
#define Code 1
#define Verb 2
#define Ref 3
#define Label 4
#define Listing 5
#define ARGS 6
#define ARGLISTING 7
#define Comment 8
#define LVerb 9
#define ShortComment 10
#define RealComment 11
#define Graph 12
#define texverbatim 13
#define TeXlist 14
#define HTMLlist 15
#define HTML 16
#define HTMLverbatim 17

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int doc2dbsgmlYYlex_destroy (void );

int doc2dbsgmlYYget_debug (void );

void doc2dbsgmlYYset_debug (int debug_flag  );

YY_EXTRA_TYPE doc2dbsgmlYYget_extra (void );

void doc2dbsgmlYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *doc2dbsgmlYYget_in (void );

void doc2dbsgmlYYset_in  (FILE * in_str  );

FILE *doc2dbsgmlYYget_out (void );

void doc2dbsgmlYYset_out  (FILE * out_str  );

int doc2dbsgmlYYget_leng (void );

char *doc2dbsgmlYYget_text (void );

int doc2dbsgmlYYget_lineno (void );

void doc2dbsgmlYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int doc2dbsgmlYYwrap (void );
#else
extern int doc2dbsgmlYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( doc2dbsgmlYYtext, doc2dbsgmlYYleng, 1, doc2dbsgmlYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( doc2dbsgmlYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( doc2dbsgmlYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, doc2dbsgmlYYin))==0 && ferror(doc2dbsgmlYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(doc2dbsgmlYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int doc2dbsgmlYYlex (void);

#define YY_DECL int doc2dbsgmlYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after doc2dbsgmlYYtext and doc2dbsgmlYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( doc2dbsgmlYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(doc2dbsgmlYYtext[doc2dbsgmlYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 123 "doc2dbsgml.ll"

#line 1143 "doc2dbsgml.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)doc2dbsgmlYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in doc2dbsgmlYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! doc2dbsgmlYYin )
			doc2dbsgmlYYin = stdin;

		if ( ! doc2dbsgmlYYout )
			doc2dbsgmlYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			doc2dbsgmlYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				doc2dbsgmlYY_create_buffer(doc2dbsgmlYYin,YY_BUF_SIZE );
		}

		doc2dbsgmlYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of doc2dbsgmlYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 363 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 749 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 124 "doc2dbsgml.ll"
{
			fprintf(out, "$\\backslash$");
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 128 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 132 "doc2dbsgml.ll"
{
			fprintf(out, "{\\tt\\strut ");
			BEGIN(Verb);
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 137 "doc2dbsgml.ll"
{
			fprintf(out, "\\#define");
			BEGIN(Verb);
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 142 "doc2dbsgml.ll"
{
			BEGIN(Ref);
			}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 146 "doc2dbsgml.ll"
{
			if(ref == 0)
			    {
			    McString tmp = doc2dbsgmlYYtext;
			    ref = getRefEntry(tmp, current);
			    }
			REJECT;
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 155 "doc2dbsgml.ll"
{
			if(ref && ref != noref)
			    {
			    fprintf(out, " ($\\rightarrow$ ");
			    if(MAKE_DOC(ref))
				{
				ref->dumpNumber(out);
				fprintf(out, ",");
				}
			    fprintf(out, " {\\em page }\\pageref{cxx.");
			    ref->dumpNumber(out);
			    fprintf(out, "})");
			    }
			ref = 0;
			BEGIN(0);
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 174 "doc2dbsgml.ll"
{
			fprintf(out, "%c", *doc2dbsgmlYYtext);
			}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 178 "doc2dbsgml.ll"
{
			fprintf(out, "}");
			BEGIN(0);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 183 "doc2dbsgml.ll"
{
			fprintf(out, "}");
			BEGIN(Comment);
			}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 188 "doc2dbsgml.ll"
{
			fprintf(out, "} & ");
			BEGIN(0);
			}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 193 "doc2dbsgml.ll"
{
			fprintf(out, "</parameter> ");
			BEGIN(HTML);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 198 "doc2dbsgml.ll"
{
			fprintf(out, "%c", *doc2dbsgmlYYtext);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 202 "doc2dbsgml.ll"
{
			fprintf(out, "\\cxxtilde ");
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 206 "doc2dbsgml.ll"
{
			fprintf(out, "{$\\backslash$\\relax}");
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 210 "doc2dbsgml.ll"
{
			fprintf(out, "$\\hat{\\;}$");
			}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 214 "doc2dbsgml.ll"
{
			fprintf(out, "%c", *doc2dbsgmlYYtext);
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 218 "doc2dbsgml.ll"
{
			fprintf(out, (mathmode ? "<" : "\\<"));
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 222 "doc2dbsgml.ll"
{
			fprintf(out, (mathmode ? ">" : "\\>"));
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 226 "doc2dbsgml.ll"
{
			fprintf(out, "_");
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 230 "doc2dbsgml.ll"
{
			fprintf(out, "$");
			mathmode = !mathmode;
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 235 "doc2dbsgml.ll"
{
			fprintf(out, "%c", *doc2dbsgmlYYtext);
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 239 "doc2dbsgml.ll"
{
			fprintf(out, "\\cxxtilde ");
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 243 "doc2dbsgml.ll"
{
			fprintf(out, "$\\hat{\\;}$");
			}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 247 "doc2dbsgml.ll"
{
			fprintf(out, tabFlag ? "&" : "\\&");
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 251 "doc2dbsgml.ll"
{
			fprintf(out, "\\[");
			mathmode = true;
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 256 "doc2dbsgml.ll"
{
			fprintf(out, "\\]");
			mathmode = false;
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 261 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 265 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			tabFlag++;
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 270 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			tabFlag--;
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 275 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			mathmode = true;
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 280 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			mathmode = false;
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 285 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			BEGIN(texverbatim);
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 290 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 294 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 298 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			BEGIN(0);
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 303 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 307 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 311 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 315 "doc2dbsgml.ll"
{
			fprintf(out, "$%s$", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 319 "doc2dbsgml.ll"
{
			fprintf(out, "$\\hat{\\;}$");
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 323 "doc2dbsgml.ll"
{
			fprintf(out, "<emphasis>");
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 327 "doc2dbsgml.ll"
{
			fprintf(out, "</emphasis>");
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 331 "doc2dbsgml.ll"
{
			fprintf(out, "{\\bf ");
			}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 335 "doc2dbsgml.ll"
{
			fprintf(out, "{\\it ");
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 339 "doc2dbsgml.ll"
{
			fprintf(out, "}");
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 343 "doc2dbsgml.ll"
{
			fprintf(out, "<programlisting>\n");
			lastContext = YY_START;
			BEGIN(HTMLverbatim);
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 349 "doc2dbsgml.ll"
{
			fprintf(out, "\\begin{enumerate}\n");
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 353 "doc2dbsgml.ll"
{
			fprintf(out, "\\end{enumerate}\n");
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 357 "doc2dbsgml.ll"
{
			fprintf(out, "\\begin{description}\n");
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 361 "doc2dbsgml.ll"
{
			fprintf(out, "\\end{description}\n");
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 365 "doc2dbsgml.ll"
{
			fprintf(out, "\\item[");
			}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 369 "doc2dbsgml.ll"
{
			fprintf(out, "]\t");
			}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 373 "doc2dbsgml.ll"
{
			fprintf(out, "\\begin{itemize}\n");
			}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 377 "doc2dbsgml.ll"
{
			fprintf(out, "\\end{itemize}\n");
			}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 381 "doc2dbsgml.ll"
{
			fprintf(out, "\\item\t");
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 385 "doc2dbsgml.ll"
{
			fprintf(out, "\\strut\\\\");
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 389 "doc2dbsgml.ll"
{
			fprintf(out, "\\<");
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 393 "doc2dbsgml.ll"
{
			fprintf(out, "\\>");
			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 397 "doc2dbsgml.ll"
{
			fprintf(out, "$\\backslash$");
			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 401 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 405 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 409 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 413 "doc2dbsgml.ll"
{
			fprintf(out, "</programlisting>\n");
			BEGIN(lastContext);
			}
	YY_BREAK
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP
#line 418 "doc2dbsgml.ll"
{
			yyLineNr = 1;
			int i;
		   	for(i = 0; doc2dbsgmlYYtext[i + 1] != 6; i++)
		   	    yyFileName[i] = doc2dbsgmlYYtext[i + 1];
		   	yyFileName[i] = 0;
			fprintf(out, "\\strut\\\\\n");
			skip = 1;
		   	}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 428 "doc2dbsgml.ll"
{
			fprintf(out,"</parameter></paramdef>");
			if (doc2dbsgmlYYtext[0] == ',')
				fprintf(out,"\n<paramdef><parameter>");
			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 434 "doc2dbsgml.ll"
{
			fprintf(out,"<paramdef><parameter>");
			BEGIN(ARGLISTING);
			}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 441 "doc2dbsgml.ll"
{
			if(!skip)
			    fprintf(out, "\\cxxCodeLine{%d} %c\n\\\\\n", yyLineNr, 3);
			yyLineNr++;
			}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 447 "doc2dbsgml.ll"
{
			if(!verbMode)
			    setupVerbMode();
			do
			    {
			    putc(' ', out);
			    }
			while(++tab % 8);
			}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 457 "doc2dbsgml.ll"
{
			if(!verbMode)
			    setupVerbMode();
			fprintf(out, "%s", &(doc2dbsgmlYYtext[0]));
			tab += doc2dbsgmlYYleng;
			}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 464 "doc2dbsgml.ll"
{
			if(!verbMode)
			    setupVerbMode();
			putc(doc2dbsgmlYYtext[0], out);
			++tab;
			}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 471 "doc2dbsgml.ll"
{
			if(!skip)
			    {
			    if(!verbMode)
				setupVerbMode();
			    closeVerbMode();
			    fprintf(out, "\\\\\n");
			    }
			yyLineNr++;
			}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 482 "doc2dbsgml.ll"
{
			yyLineNr++;
			}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 486 "doc2dbsgml.ll"

	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 487 "doc2dbsgml.ll"
{
			BEGIN(RealComment);
			}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 491 "doc2dbsgml.ll"

	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 492 "doc2dbsgml.ll"
{
			yyLineNr++;
			}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 496 "doc2dbsgml.ll"
{
			BEGIN(Listing);
			}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 500 "doc2dbsgml.ll"
{
			if(!verbMode)
			    setupVerbMode();
			closeVerbMode();
			fprintf(out, "\\hbox{//");
			commentMode = CC_COMMENT;
			BEGIN(Comment);
			}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 509 "doc2dbsgml.ll"
{
			if(verbMode)
			    closeVerbMode();
			fprintf(out, "\\hbox{/*");
			commentMode = SHORT_C_COMMENT;
			BEGIN(Comment);
			}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 517 "doc2dbsgml.ll"
{
			if(verbMode)
			    closeVerbMode();
			commentMode = C_COMMENT;
			while(doc2dbsgmlYYleng--)
			    yyLineNr += (doc2dbsgmlYYtext[doc2dbsgmlYYleng] == '\n');
			BEGIN(Comment);
			fprintf(out, "\\strut\\\\");
			fprintf(out, "\\strut\\\\");
			}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 528 "doc2dbsgml.ll"
{
			switch(commentMode)
			    {
			    case SHORT_C_COMMENT:
				fprintf(out, "%s", &(doc2dbsgmlYYtext[0]));
				fprintf(out, "}\\\\\n");
				BEGIN(Listing);
				break;
			    case C_COMMENT:
				skip = 1;
				BEGIN(Listing);
				break;
			    default:
				fprintf(out, "%s", &(doc2dbsgmlYYtext[0]));
				break;
			    }
			}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 546 "doc2dbsgml.ll"
{
			switch(commentMode)
			    {
			    case SHORT_C_COMMENT:
				commentMode = C_COMMENT;
				fprintf(out, "}\n");
			    case C_COMMENT:
				putc(doc2dbsgmlYYtext[0], out);
				break;
			    default:
				fprintf(out, "}\\strut\\\\\n");
				BEGIN(Listing);
				break;
			    }
			yyLineNr++;
			}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 563 "doc2dbsgml.ll"
{
			fprintf(out, "$\\backslash$");
			}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 567 "doc2dbsgml.ll"
{
			fprintf(out, "%s", doc2dbsgmlYYtext);
			}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 571 "doc2dbsgml.ll"
{
			fprintf(out, "{\\tt\\strut ");
			BEGIN(LVerb);
			}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 576 "doc2dbsgml.ll"
{
			putc(doc2dbsgmlYYtext[0], out);
			}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 580 "doc2dbsgml.ll"
{
			fprintf(out, "\\cxxNone");
			}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 584 "doc2dbsgml.ll"
{
			fprintf(out, "\\cxxLong");
			}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 588 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPriLeft" \
			    : "\\cxxPriLeft");
			}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 592 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkProLeft" \
			    : "\\cxxProLeft");
			}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 597 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPubLeft" \
			    : "\\cxxPubLeft");
			}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 602 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPrileft" \
			    : "\\cxxPrileft");
			}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 607 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkProleft" \
			    : "\\cxxProleft");
			}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 612 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPubleft" \
			    : "\\cxxPubleft");
			}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 617 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPriLeft" \
			    : "\\cxxLastPriLeft");
			}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 622 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkProLeft" \
			    : "\\cxxLastProLeft");
			}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 627 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPubLeft" \
			    : "\\cxxLastPubLeft");
			}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 632 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPrileft" \
			    : "\\cxxLastPrileft");
			}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 637 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkProleft" \
			    : "\\cxxLastProleft");
			}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 642 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPubleft" \
			    : "\\cxxLastPubleft");
			}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 647 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxPriRight" \
			    : "\\cxxLinkPriRight");
			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 652 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxProRight" \
			    : "\\cxxLinkProRight");
			}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 657 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxPubRight" \
			    : "\\cxxLinkPubRight");
			}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 662 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxPriright" \
			    : "\\cxxLinkPriright");
			}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 667 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxProright" \
			    : "\\cxxLinkProright");
			}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 672 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxPubright" \
			    : "\\cxxLinkPubright");
			}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 677 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstPriright" \
			    : "\\cxxLinkPriright");
			}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 682 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstProright" \
			    : "\\cxxLinkProright");
			}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 687 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstPubright" \
			    : "\\cxxLinkPubright");
			}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 692 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstPriRight" \
			    : "\\cxxLinkPriRight");
			}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 697 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstProRight" \
			    : "\\cxxLinkProRight");
			}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 702 "doc2dbsgml.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstPubRight" \
			    : "\\cxxLinkPubRight");
			}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 706 "doc2dbsgml.ll"
ECHO;
	YY_BREAK
#line 2178 "doc2dbsgml.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Code):
			case YY_STATE_EOF(Verb):
			case YY_STATE_EOF(Ref):
			case YY_STATE_EOF(Label):
			case YY_STATE_EOF(Listing):
			case YY_STATE_EOF(ARGS):
			case YY_STATE_EOF(ARGLISTING):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(LVerb):
			case YY_STATE_EOF(ShortComment):
			case YY_STATE_EOF(RealComment):
			case YY_STATE_EOF(Graph):
			case YY_STATE_EOF(texverbatim):
			case YY_STATE_EOF(TeXlist):
			case YY_STATE_EOF(HTMLlist):
			case YY_STATE_EOF(HTML):
			case YY_STATE_EOF(HTMLverbatim):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed doc2dbsgmlYYin at a new source and called
			 * doc2dbsgmlYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = doc2dbsgmlYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( doc2dbsgmlYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * doc2dbsgmlYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of doc2dbsgmlYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			doc2dbsgmlYYrestart(doc2dbsgmlYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) doc2dbsgmlYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 363 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 363 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 362);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up doc2dbsgmlYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					doc2dbsgmlYYrestart(doc2dbsgmlYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( doc2dbsgmlYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve doc2dbsgmlYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void doc2dbsgmlYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        doc2dbsgmlYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            doc2dbsgmlYY_create_buffer(doc2dbsgmlYYin,YY_BUF_SIZE );
	}

	doc2dbsgmlYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	doc2dbsgmlYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void doc2dbsgmlYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		doc2dbsgmlYYpop_buffer_state();
	 *		doc2dbsgmlYYpush_buffer_state(new_buffer);
     */
	doc2dbsgmlYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	doc2dbsgmlYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (doc2dbsgmlYYwrap()) processing, but the only time this flag
	 * is looked at is after doc2dbsgmlYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void doc2dbsgmlYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	doc2dbsgmlYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE doc2dbsgmlYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) doc2dbsgmlYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in doc2dbsgmlYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) doc2dbsgmlYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in doc2dbsgmlYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	doc2dbsgmlYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with doc2dbsgmlYY_create_buffer()
 * 
 */
    void doc2dbsgmlYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		doc2dbsgmlYYfree((void *) b->yy_ch_buf  );

	doc2dbsgmlYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a doc2dbsgmlYYrestart() or at EOF.
 */
    static void doc2dbsgmlYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	doc2dbsgmlYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then doc2dbsgmlYY_init_buffer was _probably_
     * called from doc2dbsgmlYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void doc2dbsgmlYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		doc2dbsgmlYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void doc2dbsgmlYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	doc2dbsgmlYYensure_buffer_stack();

	/* This block is copied from doc2dbsgmlYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from doc2dbsgmlYY_switch_to_buffer. */
	doc2dbsgmlYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void doc2dbsgmlYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	doc2dbsgmlYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		doc2dbsgmlYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void doc2dbsgmlYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)doc2dbsgmlYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in doc2dbsgmlYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)doc2dbsgmlYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in doc2dbsgmlYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE doc2dbsgmlYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) doc2dbsgmlYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in doc2dbsgmlYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	doc2dbsgmlYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to doc2dbsgmlYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       doc2dbsgmlYY_scan_bytes() instead.
 */
YY_BUFFER_STATE doc2dbsgmlYY_scan_string (yyconst char * yystr )
{
    
	return doc2dbsgmlYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to doc2dbsgmlYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE doc2dbsgmlYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) doc2dbsgmlYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in doc2dbsgmlYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = doc2dbsgmlYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in doc2dbsgmlYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up doc2dbsgmlYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		doc2dbsgmlYYtext[doc2dbsgmlYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = doc2dbsgmlYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		doc2dbsgmlYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int doc2dbsgmlYYget_lineno  (void)
{
        
    return doc2dbsgmlYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *doc2dbsgmlYYget_in  (void)
{
        return doc2dbsgmlYYin;
}

/** Get the output stream.
 * 
 */
FILE *doc2dbsgmlYYget_out  (void)
{
        return doc2dbsgmlYYout;
}

/** Get the length of the current token.
 * 
 */
int doc2dbsgmlYYget_leng  (void)
{
        return doc2dbsgmlYYleng;
}

/** Get the current token.
 * 
 */

char *doc2dbsgmlYYget_text  (void)
{
        return doc2dbsgmlYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void doc2dbsgmlYYset_lineno (int  line_number )
{
    
    doc2dbsgmlYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see doc2dbsgmlYY_switch_to_buffer
 */
void doc2dbsgmlYYset_in (FILE *  in_str )
{
        doc2dbsgmlYYin = in_str ;
}

void doc2dbsgmlYYset_out (FILE *  out_str )
{
        doc2dbsgmlYYout = out_str ;
}

int doc2dbsgmlYYget_debug  (void)
{
        return doc2dbsgmlYY_flex_debug;
}

void doc2dbsgmlYYset_debug (int  bdebug )
{
        doc2dbsgmlYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from doc2dbsgmlYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    doc2dbsgmlYYin = stdin;
    doc2dbsgmlYYout = stdout;
#else
    doc2dbsgmlYYin = (FILE *) 0;
    doc2dbsgmlYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * doc2dbsgmlYYlex_init()
     */
    return 0;
}

/* doc2dbsgmlYYlex_destroy is for both reentrant and non-reentrant scanners. */
int doc2dbsgmlYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		doc2dbsgmlYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		doc2dbsgmlYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	doc2dbsgmlYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    doc2dbsgmlYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * doc2dbsgmlYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *doc2dbsgmlYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *doc2dbsgmlYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void doc2dbsgmlYYfree (void * ptr )
{
	free( (char *) ptr );	/* see doc2dbsgmlYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 706 "doc2dbsgml.ll"



static void initDocbook()
{
    char ch;

    if(ownHeader.length() > 0)
	{
	ifstream title(ownHeader.c_str());

	if(title)
	    while(title)
		{
		title.get(ch);
		putc(ch, out);
		}
	else
	    cerr << "could not open " << texTitle.c_str() << endl;
	}
}

static void finitDocbook()
{
    char indName[50];
    char *p;
    FILE *file;

    if(!noLatex)
	{
 	if(!onlyClassGraph && generateIndex && texOutputName.length() > 0)
 	    {
 	    strcpy((char *)&indName, texOutputName.c_str());

 	    p = strrchr((char *)&indName, '.');

 	    if(p)
 		*p = '\0';

 	    strcat((char *)&indName, ".ind");

 	    fprintf(out, "\\label{Index}\n");
 	    fprintf(out, "\\input %s\n", (char *)&indName);

 	    file = fopen((char *)&indName, "r");

 	    if(!file)
 		file = fopen((char *)&indName, "w");

 	    if(file)
 		fclose(file);
 	    }

//	fprintf(out, "\\end{document}\n");
	}

    if(ownFooter.length() > 0)
	{
	ifstream title(ownFooter.c_str());
	char ch;

	if(title)
	    while(title)
		{
		title.get(ch);
		putc(ch, out);
		}
	else
	    cerr << "could not open " << texTitle.c_str() << endl;
	}
}

void dblisting(char *str)
{
    inPos = 0;
    inStr = str;
    skip = 1;

    initDocbook();
    doc2dbsgmlYYrestart(0);
    BEGIN(Listing);
    doc2dbsgmlYYlex();
    finitDocbook();
}

static void printCode(Entry *cur, const char *str)
{
    inPos = 0;
    inStr = str;
    current = cur;
    if(cur && cur->section == MANUAL_SEC)
	{
	printYYDOCdbsgml(cur, str);
	return;
	}
    doc2dbsgmlYYrestart(0);
    BEGIN(Code);
    doc2dbsgmlYYlex();
}

static void printCode(Entry *cur, const McString& str)
{
    printCode(cur, str.c_str());
}

void printYYDOCdbsgml(Entry *cur, const char *str, int escapePrcnt)
{
    if(strlen(str) > 0)
	{
	inPos = 0;
	inStr = str;
	current = cur;
	escapePercent = escapePrcnt;

	doc2dbsgmlYYrestart(0);
	BEGIN(HTMLsyntax ? HTML : 0);
	doc2dbsgmlYYlex();
	}

    escapePercent = 0;
}

void printYYDOCargsdbsgml(Entry *cur, const char *str)
{
    if(strlen(str) > 0)
	{
	inPos = 0;
	inStr = str;
	current = cur;

	doc2dbsgmlYYrestart(0);
	BEGIN(ARGS);
	doc2dbsgmlYYlex();
	}
}

void printYYDOCdbsgml(Entry *cur, const McString& str, int escapePrcnt)
{
    printYYDOCdbsgml(cur, str.c_str(), escapePrcnt);
}

static char *getEntryName(Entry *entry)
{
    McString *name;

    if(entry->fromUnknownPackage && entry->parent)
	{
	name = new McString(getEntryName (entry->parent));

	if(name->length() > 0)
	    *name += ".";

	*name += entry->name;

	return *name;
	}
    else
	return entry->name;
}

static void dumpCxxItem(Entry *tmp)
{
    fprintf(out, "<refentry id=\"number");
	tmp->dumpNumber(out);
    fprintf(out, "\">\n");
    fprintf(out,"<refmeta>\n<refentrytitle>%s</refentrytitle>\n</refmeta>\n",getEntryName(tmp));
    fprintf(out,"<refnamediv>\n<refname>%s</refname>\n<refpurpose>",getEntryName(tmp));
	printYYDOCdbsgml(tmp, tmp->memo.c_str());
    fprintf(out, "</refpurpose>\n</refnamediv>\n<refsynopsisdiv>\n");
    fprintf(out, "<funcsynopsis>\n");
    fprintf(out, "<funcprototype><funcdef>\n");
    printCode(tmp, tmp->type);
    fprintf(out, " <function>");
    printCode(tmp, getEntryName(tmp));
    fprintf(out, "</function></funcdef>\n");

	printYYDOCargsdbsgml(tmp, tmp->args.c_str());

    fprintf(out, "\n</funcprototype>\n");
    fprintf(out, "</funcsynopsis>\n");

    if(MAKE_DOC(tmp))
	{
//	tmp->dumpNumber(out);
//	fprintf(out, "}\n");
	}
    else
	{
//	fprintf(out, "}\n");
//	fprintf(out, "\\label{cxx.");
//	tmp->dumpNumber(out);
//	fprintf(out, "}\n");
	}

//   fprintf(out, "</para>\n");
   fprintf(out, "</refsynopsisdiv>\n");
}

static int baseDepth(Entry *entry, int n = 1)
{
    if(!HAS_BASES(entry))
	return n;

    int i, j, nn;
    nn = n + 1;

    for(i = 0 ; i < entry->pubBaseclasses.size(); ++i)
	{
	j = baseDepth(entry->pubBaseclasses[i], n + 1);
	if(j > nn)
	    nn = j;
	}
    for(i = 0 ; i < entry->proBaseclasses.size(); ++i)
	{
	j = baseDepth(entry->proBaseclasses[i], n + 1);
	if(j > nn)
	    nn = j;
	}

    return nn;
}

static void printYYGraph(const McString& str)
{
    inPos = 0;
    inStr = str.c_str();

    doc2dbsgmlYYrestart(0);
    BEGIN(Graph);
    doc2dbsgmlYYlex();
}

static void dumpInheritanceEntry(ClassGraph *cls)
{
    int i;

    fprintf(out, "\\cxxInheritanceEntry{");
	for(i = 0 ; i < cls->indent; ++i)
	    fprintf(out, "\\cxxNone");
    printYYGraph(cls->before);
    fprintf(out, "}{");

    if(cls->entry)
	if(!cls->entry->fromUnknownPackage && !onlyClassGraph)
	    cls->entry->dumpNumber(out);
    fprintf(out, "}{");

    if(cls->entry)
	printCode(cls->entry, getEntryName (cls->entry));
    else
	printCode(0, cls->name.c_str());

    fprintf(out, "}{");

    printYYGraph(cls->after);
    fprintf(out, "}\n");
}

static void dumpHierarchy(Entry *entry)
{
    int i;
    ClassGraph *cls;
    ClassGraph cg(entry, 0);
    cg.addBases();
    cg.addDirectChilds();

    fprintf(out, "\\begin{cxxInheritance}\n");
    fprintf(out, "\\paragraph{Inheritance}\\strut\\smallskip\\strut\\\\\n");

    for(cls = cg.firstLine; cls != &cg; cls = cls->nextLine)
	dumpInheritanceEntry(cls);

    fprintf(out, "\\cxxInheritanceEntry[x]{");
    for(i = 0; i < cls->indent; ++i)
	fprintf(out, "\\cxxNone");
    fprintf(out, "}{");

    if(cls->entry)
	if(!cls->entry->fromUnknownPackage && !onlyClassGraph)
	    cls->entry->dumpNumber(out);
    fprintf(out, "}{");
    if(cls->entry)
	printCode(cls->entry, getEntryName(cls->entry));
    else
	printCode(0, cls->name.c_str());

    fprintf(out, "}{");
    fprintf(out, "}\n");

    for(cls = cls->nextLine; cls; cls = cls->nextLine)
	dumpInheritanceEntry(cls);

    fprintf(out, "\\end{cxxInheritance}\n");
}

static char *checkStr(const char *str)
{
    char *new_str = (char *)malloc(strlen(str) + 1);
    char *return_str = new_str;
    bool sep_flag = false;

    strcpy(new_str, str);

    while(*new_str != '\0')
	if(*new_str == '\n')
	    strcpy(new_str, new_str + 1);
	else
	    {
	    if(*new_str == ' ')
		sep_flag = true;

	    new_str++;
	    }

    new_str = return_str;

    if(!sep_flag)
	{
	return_str = (char *)malloc(strlen(new_str) + 2);
	strcpy(return_str, new_str);
	strcat(return_str, " ");
	strcpy(new_str, return_str);
	}

    return_str = (char *)malloc(strlen(new_str) + 2);
    strcpy(return_str, new_str);
    strcat(return_str, "\n");

    return return_str;
}

static void dumpParameter(Entry *entry, int *fields, McDArray<McString *> list,
			  const char *description)
{
    int i;

    if(list.size() > 0)
	{
	fprintf(out, "<refsect1><title>Arguments</title>\n<para>\n<simplelist>\n");

	for(i = 0; i < list.size(); ++i)
	    {
	    fprintf(out, "<member><parameter>");
	    inPos = 0;
	    inStr = checkStr(list[i]->c_str());
	    current = entry;
	    doc2dbsgmlYYrestart(0);
	    BEGIN(HTMLlist);
	    doc2dbsgmlYYlex();
	    fprintf(out, "</member>\n");
	    }

	fprintf(out, "</simplelist>\n</para>\n</refsect1>\n");
	(*fields)++;
	}
}

static void dumpReturn(Entry *entry, int *fields, McDArray<McString *> list,
		       const char *description)
{
    int i;

    if(list.size() > 0)
	{
	fprintf(out,"<refsect1><title>Return Values</title>\n");
	for(i = 0; i < list.size(); ++i)
	    {
		fprintf(out, "<para>\n");
	    inPos = 0;
	    inStr = checkStr(list[i]->c_str());
	    current = entry;
	    doc2dbsgmlYYrestart(0);
//	    BEGIN(TeXlist);
	    BEGIN(0);
	    doc2dbsgmlYYlex();
		fprintf(out, "</para>\n");
	    }
	fprintf(out,"</refsect1>\n");
	(*fields)++;
	}
}

static void dumpJavaDoc(Entry *entry, int *fields, McDArray<McString *> list,
			const char *description)
{
    int i;

    if(list.size() > 0)
	{
	fprintf(out, "\\cxx%s{\n", description);
	fprintf(out, "\\begin{tabular}[t]{lp{0.5\\textwidth}}\n");

	for(i = 0; i < list.size(); ++i)
	    {
	    if(i)
		fprintf(out, "\\\\\n");
	    fprintf(out, "{\\tt\\strut ");
	    inPos = 0;
	    inStr = checkStr(list[i]->c_str());
	    current = entry;
	    doc2dbsgmlYYrestart(0);
	    BEGIN(HTMLsyntax ? HTMLlist : TeXlist);
	    doc2dbsgmlYYlex();
	    }
	fprintf(out, "\\end{tabular}}\n");
	(*fields)++;
	}
}

static int dumpFields(Entry *entry)
{
    int	fields = 0;

    dumpJavaDoc(entry, &fields, entry->exception, "Exceptions");
    dumpJavaDoc(entry, &fields, entry->precondition, "Preconditions");
    dumpJavaDoc(entry, &fields, entry->postcondition, "Postconditions");
    dumpJavaDoc(entry, &fields, entry->invariant, "Invariants");
    dumpParameter(entry, &fields, entry->param, "Parameter");

    if(entry->author.length())
	{
	fprintf(out, "<author>\n");
	inPos = 0;
	inStr = entry->author.c_str();
	current = entry;
	doc2dbsgmlYYrestart(0);
	BEGIN(HTMLsyntax ? HTML : 0);
	doc2dbsgmlYYlex();
	fprintf(out, "</author>\n");
	fields++;
	}

    if(entry->version.length())
	{
	fprintf(out, "<releaseinfo>\n");
	inPos = 0;
	inStr = entry->version.c_str();
	current = entry;
	doc2dbsgmlYYrestart(0);
	BEGIN(HTMLsyntax ? HTML : 0);
	doc2dbsgmlYYlex();
	fprintf(out, "</releaseinfo>\n");
	fields++;
	}

    return fields;
}

static void strlatex(char *s1, const char *s2)
{
    for(;; ++s2)
	{
	if((*s2) == '\0')
	    {
	    *s1 = *s2;
	    break;
	    }
	if((*s2) == '_')
	    {
	    *s1 = '\\';
	    ++s1;
	    }
	*s1 = *s2;++s1;
	}
}

static void dumpEntry(Entry *entry)
{
    Entry *tmp;
    Entry *stack[20];
    int	fields,i;
    int	stack_cnt = 0;
    char *sectionType = 0;

    if(entry->fromUnknownPackage)
	return;

    if(generateIndex)
	{
 	fprintf(out, "\\index{");
     	tmp = entry;

     	while(tmp->parent)
	    {
 	    stack[stack_cnt++] = tmp;
 	    tmp = tmp->parent;
     	    }

     	while(stack_cnt)
     	    {
    	    tmp = stack[--stack_cnt];

 	    printYYDOCdbsgml(tmp, tmp->name, 0);

 	    if(stack_cnt)
 		fprintf(out, "!");
     	    }

     	fprintf(out, "}\n");

     	switch(entry->section)
	    {
     	    case VARIABLE_SEC:
 		sectionType = "Variables/Constants";
 		break;
     	    case FUNCTION_SEC:
 		sectionType = "Functions/Methods";
 		break;
    	    case MACRO_SEC:
 		sectionType = "Macros";
 		break;
    	    case CLASS_SEC:
 		sectionType = "Classes";
 		break;
     	    case INTERFACE_SEC:
 		sectionType = "Interfaces";
 		break;
     	    case UNION_SEC:
 		sectionType = "Unions";
 		break;
     	    case NAMESPACE_SEC:
 		sectionType = "Namespaces";
 		break;
     	    default:
 		sectionType = (char *)0;
 	    }

 	if(sectionType)
 	    {
	    if(!(entry->section & CLASS_SEC) &&
		!(entry->section & INTERFACE_SEC) &&
		(entry->section != NAMESPACE_SEC))
		{
 	    	fprintf(out, "\\index{{\\bf %s}!", sectionType);
		printYYDOCdbsgml(entry->parent, entry->parent->name, 0);
		fprintf(out, "!");
 	    	printYYDOCdbsgml(entry, entry->name, 0);
 	    	fprintf(out, "}\n");
		}
	    else
		{
 	    	fprintf(out, "\\index{{\\bf %s}!", sectionType);
 	    	printYYDOCdbsgml(entry, entry->name, 0);
 	    	fprintf(out, "}\n");
		}
 	    }
	}

    switch(entry->section)
	{
	case VARIABLE_SEC:
	    fprintf( out, "\\begin{cxxvariable}\n");
	    break;
	case FUNCTION_SEC:
//	    fprintf( out, "<sect1>\n");
	    break;
	case MACRO_SEC:
	    fprintf(out, "\\begin{cxxmacro}\n");
	    break;
	case CLASS_SEC:
	    fprintf(out, "\\begin{cxxclass}\n");
	    break;
	case INTERFACE_SEC:
	    fprintf(out, "\\begin{cxxinterface}\n");
	    break;
	case UNION_SEC:
	    fprintf(out, "\\begin{cxxunion}\n");
	    break;
	case NAMESPACE_SEC:
	    fprintf(out, "\\begin{cxxnamespace}\n");
	    break;
	default:
	    fprintf(out, "<sect1>\n");
	    break;
	}

    dumpCxxItem(entry);

    char file_name[BUFSIZ];
    strlatex(file_name, entry->file.c_str());
    if(showFilenames &&
	entry->section != PACKAGE_SEC &&
	entry->section != MANUAL_SEC)
	fprintf(out, "In file %s:%d \\\\\n", (const char *)file_name, entry->startLine);

    fields = dumpFields(entry);

    if(HAS_BASES(entry) || entry->pubChilds.size() || entry->proChilds.size())
	dumpHierarchy(entry);

    if(entry->sub)
	if((entry->section & INTERFACE_SEC) || (entry->section & CLASS_SEC))
	    {
	    for(tmp = entry->sub; tmp; tmp = tmp->next)
		if(tmp->protection == PUBL)
		    {
		    fprintf(out, "\\begin{cxxpublic}\n");
		    for(tmp = entry->sub; tmp; tmp = tmp->next)
			if(tmp->protection == PUBL)
			    {
			    fprintf(out, "\\cxxitem");
			    dumpCxxItem(tmp);
			    }
		    fprintf(out, "\\end{cxxpublic}\n");
		    break;
		    }
	    for(tmp = entry->sub; tmp; tmp = tmp->next)
		if(tmp->protection == PROT)
		    {
		    fprintf(out, "\\begin{cxxprotected}\n");
		    for(tmp = entry->sub; tmp; tmp = tmp->next)
			if(tmp->protection == PROT)
			    {
			    fprintf(out, "\\cxxitem");
			    dumpCxxItem(tmp);
			    }
		    fprintf(out, "\\end{cxxprotected}\n");
		    break;
		    }
	    if(withPrivate)
		{
		for(tmp = entry->sub; tmp; tmp = tmp->next)
		    if(tmp->protection == PRIV)
			{
			fprintf(out, "\\begin{cxxprivate}\n");
			for(tmp = entry->sub; tmp; tmp = tmp->next)
			    if(tmp->protection == PRIV)
				{
				fprintf(out, "\\cxxitem");
				dumpCxxItem(tmp);
				}
			fprintf(out, "\\end{cxxprivate}\n");
			break;
			}
		}
	    }
	else
	    {
	    fprintf(out, "\\begin{cxxnames}\n");

	    for(tmp = entry->sub; tmp; tmp = tmp->next)
		{
		fprintf(out, "\\cxxitem");
		dumpCxxItem(tmp);
		}
	    fprintf(out, "\\end{cxxnames}\n");
	    }

    if(entry->doc.length())
	{
	fprintf(out, "<refsect1><title>Description</title>\n<para>\n");
	printYYDOCdbsgml(entry, entry->doc, 0);
	fprintf(out, "</para></refsect1>\n");
	}

    dumpReturn(entry, &fields, entry->retrn, "Return");

    for(tmp = entry->sub; tmp; tmp = tmp->next)
	if(tmp->protection == PUBL && MAKE_DOC(tmp))
	    dumpEntry(tmp);

    for(tmp = entry->sub; tmp; tmp = tmp->next)
	if(tmp->protection == PROT && MAKE_DOC(tmp))
	    dumpEntry(tmp);

    if(withPrivate)
	for(tmp = entry->sub; tmp; tmp = tmp->next)
	    if(tmp->protection == PRIV && MAKE_DOC(tmp))
		dumpEntry(tmp);

    if(entry->see.size())
	{
	fprintf(out, "<refsect1><title>See Also</title>\n<para>\n");
	char *p;
	for(i = 0; i < entry->see.size(); ++i)
	    {
	    if(i)
		fprintf(out,", ");
	    p = strdup(entry->see[i]->c_str());
	    if(p[strlen(p) - 1] == '\n')
		p[strlen(p) - 1] = '\0';
	    fprintf(out, "<link linkend=number");
	    Entry *ref = getRefEntry(p, entry);
	    if(ref)
		ref->dumpNumber(out);
	    fprintf(out, ">%s</link>", p);
	    free(p);
	    }
	fprintf(out, "\n</para></refsect1>\n");
	fields++;
	}

    switch(entry->section)
	{
	case VARIABLE_SEC:
	    fprintf(out, "\\end{cxxvariable}\n");
	    break;
	case FUNCTION_SEC:
	    fprintf(out, "</refentry>\n");
	    break;
	case UNION_SEC:
	    fprintf(out, "\\end{cxxunion}\n");
	    break;
	case MACRO_SEC:
	    fprintf(out, "\\end{cxxmacro}\n");
	    break;
	case CLASS_SEC:
	    fprintf(out, "\\end{cxxclass}\n");
	    break;
	case INTERFACE_SEC:
	    fprintf(out, "\\end{cxxinterface}\n");
	    break;
	case NAMESPACE_SEC:
	    fprintf(out, "\\end{cxxnamespace}\n");
	    break;
	default:
	    fprintf(out, "</sect1>\n");
	    break;
	}
}

static int atMostDepth(Entry *tmp, int depth)
{
    if(depth && tmp)
	return atMostDepth(tmp->parent, depth - 1);
    else
	return !tmp;
}

static bool relevantContents(Entry *tmp)
{
    for(tmp = tmp->sub; tmp; tmp = tmp->next)
	if(MAKE_DOC(tmp) && (atMostDepth(tmp, depthTOC + 1) ||
	    (tmp->section & CLASS_SEC) ||
	    tmp->section == UNION_SEC ||
	    tmp->section == MANUAL_SEC ||
	    (tmp->section & INTERFACE_SEC) ||
	    tmp->section == PACKAGE_SEC ||
	    tmp->section == NAMESPACE_SEC))
	    return true;
    return false;
}

static void dumpContents(Entry *tmp)
{
    for(tmp = tmp->sub; tmp; tmp = tmp->next)
	if(MAKE_DOC(tmp) && (atMostDepth(tmp, depthTOC + 1) ||
	    (tmp->section & CLASS_SEC) ||
	    tmp->section == UNION_SEC ||
	    tmp->section == MANUAL_SEC ||
	    (tmp->section & INTERFACE_SEC) ||
	    tmp->section == PACKAGE_SEC ||
	    tmp->section == NAMESPACE_SEC))
	    {
	    fprintf(out, "\\cxxContentsEntry{");
	    tmp->dumpNumber(out);
	    fprintf(out, "}{");
	    printCode(tmp, getEntryName(tmp));
	    fprintf(out, "}{");
	    printYYDOCdbsgml(tmp, tmp->memo.c_str());
	    fprintf(out, "}\n");
	    if(tmp->sub && relevantContents(tmp))
		{
		fprintf(out, "\\begin{cxxContents}\n");
		dumpContents(tmp);
		fprintf(out, "\\end{cxxContents}\n");
		}
	    }
}

static void dumpClassGraph(Entry *entry)
{
    ClassGraph cg(entry, 0);
    ClassGraph *cls = &cg;
    cg.addBases();
    cg.addAllChilds();

    fprintf(out, "\\strut\\\\[5pt]\\goodbreak\n");

    if((cls->entry->fromUnknownPackage) || (onlyClassGraph))
    	fprintf( out, "\\cxxClassGraphEntryUnknownPackage{");
    else
	{
    	fprintf( out, "\\cxxClassGraphEntry{");

   	fprintf(out, "}{");
	cls->entry->dumpNumber(out);
	}

    fprintf(out, "}{");
    printCode(cls->entry, getEntryName(cls->entry));

    fprintf(out, "}{");
    fprintf(out, "}\n");

    for(cls = cls->nextLine; cls; cls = cls->nextLine)
	{
	if((cls->entry->fromUnknownPackage) || (onlyClassGraph))
	    fprintf(out, "\\cxxClassGraphEntryUnknownPackage{");
	else
	    fprintf( out, "\\cxxClassGraphEntry{");

	for(int i = 0; i < cls->indent; ++i)
	    fprintf(out, "\\cxxNone");

	printYYGraph(cls->before);

	if((!cls->entry->fromUnknownPackage) && (!onlyClassGraph))
	    {
	    fprintf(out, "}{");

	    cls->entry->dumpNumber(out);
	    }

	fprintf(out, "}{");

	printCode(cls->entry, getEntryName (cls->entry));

	fprintf(out, "}{");
	fprintf(out, "}\n");
	}
}

static void dumpClassGraphs(Entry *tmp)
{
    for(; tmp; tmp = tmp->next)
	{
	if((tmp->section & CLASS_SEC) &&
	    tmp->proBaseclasses.size() == 0 &&
	    tmp->pubBaseclasses.size() == 0)
	    {
	    tmp->currentParent = 0;
	    dumpClassGraph(tmp);
	    }
	dumpClassGraphs(tmp->sub);
	}
}

void usermanDBsgml(char *str, Entry *root)
{
    Entry *tmp;

    initDocbook();

    if(root->sub && root->sub->next == 0 && root->sub->section == MANUAL_SEC)
	{
	root = root->sub;
	root->parent = 0;
	}

    if(!onlyClassGraph)
	{
    	if(root->name.length())
	    {
	    dumpFields(root);
	    fprintf(out, "\\cxxTitle");
	    dumpCxxItem(root);
    	    }

//	fprintf(out, "\\begin{cxxContents}\n");
//    	dumpContents(root);
//	if(!noClassGraph && relevantClassGraphs(root))
//    	    fprintf(out, "\\cxxContentsEntry{}{Class Graph}{}");
//    	fprintf(out, "\\end{cxxContents}\n");

    	if(root->name.length())
    	    {
	    fprintf(out, "\\clearpage\\pagebreak\n");

	    if(root->doc.length())
		{
	    	fprintf(out, "\\begin{cxxdoc}\n");
	    	printYYDOCdbsgml(root, root->doc, 0);
	    	fprintf(out, "\n\\end{cxxdoc}\n");
		}
    	    }

    	for(tmp = root->sub; tmp; tmp = tmp->next)
	    dumpEntry(tmp);
	}

    if(!noClassGraph && relevantClassGraphs(root))
	{
	fprintf(out, "\\begin{cxxClassGraph}\n");
	fprintf(out, "\\label{cxx.}\n");
	root->currentParent = 0;
	dumpClassGraphs(root);
	fprintf(out, "\\end{cxxClassGraph}\n");
	}

    finitDocbook();
}

