
#line 3 "cpp.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer cppYY_create_buffer
#define yy_delete_buffer cppYY_delete_buffer
#define yy_flex_debug cppYY_flex_debug
#define yy_init_buffer cppYY_init_buffer
#define yy_flush_buffer cppYY_flush_buffer
#define yy_load_buffer_state cppYY_load_buffer_state
#define yy_switch_to_buffer cppYY_switch_to_buffer
#define yyin cppYYin
#define yyleng cppYYleng
#define yylex cppYYlex
#define yylineno cppYYlineno
#define yyout cppYYout
#define yyrestart cppYYrestart
#define yytext cppYYtext
#define yywrap cppYYwrap
#define yyalloc cppYYalloc
#define yyrealloc cppYYrealloc
#define yyfree cppYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE cppYYrestart(cppYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int cppYYleng;

extern FILE *cppYYin, *cppYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cppYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up cppYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via cppYYrestart()), so that the user can continue scanning by
	 * just pointing cppYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when cppYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int cppYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow cppYYwrap()'s to do buffer switches
 * instead of setting up a fresh cppYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void cppYYrestart (FILE *input_file  );
void cppYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE cppYY_create_buffer (FILE *file,int size  );
void cppYY_delete_buffer (YY_BUFFER_STATE b  );
void cppYY_flush_buffer (YY_BUFFER_STATE b  );
void cppYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void cppYYpop_buffer_state (void );

static void cppYYensure_buffer_stack (void );
static void cppYY_load_buffer_state (void );
static void cppYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER cppYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE cppYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE cppYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE cppYY_scan_bytes (yyconst char *bytes,int len  );

void *cppYYalloc (yy_size_t  );
void *cppYYrealloc (void *,yy_size_t  );
void cppYYfree (void *  );

#define yy_new_buffer cppYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        cppYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cppYY_create_buffer(cppYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        cppYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            cppYY_create_buffer(cppYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *cppYYin = (FILE *) 0, *cppYYout = (FILE *) 0;

typedef int yy_state_type;

extern int cppYYlineno;

int cppYYlineno = 1;

extern char *cppYYtext;
#define yytext_ptr cppYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up cppYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	cppYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 186
#define YY_END_OF_BUFFER 187
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1397] =
    {   0,
        0,    0,  144,  144,    0,    0,    0,    0,    0,    0,
      151,  151,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   28,   28,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      148,  148,    0,    0,    0,    0,    0,    0,    0,    0,
       50,   50,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   82,   82,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  102,  102,  187,  183,  183,  184,
      183,  183,  183,  183,  183,  144,  144,  145,  144,  144,

      144,  144,  168,  168,  169,  168,  168,  168,  168,  174,
      174,  175,  174,  174,  174,  174,  174,  177,  177,  178,
      177,  177,  177,  177,  151,  152,  183,  153,  154,  161,
      161,  160,  161,  161,  161,  161,  161,  161,  161,  157,
      161,  161,   64,   65,   68,  183,  183,   65,  183,  183,
      183,  183,  183,  183,   28,   28,   29,   28,   28,   28,
       28,  183,  132,  131,  134,  136,  183,  135,  183,  128,
      128,  183,  129,  130,  183,   25,  183,  183,  137,  138,
      126,  183,    7,    6,  148,  148,  148,   69,   91,   70,
       54,  183,  183,   78,   54,   54,   54,   54,   74,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   55,  148,  148,   59,  114,  114,  111,  114,  114,
      114,  114,  115,  115,  116,  115,  115,  115,  115,  115,
       58,   58,   58,   58,   57,   58,   58,   57,   58,   58,
      110,  110,  110,  110,  107,  110,  109,  110,  110,  110,
      110,  110,  110,   50,   50,   50,   50,   50,  183,   50,
       50,   50,   71,   71,   72,   72,   73,   72,   72,   73,
       72,   72,   77,   77,   77,   77,   76,   75,   77,   77,
       98,   98,   97,   97,   98,   92,   93,   96,   98,   97,
       98,   82,   82,   89,   90,   82,   90,   87,   88,   82,

       82,  119,  120,  122,  121,   60,   60,   62,   60,   60,
       60,   60,   60,  117,  118,  125,  125,  123,  123,  125,
      125,  123,  125,   81,   81,   81,   81,   80,   79,   81,
       81,  141,  141,  139,  141,  141,  141,  141,  141,  183,
      183,  183,  183,  183,  183,  182,  183,  183,  183,  183,
      100,  100,   99,  100,  100,  100,  100,  100,  102,  102,
      103,  102,  102,  102,  102,    0,    1,    0,  185,  181,
        0,    0,    0,    0,    0,    0,    5,  144,  144,    1,
      144,  144,  144,  144,  144,  144,  144,  166,  167,    0,
      176,  172,  173,  151,  153,    0,  160,  160,  164,  163,

      162,    0,    0,    0,    0,    0,    0,   64,    0,   66,
        0,   67,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   28,   28,    1,   28,   28,   28,   28,
       28,   28,   28,    0,  134,  136,  135,  132,    0,  134,
        0,  133,  135,    0,  128,  128,    0,  129,    0,   25,
       26,    0,  137,    0,  148,  148,  148,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   69,   54,  185,  181,
        0,    0,   52,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,  148,  148,   59,
        0,    0,    0,    0,    0,    1,    0,    0,  185,  113,
        0,    0,    0,    0,  116,    0,    0,   57,   57,    0,
        0,    0,    0,    0,    0,    0,  108,    0,    0,    0,
        0,   50,   50,    1,   50,    0,   50,   50,   50,   50,
       50,   50,   50,   50,   72,   72,    1,   72,   72,   72,
       72,   72,   72,   72,   97,   96,    0,   96,  185,  181,
       97,   82,   82,    1,    0,    0,   85,   83,   82,   82,
       82,   82,    0,   61,  185,  181,    0,    0,    0,    1,
        0,    0,  142,  185,  140,    0,    0,    0,    0,    0,

        0,  180,  179,    0,    0,  182,    0,    1,  182,    0,
      185,  181,    0,    0,    0,    0,  101,  102,  102,    1,
      102,  102,  102,  102,  102,  102,  102,    2,    0,    0,
        0,    2,  144,  144,  144,    0,    0,    0,  160,  150,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,   28,   28,   28,    0,  128,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      149,    0,    0,    0,  143,    0,    0,    0,   51,   52,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,    0,
        0,  113,    0,  113,    2,  112,  113,  112,    0,    0,
        0,   57,    0,    0,    0,    2,   50,   50,   50,    2,
       72,   72,   72,    0,    0,   94,   95,   84,   85,   86,
       85,   83,   82,   82,   82,  124,  142,    2,    0,    0,
        0,    2,    0,    0,    0,    2,  102,  102,  102,    0,
        0,    0,    0,    3,    0,    0,  144,  144,  144,  144,
      144,  144,    0,    0,    0,    0,  153,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   28,

       28,   28,   28,   28,   28,  132,  128,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  149,  147,  146,    0,    0,    0,  143,  148,
        0,    0,   54,   54,   54,   53,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,    0,  112,  113,  112,  112,  112,    0,    0,    0,
        0,    0,    0,    0,   57,    0,    0,    0,   50,   50,
       50,   50,    3,   50,   50,   72,   72,   72,   72,   72,

       72,   82,   82,   82,   82,   82,   82,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    3,    0,
        0,  102,  102,  102,  102,  102,  102,    0,    0,    0,
        0,    0,  144,  144,  144,  144,  144,    0,    0,    0,
        0,    0,  170,    0,  171,  156,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   28,   28,   28,
       28,   28,  128,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  147,    0,
        0,  149,    0,    0,    0,  165,  143,   54,   54,   54,

       54,   54,   54,   54,   54,   24,   54,   22,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,    0,  112,  112,    0,    0,
        0,    0,  113,    0,    0,   57,  104,    0,    0,   50,
       50,   50,   50,   50,   72,   72,   72,   72,   72,   82,
       82,   82,   82,   82,    0,    0,    0,  142,    0,    0,
        0,    0,    0,    0,    0,  102,  102,  102,  102,  102,
        0,    4,    0,    0,  144,  144,  144,    0,  159,    0,
        0,    0,   44,    0,    0,    0,    0,    0,   28,   28,
       28,  127,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   54,   54,   54,
       54,   54,   54,   54,   18,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   23,    0,
       54,   54,    0,    0,    0,  112,  113,  112,    0,    0,
       57,  104,    0,    0,  105,   50,    4,   50,   50,   72,
       72,   72,   82,   82,   82,    0,    0,    0,    0,    0,
        4,    0,    0,  102,  102,  102,    0,    0,    0,    0,
       44,    0,    0,    0,    0,   43,    0,    0,   53,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   54,   54,
       54,   39,   54,   54,   54,    0,   31,   32,   54,   54,
       54,   54,   54,    0,    8,   33,   20,   54,    0,   54,
       54,    0,    0,  113,  112,  112,   57,    0,  106,  142,
        0,    0,    0,    0,    0,   48,    0,    0,   43,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   54,   38,   53,   35,   54,   54,    0,   54,
       54,   54,    0,   10,   54,    8,   17,    0,   37,   54,
       63,  112,  113,  112,   57,    0,    0,    0,    0,   45,
       48,   46,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   54,   54,   54,    0,   54,   54,   49,   49,   10,
       54,    0,    0,    0,    0,    0,   34,  112,  112,   56,
       56,    0,    0,   41,   42,   45,   46,   47,    0,    0,
        0,    0,    0,    0,    0,   54,   54,   21,    0,   19,
       11,    0,    9,    0,    0,    0,    0,    0,    0,    0,
       41,   42,   47,    0,    0,    0,   54,   40,   30,    9,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
       40,    0,    0,    0,    0,    0,    0,    0,   27,    0,
       15,    0,    0,    0,    0,  158,   13,    0,   16,    0,
        0,   14,    0,  155,   12,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    1,    9,   10,   11,
       12,   13,    1,   14,    1,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,    1,   24,   25,   26,   27,   28,   29,   28,
       28,   28,   30,   28,   31,   32,   28,   33,   28,   34,
       28,   35,   28,   28,   28,   36,   37,   28,   38,   28,
       39,   40,   41,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   28,   52,   53,   54,   55,
       56,   57,   28,   58,   59,   60,   61,   62,   63,   64,
       65,   28,   66,    1,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    1,    1,    2,    1,    3,    1,    1,    4,    1,
        5,    1,    6,    1,    7,    8,    9,    9,   10,   11,
       12,    1,   12,    1,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    4,    1,
        4,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    8,    8,   13
    } ;

static yyconst flex_int16_t yy_base[1582] =
    {   0,
        0,    4,   11,   21,   28,   38,   45,   60,   64,   79,
       95,   72,  163,   85,  230,  234,  250,  273,  313,  381,
      356,  421,  257,  436,  296,  475,  277,  452,  535,  603,
      671,  739,  807,  875,  943, 1010, 1077, 1145,  482,  502,
     1213,  300,  328,  560,  360,  575, 1281, 1348, 1414, 1479,
      626,  642,  361,  652,  396,  694,  479,  715,  762,  830,
      771,  846,  902,  919,  971,  986, 1038, 1104,  513, 1058,
     1111, 1307,  786, 1171,  705, 1186,  456, 1326, 1380, 1395,
      509, 1435,  579, 1445,  901, 1460, 5370, 5371, 5367, 5371,
        5,    6,  338,    5,   31,    0,    1, 5371,   27,   37,

      404,   40, 5371, 5366, 5371,  182,   44,  410,  206, 5371,
     5365, 5371,  198, 5350,  229,  460,  211, 5371, 5363, 5371,
      202,  269,  468,  237,    0, 5371,  521, 5345, 5371, 5371,
     5361,  344,  225, 5346,  295,   12, 5317,  566,  327,  431,
     5344, 5312,    0, 5371, 5371, 5346,  528,  591, 1451, 5304,
      253, 5309, 5305, 1466,    0,   31, 5371,  273,  315,  658,
      382,  911, 5335, 5371,  230, 5371, 5330,  299, 1036,    0,
     5289,  448,    0, 5371,  729,    0,  629, 1070,    0, 5371,
     5371, 1472, 5371, 5371, 1543,  635,   14,  461, 5371, 5371,
        0,  414,  849, 5371, 5319, 5320,  709, 5319, 5371, 5306,

      392,  344, 5289, 5291, 5302, 5287,  429, 5283, 5277,  438,
      363, 5371,  836,  856, 1091, 5325,  570, 5371,  434,  571,
      992,  753, 5371, 5338, 5371,  302, 5323,  577,  929,  565,
     5371, 5336,  645,  494,    0,  584,  989, 5280, 1161,  633,
     5371, 5334, 1321,  554, 5371,  687, 5371,  867, 5279, 5291,
     5283, 1497,  655,    0,  492,  967, 1129,  600, 5320,  711,
     1194,  682, 5371, 5371,    0,  956, 5371,  622,  752, 5371,
      998,  733, 5371, 5329,  646,  781, 5371, 5371, 1064,  769,
     5371, 5328, 1125, 1504,  726, 5371, 5371,  934,  829, 1527,
      841,    0, 1547, 5371, 5288,  758,  894, 5371, 5371, 1155,

      862, 5371, 5371, 5371, 5371, 5371, 5326, 5371,  798, 1012,
     1041, 1201,  953, 5371, 5371, 5371, 5325, 5371, 5371,  853,
     1079, 1371, 1019, 5371, 5324,  861, 1087, 5371, 5371, 1424,
     1072, 5312, 1190, 5371, 1059, 1166, 1283, 1510, 1293, 1407,
     5308, 1300, 1547, 5319,  346, 5371, 1328, 1419, 1561, 1294,
     5371, 5320, 5371,  913, 5305, 1302, 1564, 1287,    0,  506,
     5371,  969, 1364, 1567, 1356, 5318, 5371, 5309, 5371, 5371,
     1576, 1362, 1438,  783, 5270, 1488, 5371,    0,  898,    0,
     5307,    0,    0, 1590, 1375, 1004, 5268, 5291, 5290, 1603,
     5371, 5371, 5371,    0, 5294, 5293, 1573, 1596, 5371, 5371,

     5371,  237, 5264, 1612, 1444,  714, 5255,    0, 5297, 5371,
     1524, 5371, 1584, 5255,  743, 5260, 5256, 5252, 5252, 1558,
     5250, 5244, 1616,    0, 1108,    0, 5291,    0,    0, 1619,
     1489, 1310, 5252, 1626, 1463, 5371, 1482, 5280, 5279, 1500,
     5274, 5273, 1511, 1629,    0, 5244, 1530,    0, 1630,    0,
     1637, 1647,    0, 1648, 1712, 1653,  596, 1545, 1660, 5262,
     5263, 5231, 5261, 5248, 1157, 1108, 5231, 5233, 5244, 1603,
     5226, 5220, 1552, 1335, 1657, 5231, 1671,    0, 1659, 1658,
     1682, 1685, 1686, 5247, 5256, 5236, 5233, 5228, 5234, 5244,
     1262, 5217, 5232, 5213, 1361, 5222,   25, 5218, 5224, 1603,

     5226, 1643, 5212, 5217, 5216, 5208, 5212, 1701, 1716, 1704,
     1707, 5217, 5247, 1681, 1716, 5246, 1725, 1309, 1717, 1732,
     1759, 1731, 1724,  472, 5371, 1765, 1778,    0, 5214, 1782,
     1783, 1787, 5204, 5216, 5208, 1794, 5371, 5202, 5205, 5197,
     1795,    0, 1390,    0, 1803, 5242, 5243,    0,    0,    0,
     1815, 1675, 1681, 5204,    0, 1789,    0, 5241,    0,    0,
     1818, 1692, 1703, 5202, 1828, 1831, 1797, 1834, 5236, 5232,
     1842,    0, 1846,    0, 5206, 1447, 1856,    0, 1860, 1729,
     1774, 5198, 1867, 5371, 5232, 5228, 5230, 1799, 1862, 5229,
     1872, 1841, 5228, 1864, 5227, 1876, 1844, 1855, 1579, 1879,

     5223, 5371, 5371, 1891, 5234, 5371, 1895, 5233, 5234, 1820,
     5231, 5230, 1898, 1869, 1874, 1474, 5371,    0, 1905,    0,
     5223,    0,    0, 1912, 1839, 1868, 5184, 5371,  493, 5185,
     1748,    0, 1855, 5184, 1889, 1858, 1864,    0, 1923, 5371,
      676, 5180, 1876, 5182, 1871, 5180, 5179, 5175, 5164, 5176,
     5175,    0, 1881, 5175, 1896,    0, 5160,  961, 1925, 5183,
     5192, 5173, 5183, 1891, 5156, 5171, 5152, 1893, 5161,  880,
     5157, 1642, 5166, 1896, 5152, 5157, 5156, 5148, 5152, 1428,
     1942, 5138, 5137, 5194, 1943, 5135, 5134, 1947, 5371, 1957,
     5172, 5163, 5145, 5138, 5133, 5141, 5168, 5146, 5144, 5143,

     5130, 5134, 5140, 5139, 5138, 5133, 5136, 5135, 5123, 5118,
     5119, 5125, 5117, 5115, 5128, 5118, 5118, 5112, 5128, 5122,
     1948, 1960, 1964, 1979, 5153, 1969, 1983, 1984, 1953, 1089,
     1974, 5110, 5108, 5107, 5109,    0, 1898, 5118, 1990,    0,
     1920, 5117, 1989, 5149, 5145, 5371, 5371, 5371, 2002, 5371,
     2010,    0, 1951, 5114, 1992, 5371, 2014, 5146, 1990,    5,
     2015, 5154, 1966, 2007, 2017,    0, 1971, 5111, 2020, 5108,
     5108, 5103, 5149, 5371, 1634, 2022, 5104, 5104, 5099, 5145,
     2027, 2030, 5135, 5134, 5142, 5141, 5125, 5120, 5091, 2003,
     5075, 5076, 5085, 5092, 5077, 5078, 5092, 5089, 5090, 5084,

     5084, 5079, 5125, 2033, 2035, 5109, 5082, 5099, 5090, 5071,
     5098, 5076, 5074, 5073, 5060, 5064, 5070, 5069, 5068, 5063,
     5066, 5065, 5049, 5050, 5056, 5048, 5046, 5059, 5049, 5049,
     5043, 5059, 2037, 2030, 5371, 5088, 5034, 5051, 2049, 5082,
     5093, 5030, 5070, 5069, 5050,    0, 5049, 5040, 5056, 5042,
     5043, 2052, 5028, 2074, 5029, 5027, 5029, 5028, 5024, 5022,
     5037, 5036, 5031, 5026, 5025, 5030, 5028, 5018, 5023, 5010,
     5010, 5018, 2080, 2084, 2088, 2057, 2092, 1612, 2017, 2051,
     1167, 2090, 2094, 2101, 5025, 5007, 5019, 5002, 5016, 5016,
     5011, 2103,    0, 2105, 2107, 5013, 5013, 5008, 2095, 2108,

     2115, 5010, 5010, 5005, 2116, 2120, 2123, 2100, 2110,  842,
     2117, 2121, 2127, 2129, 2140, 2134, 2141, 5051, 5371, 2146,
     2139, 5006, 5006, 5001, 5047, 2147, 2145, 5046, 5045, 5000,
     2150, 2152, 5043, 5042, 4997, 2154, 2156, 5031, 2035, 5030,
     2146, 5038, 5371, 5037, 5371, 5371, 4985, 5016, 4976, 4980,
     4979, 5023, 4973, 4977, 4988, 4971, 4984, 5025, 5024, 4979,
     2159, 2161, 4976, 5000, 4999, 4972, 4988, 4974, 4975, 2167,
     4960, 2173, 4961, 4945, 4947, 4946, 4941, 4937, 4952, 4946,
     4851, 4773, 4746, 4740, 4730, 4706, 4685, 4650, 2184, 4665,
     2188, 2066, 4626, 4660, 4670, 5371, 2161, 4629, 4584, 4569,

     4557, 4570, 4556, 4540, 4530, 2206, 2209, 2212, 4510, 4424,
     4355, 4302, 4281, 4267, 4263, 4246, 4252, 4229, 4223, 4207,
     4219, 2215, 2218, 4221, 4187, 4167, 2222, 2226, 1540, 2164,
     1927, 2228, 2230, 2232, 2235, 4161, 2249, 4161, 2252, 2236,
     2254, 4170, 2255, 2257, 2175, 2256, 4141, 2258, 2263, 2265,
     2268, 4140, 2271, 2282, 2192, 2260, 2237, 2266, 2288, 2286,
     4182, 4178, 2241, 2245, 2292, 4177, 4175, 4105, 2293, 2296,
     4001, 5371, 4000, 2298, 3998, 3995, 2303, 3932, 5371, 3949,
     3914, 3888, 2308, 3847, 3777, 3774, 3772, 3802, 3790, 3785,
     2304,    0, 3756, 3736, 3717, 3709, 3688, 3679, 2311, 3671,

     3674, 3657, 3653, 3651, 3641, 3636, 3648, 3645, 3641, 3625,
     3637, 2317, 2320, 3639, 3628, 3625, 3660, 3641, 3634, 3623,
     3610, 2323, 3600, 3593, 2350, 3599, 3619, 2353, 2356, 3564,
     3536, 3497, 3454, 3429, 2359, 2362, 2365, 3440, 2368, 2371,
     3415, 3410, 3415, 2301, 2373, 2376, 2379, 2393, 2314, 2383,
     3389, 2397, 2400, 2409, 5371, 2336,    0, 2404, 2406, 2387,
     2412, 2414, 2417, 2421, 2424, 2381, 2425, 2431, 2432, 3432,
     5371, 3409, 2340, 3403, 3402, 2415, 3343, 3345, 3319, 3316,
     2443, 3318, 3360, 3323, 3312, 2446, 3332, 3322, 5371, 2452,
     3306, 3299, 3305, 3348, 2455, 2461, 3309, 3307, 3300, 3286,

     2466, 2470, 2473, 3296, 3278, 3274, 3279, 3308, 3272, 2489,
     2492, 2495, 2498, 3224, 3197, 2803, 2501, 2504, 2747, 2710,
     2695, 2507, 2705, 2510, 2513, 2516, 2519, 2527, 2704, 2530,
     2692, 2419, 2523, 2537, 2540, 2543, 2680, 2557, 5371, 2439,
      209,  266,  315,  382,  452, 2560,  515,  501, 2566,  609,
     2569, 2572,  603,  701,  732,  799, 2575,  914, 2578, 2581,
      951,  992, 1039, 2584, 2587, 2592, 1075, 1140, 1308, 1299,
     1328, 2597, 2620, 2623, 1382, 2626, 2629, 1528, 2637, 2640,
     2476, 2643, 2646, 2653, 2690, 1589, 1668, 1753, 1804, 2649,
     2667, 2674, 1875, 1931, 2018, 2091, 2126, 2137, 2160, 2677,

     2194, 2264, 2249, 2680, 2289, 2712, 2715, 5371,    0, 2718,
     2721, 2256, 2287, 2285, 2295, 2343, 2729, 2732, 2738, 5371,
        0, 2349, 2379, 2741, 2746, 2756, 2759, 2762, 2415, 2408,
     2765, 2768, 2771, 2774, 2407, 2436, 2457, 2777, 2780, 2783,
     2786, 2791, 2794, 2439, 2425, 2431, 2474, 2469, 2494, 2487,
     2797, 2800, 2803, 2518, 2540, 2505, 2808, 2811, 2814, 2817,
     2495, 2501, 2496, 2502, 2509, 2507, 2539, 2820, 2670, 2823,
     2826, 2555, 2829, 2570, 2567, 2592, 2604, 2593, 2684, 2832,
     2835, 2601, 2838, 2622, 2614, 5371, 2841, 2844, 2847, 2639,
     2640, 2850, 2853, 5371, 2856, 5371, 2861, 2874, 2887, 2900,

     2913, 2926, 2939, 2952, 2965, 2978, 2991, 3004, 3017, 3030,
     3043, 3056, 3069, 3082, 3095, 3108, 3121, 3134, 3147, 3160,
     3173, 3186, 3199, 3212, 3225, 3238, 3251, 3264, 2699, 3269,
     3273, 3283, 3296, 3309, 3319, 3329, 3339, 3345, 3348, 3356,
     3362, 3375, 3388, 3395, 3408, 3421, 3434, 3447, 3460, 3473,
     3486, 3499, 3512, 3525, 3538, 3551, 3564, 3577, 3590, 2718,
     3595, 3599, 3609, 3622, 3635, 3645, 3655, 3665, 3671, 3674,
     3682, 3688, 3701, 3714, 3721, 3734, 3747, 3760, 3773, 3786,
     3799, 3812, 3825, 3838, 3851, 3864, 3877, 3890, 3903, 3916,
     3929, 3942, 3955, 2719, 3968, 3981, 3991, 3997, 4006, 4019,

     4032, 4045, 4058, 4071, 4084, 4097, 4110, 4123, 4136, 4141,
     4151, 4164, 4174, 4181, 4190, 4203, 4210, 4223, 4236, 4249,
     4256, 4269, 4282, 4295, 4308, 4321, 4334, 4347, 4360, 4373,
     4386, 4399, 4412, 4425, 4438, 4451, 4464, 4477, 4490, 4503,
     4516, 4529, 4542, 4555, 4568, 4578, 4587, 4600, 4607, 4620,
     4633, 4646, 4659, 4666, 4679, 4692, 4705, 4718, 4731, 4744,
     4757, 4770, 4783, 4796, 4809, 4822, 4835, 4848, 4861, 4874,
     4887, 4900, 4913, 4926, 4939, 4952, 4965, 4978, 4988, 4991,
     5004
    } ;

static yyconst flex_int16_t yy_def[1582] =
    {   0,
     1397, 1397, 1398, 1398, 1399, 1399, 1400, 1400, 1401, 1401,
     1396,   11, 1396,   13, 1402, 1402, 1402, 1402, 1403, 1403,
     1397, 1397, 1397, 1397, 1397, 1397, 1404, 1404, 1405, 1405,
     1406, 1406, 1407, 1407, 1408, 1408, 1409, 1409, 1397, 1397,
     1396,   41, 1410, 1410, 1411, 1411, 1412, 1412, 1413, 1413,
     1414, 1414, 1397, 1397, 1397, 1397, 1415, 1415, 1416, 1416,
     1417, 1417, 1418, 1418, 1397, 1397, 1397, 1397, 1419, 1419,
     1397, 1397, 1420, 1420, 1421, 1421, 1422, 1422, 1397, 1397,
     1423, 1423, 1424, 1424, 1425, 1425, 1396, 1396, 1426, 1396,
     1396, 1396, 1396, 1396, 1396, 1427, 1428, 1396, 1427, 1427,

     1427, 1427, 1396, 1426, 1396, 1396, 1396, 1396, 1396, 1396,
     1426, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1426, 1396,
     1396, 1396, 1396, 1396, 1429, 1396, 1396, 1430, 1396, 1396,
     1426, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1431, 1396, 1396, 1432, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1433, 1434, 1396, 1433, 1433, 1433,
     1433, 1396, 1435, 1396, 1396, 1396, 1436, 1396, 1396, 1437,
     1437, 1396, 1438, 1396, 1396, 1439, 1396, 1396, 1440, 1396,
     1396, 1396, 1396, 1396, 1396, 1396,  185, 1396, 1396, 1396,
     1441, 1396, 1396, 1396, 1441, 1441, 1441, 1441, 1396, 1441,

     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441,
     1441, 1396,  185,  185, 1396, 1442, 1443, 1396, 1442, 1442,
     1442, 1442, 1396, 1426, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1426, 1396, 1396, 1444, 1396, 1396, 1444, 1396, 1396,
     1396, 1426, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1445, 1446, 1445, 1445, 1445, 1396, 1445,
     1445, 1445, 1396, 1396, 1447, 1448, 1396, 1447, 1447, 1396,
     1447, 1447, 1396, 1426, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1426, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1449, 1450, 1396, 1451, 1449, 1396, 1396, 1396, 1449,

     1449, 1396, 1396, 1396, 1396, 1396, 1426, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1426, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1426, 1396, 1396, 1396, 1396, 1396,
     1396, 1452, 1453, 1396, 1452, 1452, 1452, 1452, 1452, 1396,
     1396, 1396, 1396, 1454, 1455, 1396, 1454, 1454, 1454, 1454,
     1396, 1426, 1396, 1396, 1396, 1396, 1396, 1396, 1456, 1457,
     1396, 1456, 1456, 1456, 1456, 1426, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1458, 1459, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1396, 1396, 1396,
     1396, 1396, 1396, 1460, 1461, 1396, 1396, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1462, 1463, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1464, 1465, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1396, 1396, 1396, 1396, 1466, 1396, 1396,
     1467, 1467, 1396, 1396, 1468, 1468, 1396, 1469, 1396, 1470,
     1396, 1396, 1471, 1396, 1396, 1396,  455, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1472, 1396, 1396,
     1396, 1396, 1396, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472,  455,  455, 1396,
     1396, 1396, 1473, 1473, 1474, 1473, 1474, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1396, 1396, 1396, 1475, 1475, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1476, 1477, 1476, 1476, 1396, 1476, 1476, 1476, 1476,
     1476, 1476, 1476, 1476, 1478, 1479, 1478, 1478, 1478, 1478,
     1478, 1478, 1478, 1478, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1480, 1481, 1480, 1482, 1482, 1396, 1483, 1480, 1480,
     1480, 1480, 1396, 1396, 1396, 1396, 1484, 1484, 1485, 1484,
     1485, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1396,

     1396, 1396, 1396, 1396, 1486, 1396, 1487, 1486, 1488, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1396, 1489, 1490, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1489, 1396, 1396, 1396,
     1491, 1492, 1492, 1492, 1493, 1396, 1396, 1494, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1495, 1495, 1495, 1496, 1497, 1498, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,

     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1396,
     1473, 1473, 1474, 1474, 1473, 1473, 1473, 1473, 1473, 1473,
     1499, 1475, 1396, 1396, 1396, 1476, 1476, 1476, 1500, 1478,
     1478, 1478, 1501, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1483, 1480, 1480, 1502, 1396, 1485, 1484, 1484, 1484,
     1503, 1486, 1486, 1486, 1504, 1489, 1489, 1489, 1505, 1396,
     1396, 1396, 1491, 1396, 1491, 1491, 1492, 1492, 1492, 1493,
     1493, 1493, 1506, 1507, 1508, 1509, 1510, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1511,

     1511, 1511, 1512, 1512, 1512, 1513, 1514, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1515, 1396, 1396, 1396, 1396,
     1516, 1396, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
     1517, 1396, 1518, 1518, 1518, 1519, 1519, 1519, 1519, 1519,
     1520, 1520, 1520, 1520, 1521, 1396, 1396, 1396, 1522, 1522,
     1522, 1523, 1522, 1523, 1523, 1524, 1524, 1524, 1525, 1525,

     1525, 1526, 1526, 1526, 1527, 1527, 1527, 1528, 1528, 1528,
     1529, 1529, 1529, 1529, 1530, 1530, 1530, 1531, 1396, 1531,
     1531, 1532, 1532, 1532, 1533, 1533, 1533, 1534, 1535, 1396,
     1534, 1534, 1536, 1537, 1538, 1536, 1536, 1539, 1396, 1540,
     1396, 1541, 1396, 1542, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1543, 1544, 1545,
     1543, 1543, 1546, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1547,
     1396, 1396, 1396, 1396, 1548, 1396, 1396, 1549, 1549, 1549,

     1549, 1549, 1549, 1549, 1549, 1396, 1549, 1396, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
     1549, 1549, 1549, 1549, 1549, 1396, 1550, 1550, 1551, 1552,
     1553, 1551, 1551, 1551, 1551, 1554, 1396, 1396, 1396, 1555,
     1556, 1557, 1555, 1555, 1558, 1559, 1560, 1558, 1558, 1561,
     1562, 1563, 1561, 1561, 1564, 1565, 1566, 1564, 1564, 1564,
     1567, 1568, 1569, 1567, 1567, 1570, 1571, 1572, 1570, 1570,
     1573, 1396, 1574, 1574, 1575, 1576, 1576, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1577, 1578,
     1578, 1579, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1396, 1580, 1580, 1580, 1580, 1580,
     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1580, 1396, 1396,
     1580, 1580, 1396, 1581, 1581, 1551, 1551, 1551, 1551, 1551,
     1554, 1396, 1396, 1396, 1396, 1556, 1557, 1555, 1555, 1559,
     1558, 1558, 1562, 1561, 1561, 1565, 1565, 1564, 1564, 1568,
     1396, 1567, 1567, 1571, 1570, 1570, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1580, 1580,
     1580, 1396, 1580, 1580, 1580, 1396, 1396, 1396, 1580, 1580,
     1580, 1580, 1580, 1396, 1396, 1396, 1396, 1580, 1396, 1580,
     1580, 1396, 1581, 1581, 1551, 1551, 1554, 1396, 1396, 1565,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1580, 1396, 1396, 1396, 1580, 1580, 1396, 1580,
     1580, 1580, 1396, 1396, 1580, 1396, 1396, 1396, 1396, 1580,
     1396, 1581, 1581, 1581, 1554, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,

     1396, 1580, 1580, 1580, 1396, 1580, 1580, 1396, 1580, 1396,
     1580, 1396, 1396, 1396, 1396, 1396, 1396, 1581, 1581, 1396,
     1554, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1580, 1580, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1580, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396,    0, 1396, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396
    } ;

static yyconst flex_int16_t yy_nxt[5440] =
    {   0,
     1396,   89,  380,   90,  366,   89,   93,   90,   93,   91,
       94,   95,   97,   91,   98,   92,  457,  588,  369,   92,
       99,  370,   97,  101,   98,  101,  100,  102, 1396,  104,
       99,  105,  426,  376,  366,  376,  100,  106,  377,  104,
      108,  105,  108,  107,  109,  402,  111,  106,  112,  382,
      910,  374,  383,  107,  113,  375,  388,  114,  476,  389,
      115,  111,  116,  112,  116,  119,  117,  120,  402,  113,
      368,  368,  114,  121,  127,  115,  127,  706,   94,  122,
      119,  123,  120,  123,  707,  124,  386,  127,  121,  127,
      387,   94,  381,  381,  122,   88,   89,   88,   90,   88,

       88,   88,   88,   88,   91,   88,   88,   88,   88,   88,
       92,  125,  125,   88,   88,   88,   88,   88,   88,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,   88,   88,   88,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      126,   88,   88,   88,   89,   88,   90,   88,   88,   88,
       88,   88,   91,   88,   88,   88,   88,   88,   92,  128,
      128,   88,  129,   88,   88,   88,   88,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      128,   88,   88,   88,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,   88,   88,
       88,  131,  440,  132,  440,  131,  138,  132,  138,  133,
      139,  392,  134,  133,  393,  135,  134,  368,  368,  135,
      136,  131,  374,  140,  136, 1286,  375,  374,   89,  133,
      145,  375,  134,  368,  368,  135,   91,  368,  368,  137,
      141,  641,   92,  137,  131,  138,  140,  138,  156,  139,
      157,  392,  133,  374,  393,  134,  158,  375,  135,  142,
      368,  368,  159,  141,  641,  419,  147,   89,  149,   90,

      149,  443,  213,  443,  214,   91,  215,  400,  420, 1287,
      401,   92,  142,   88,   89,   88,   90,   88,   88,   88,
       88,   88,   91,   88,   88,   88,   88,  428,   92,  217,
      429,  218,   88,   88,   88,   88,   88,  219,  427,  427,
      371,  150,  371,  220,  372,  373,  397,  608,  397,  609,
      151,   88,   88,   88,  152,  153,  398,   89,  144,  145,
      144,  224,   89,  225,   90,   91,  146,  368,  368,  226,
       91,   92,  227,  374, 1288,  228,   92,  375,   88,   88,
       88,   88,   89,  127,   90,  127,   88,   94,   88,   88,
       91,   88,   88,   88,   88,  147,   92,   89,  494,  263,

       88,   88,   88,   88,   88,   91,  384,  495,  384,  264,
      385,   92,  390,  506,  390,  264,  372,  264,  507,   88,
       88,   88,   89,  148,  145,  148,  479,   94,  432,  480,
       91,  146,  433,  404,  492,  404,   92,   89,  127,  145,
      127, 1289,   94,  405,  493,   91,   88,   88,   88,  514,
      447,   92,  447,  156,  160,  157,  160,  333,  161,  334,
      147,  158,  390, 1290,  390,  335,  372,  159,  336,  477,
      390,  337,  390,  477,  372,  147,   89,  154,   90,  154,
      266,   94,  267,   89,   91,   90,  500,  514,  268,  501,
       92,   91,  504,  544,  269,  183,  505,   92,  270,  518,

      518,  183,  366,   89,  127,   90,  127,  620,   94,  366,
      345,   91,  346,  437,  307,  183,  308,   92,  347,  731,
      150,  183,  309,  390,  348,  390, 1292,  372,  310,  151,
      411,  412,  411,  152,  153,   88,   89,  162,   90,  162,
       88,   88,   88,  770,   91,  164,   88,  184,   88,   88,
       92,  771,  311,  165,  166,  167,   88,   88,   88,  368,
      368,  217,  221,  218,  221, 1293,  222,  184,  390,  219,
      390,  516,  372,  366,   88,  220,  224,  229,  225,  229,
      352,  230,  353,  519,  226,  517,  520,  227,  354,  369,
      228,  355,  370,  390,  356,  390,  369,  372,  457,  370,

      168,   88,   88,   88,   89,  169,   90,  169,   88,   94,
       88,  374,   91,  164,   88,  375,   88,   88,   92,  368,
      368,  165,  166,  167,   88,   88,   88,  255,  256,  257,
      256,  451,  451,  451, 1294,  258,  259,  456,  456,  456,
      476,  260,   88,  255,  261,  257,  261,  526,  262,  526,
      475,  258,  259,   89,  127,   90,  127,  260,   94, 1295,
      430,   91,  430,  527,  431,  547,  547,   92,  168,   88,
       88,   88,   89,   88,   90,   88,   88,   88,   88,  374,
       91,   88,   88,  375,   88,   88,   92,  558,  558,   88,
       88,   88,   88,   88,   88,   89,  127,  263,  127,  369,

       94,  374,  370,   91,  788,  375,  325,  264,   90,   92,
       88,  368,  368,  264,  326,  264,  266,  271,  267,  271,
      327,  272,  788,  549,  268,  328,  550,  329,  553,  171,
      269,  449,  554,  449,  270,  372,   88,   88,   88,   88,
       89,  127,   90,  127,   88,   94,   88,  643,   91,   88,
       88,  486,   88,   88,   92,  487, 1296,   88,   88,   88,
       88,   88,   88,  274,  559,   90,  488,  560,  514,  489,
      643,  275,  282,  283,  284,  283, 1297,  276,   88,  563,
      285,  286,  287,  564,  288,  419,  289,  317,  318,  319,
      318,  368,  368,  369,  437,  320,  370,  171,  420,  523,

      277,  321,  278,  524,   88,   88,   88,   88,   89,  172,
       90,  172,   88,   88,   88,  374,   91,  174,  174,  375,
       88,   88,   92,  368,  368,   88,   88,   88,   88,   88,
       88,  274,  279,   90,  279,  629,  280,  630,  508,  275,
      509,  569,  510, 1298,  570,  276,   88,  282,  290,  284,
      290,  481,  291,  481,  588,  285,  286,  287,  509,  288,
      509,  289,  510,  368,  368,  482,  482,  483,  277,  536,
      278,  536,  168,   88,   88,   88,   89,  175,   90,  175,
       88,   94,   88,  537,   91,  174,  174,  374,   88,   88,
       92,  375, 1057,   88,   88,   88,   88,   88,   88,  380,

      476,  366,  360,  293,  361,  294,  577,  295,  581,  578,
      362,  296,  582,  434,   88,  434,  363,  297,  368,  368,
      293,  300,  294,  300,  295,  301,  368,  368,  296,  435,
      436,  390,  820,  390,  297,  372,  568,  568,  568,  821,
      168,   88,   88,   88,   89,   88,   90,   88,   88,   88,
       88,   88,   91,   88,   88,   88,   88,  557,   92,  366,
     1299,  177,   88,   88,   88,   88,   88,  298,  299,  545,
      545,  545,   89,  681,   90,  366,  437,  546,  368,  368,
       91,   88,   88,   88,  298,  299,   92,   89,  127,   90,
      127,  481,   94,  481,  521,   91,  521, 1300,  522,  374,

      561,   92,  561,  375,  562,  482,  482,  514,   88,   88,
       88,   89,  127,   90,  127,   88,   94,   88,   88,   91,
       88,   88,   88,   88,  369,   92,  683,  370,  177,   88,
       88,   88,   88,   88,  621,  621,  302,  303,  444,   89,
      444,   90,  372,  583,  584,  583, 1301,   91,   88,   88,
       88,  302,  303,   92,  435,  436,  633,  304,  634,  307,
      312,  308,  312, 1302,  313,  374,  390,  309,  390,  375,
      372,  588,  452,  310,  452,   88,   88,   88,   89,  178,
       90,  178,   88,   88,   88,   88,   91,   88,   88,  436,
      180,  585,   92,  511,  586,  511,  181,  311,   88,  369,

       88,  437,  370,  305,  514,   89,  127,   90,  127,  426,
       94,  366,   89,   91,   90,   88,   88,   88,  374,   92,
       91, 1303,  375,  304,  592,  592,   92,  565,  565,  565,
      314,  545,  545,  545,  880,  437,  512,  374,  566,  546,
      567,  375,  168,   88,   88,   88,   89,  182,   90,  182,
       88,   94,   88,   88,   91,   88,   88,  579,  180,  579,
       92,  580,  667,  530,  181,  530,   88,  372,   88,  305,
      774,  668,  317,  322,  319,  322,  315,  323,  588,  527,
      320,  593,  882,   88,   88,   88,  321,  325,  330,   90,
      330,  590,  331,  366, 1304,  326,  551,  545,  551,  665,

      552,  327,  591,  390,  546,  390,  328,  372,  329,  666,
      168,   88,   88,   88,   89,  185,  186,  187,   88,   88,
       88,  188,   91,  189,   88,  188,  190,  191,  192,  191,
      191,  193,  190,  194,  190,   88,   88,  191,  191,  191,
      191,  191,  195,  191,  196,  191,  197,  191,  191,  198,
      191,  199,   88,   88,  200,  191,  191,  201,  191,  202,
      203,  191,  191,  204,  191,  191,  191,  205,  206,  207,
      191,  208,  209,  210,  211,  191,  191,  191,   88,  212,
      191,  231,  232,  233,   90,  233,  231,  231,  231,  231,
      234,  231,  231,  231,  231,  594,  236,  606,  595,  237,

      231,  231,  231,  231,  231,  588,  698,  699,   89,  127,
       90,  127,  369,   94,  369,  603,   91,  370,  725,  231,
      231,  231,   92,  531,  514,  531,  314,  333,  338,  334,
      338,  606,  339,  374, 1305,  335,  238,  375,  336,  598,
      615,  337,  532,  599,  616, 1306,  231,  231,  231,  232,
      239,   90,  239,  231,  240,  231,  231,  234,  231,  231,
      231,  231,  653,  236,  654,  533,  237,  231,  231,  231,
      231,  231,  315,  390, 1307,  390,  622,  372,  534,  623,
      535,   89,  340,   90,  340,  678,  231,  231,  231,   91,
      679,  544,  341,  610,  610,  342,   89,  343,   90,  343,

      366,   94,  626,  238,   91,  703,  627,  341,  374,  600,
      342,  600,  375,  231,  231,  242,  243,   90,  243,  601,
      704,  386,  606,  244,  245,  387,  390, 1311,  390,  246,
      372,  611,  247,  247,  612,  248,  345,  349,  346,  349,
      376,  350,  376,  685,  347,  377,  352,  357,  353,  357,
      348,  358,  748,  413,  354,  413,  405,  355,  249,  640,
      356,  360,  364,  361,  364,  440,  365,  440,  423,  362,
      423,  250,  372,  251,  454,  363,  454,  606,  372,  247,
      242,  252,   90,  252,  443,  253,  443,  576,  244,  245,
      376,  436,  376,  687,  246,  377,  414,  247,  247,  541,

      248,  541,  440,  372,  440,  415,  565,  565,  565,  416,
      417,  414,  596,  443,  596,  443,  597,  566,  532,  567,
      415,  765,  588,  249,  416,  417,  411,  412,  411,  571,
      565,  571,  447,  372,  447,  432,  250,  437,  251,  433,
      566,  533,  567,  774,  247,  455,  456,  457,  574,  604,
      366,  604,  366,  372,  534,  882,  535,  658,  458,  601,
      659,  459,  366,  613,  606,  613,  390,  614,  390,  624,
      372,  624,  460,  625,  461,  397,  462,  397,  371,  463,
      371, 1316,  372,  373,  464,  398,  413,  465,  413,  466,
      467,  588,  384,  468,  384,  437,  385,  469,  639,  470,

      639,  471,  472,  473,  474,  390,  676,  390,  398,  372,
      677,  640,  366,  366,  404,  647,  404,  648,  423,  649,
      423,  430,  372,  430,  405,  431,  761,  514,  434,  414,
      434,  444,  449,  444,  449,  372,  372,  774,  415,  451,
      451,  451,  416,  417,  435,  436, 1322,  435,  436,  452,
      454,  452,  454,  710,  372,  456,  456,  456,  711, 1029,
      672,  414,  481,  673,  481,  684,  436,  436,  475,  658,
      415,  681,  680,  685,  416,  417,  482,  482,  483,  477,
      931,  686,  682,  477,  481,  713,  481,  688,  690,  688,
      690,  437,  823,  721,  437,  437,  722,  824,  482,  482,

      714,  482,  482,  508,  689,  509,  511,  510,  511,  511,
     1323,  511,  437,  437,  455,  456,  457,  516,  509,  366,
      509,  553,  510,  687,  683,  554,  516,  458,  366,  726,
      459,  517,  514,  737,  727,  738,  727,  723,  563,  514,
      724,  460,  564,  461,  721,  462,  514,  728,  463,  512,
      374,  774,  512,  464,  375,  741,  465,  742,  466,  467,
      476,  521,  468,  521, 1324,  522,  469,  526,  470,  526,
      471,  472,  473,  474,  514,  581,  729,  523,  730,  582,
      481,  524,  481,  527,  530,  531,  530,  531,  372,  536,
      557,  536,  366,  775,  482,  482,  536,  541,  536,  541,

      527,  372,  776,  537,  532,  545,  545,  545,  366,  744,
      537,  588,  745,  546,  593, 1325,  532,  551,  545,  551,
      561,  552,  561,  606,  562,  546,  753,  533,  754,  762,
      565,  565,  565,  568,  568,  568,  568,  568,  568,  533,
      534,  566,  535,  567,  571,  565,  571,  574,  372,  366,
      758,  366,  534,  588,  535,  566,  588,  567,  749,  750,
      749,  366,  579,  590,  579,  366,  580,  588,  751,  583,
      584,  583,  606,  590,  591,  366,  588,  606,  596,  593,
      596,  600,  597,  600,  591,  626, 1328,  757,  588,  627,
      598,  601,  774,  604,  599,  604,  608,  372,  609,  774,

      613,  606,  613,  601,  614,  777,  620,  759,  366,  760,
      790,  366,  366,  778,  624,  615,  624,  792,  625,  616,
      767,  793,  768,  783,  784,  639,  763,  639,  764,  785,
      786,  800,  684,  790,  781,  812,  813,  817,  826,  801,
      685,  804,  514,  782,  833,  839,  833,  839,  889,  688,
      805,  688,  818,  827,  834, 1329,  890,  835,  840,  690,
      726,  690,  727,  514,  727,  516,  689,  366,  514,  606,
      896,  876,  721,  876, 1030,  728,  873,  774,  897,  517,
      516,  874,  366,  874,  514,  727,  877,  727,  877,  882,
      687,  723,  774,  893,  875,  774,  721,  773,  514,  728,

      773,  902,  588,  878,  749,  750,  749,  773,  773,  903,
      606,  879,  749,  750,  749,  590,  915,  366,  774,  883,
      919,  922,  751,  774,  916,  774,  591,  912,  884,  923,
      774,  948,  514,  774,  900,  894,  774,  906,  774,  833,
      908,  833,  989,  901,  895,  835,  907,  939,  909,  948,
      943,  839,  917,  839, 1006, 1006, 1006,  773,  773,  876,
      913,  876,  920, 1030, 1330,  926,  514,  932,  833,  914,
      833,  921,  514,  936,  927,  937, 1008, 1008, 1008,  961,
      962,  516, 1027,  366, 1027,  516,  874,  366,  874,  516,
     1028,  366, 1028,  774,  877,  517,  877,  774,  774,  517,

      723, 1031, 1032,  875,  774, 1033,  893,  514,  893,  882,
      893,  774,  588,  773,  773,  773,  882,  773,  774,  774,
      774,  773,  588,  774,  774,  773,  774,  773,  773,  912,
      774,  773,  774,  912,  773,  773, 1058,  606,  773,  912,
     1034,  912,  919,  606,  606, 1331, 1035, 1055,  774,  919,
      774, 1043, 1044,  774, 1048,  774, 1056,  774,  941,  774,
     1049,  945,  774,  839,  774,  839, 1053, 1072, 1054, 1006,
     1006, 1006, 1332, 1059, 1060, 1008, 1008, 1008,  774, 1145,
     1062,  773,  773, 1333, 1065,  773,  773, 1061,  773,  773,
     1070, 1063, 1064, 1069,  773,  774,  989, 1073, 1074,  835,

      991, 1076, 1077,  996,  912, 1334, 1090, 1091, 1006, 1006,
     1006, 1125, 1125, 1125, 1008, 1008, 1008, 1139, 1139, 1139,
     1140, 1140, 1140,  516, 1027,  366, 1027,  516, 1028,  366,
     1028,  774, 1147,  774, 1147,  774, 1335,  517,  774,  893,
     1146,  517, 1032,  882,  606, 1148,  773,  882,  919,  588,
      882, 1152, 1152, 1152, 1154, 1154, 1154, 1157,  893, 1072,
      893,  774, 1155, 1072, 1071,  773,  774,  773,  774,  774,
      773, 1072, 1167, 1071,  774, 1071,  773,  773,  912, 1149,
      773, 1150,  773, 1071, 1056,  774,  773,  773, 1062,  774,
     1336,  774, 1172, 1337, 1339,  919,  774,  773,  912,  774,

      912,  774, 1158, 1159, 1072, 1161,  774,  774, 1344, 1162,
     1181, 1181, 1181, 1125, 1125, 1125, 1145,  774, 1164, 1139,
     1139, 1139, 1140, 1140, 1140, 1212, 1212, 1212, 1165,  882,
      773,  773, 1169, 1071, 1071, 1168,  773,  773, 1173, 1157,
     1175, 1345, 1176,  919, 1346, 1073, 1071,  773,  773, 1347,
     1076, 1090, 1125, 1125, 1125, 1217, 1217, 1217, 1218, 1218,
     1218, 1224, 1224, 1224, 1226, 1226, 1226, 1227, 1227, 1227,
     1139, 1139, 1139, 1140, 1140, 1140, 1072, 1225, 1235,  774,
     1235, 1147,  774, 1147, 1072, 1233,  774, 1172, 1234, 1348,
     1072,  882, 1349, 1167,  882, 1236,  774, 1236,  882, 1152,

     1152, 1152, 1238, 1238, 1238, 1032, 1071,  893, 1148,  893,
     1239, 1154, 1154, 1154,  773,  774,  773,  774,  774, 1155,
     1072, 1281, 1071, 1281,  774, 1229,  773,  774, 1072,  773,
     1149,  773, 1071,  773,  774,  774,  773, 1167, 1350,  773,
     1240, 1354, 1072,  912,  912, 1181, 1181, 1181, 1249, 1249,
     1249, 1167, 1355, 1158, 1212, 1212, 1212, 1217, 1217, 1217,
     1356, 1161, 1175, 1218, 1218, 1218, 1357, 1358, 1224, 1224,
     1224, 1164, 1226, 1226, 1226, 1227, 1227, 1227, 1281, 1168,
     1281, 1361, 1071, 1071, 1225, 1362,  773,  773, 1363,  773,
      773, 1264, 1264, 1264, 1265, 1265, 1265, 1212, 1212, 1212,

     1266, 1266, 1266, 1217, 1217, 1217, 1218, 1218, 1218, 1273,
     1273, 1273, 1224, 1224, 1224, 1276, 1276, 1276, 1226, 1226,
     1226, 1227, 1227, 1227, 1364, 1274, 1072, 1365, 1225, 1277,
     1277, 1277, 1279, 1279, 1279, 1282, 1366, 1367, 1145, 1283,
     1072, 1283, 1235,  774, 1235, 1236,  774, 1236, 1368, 1233,
     1358, 1369, 1284, 1372, 1373,  882, 1374, 1375,  882, 1238,
     1238, 1238, 1291, 1291, 1291, 1376, 1377, 1239, 1249, 1249,
     1249, 1264, 1264, 1264, 1266, 1266, 1266, 1273, 1273, 1273,
     1277, 1277, 1277, 1279, 1279, 1279, 1264, 1264, 1264, 1265,
     1265, 1265, 1378, 1274, 1266, 1266, 1266, 1308, 1308, 1308,

     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1308,
     1308, 1309, 1308, 1380, 1382, 1308, 1308, 1308, 1308, 1308,
     1308, 1383, 1273, 1273, 1273, 1310, 1310, 1310, 1276, 1276,
     1276, 1277, 1277, 1277, 1384, 1308, 1308, 1308, 1274, 1279,
     1279, 1279, 1317, 1317, 1317, 1318, 1072, 1318, 1283, 1072,
     1283, 1326, 1326, 1326, 1385, 1319, 1072, 1319, 1145, 1386,
     1388, 1145, 1308, 1308, 1309, 1233, 1390, 1391, 1284, 1291,
     1291, 1291, 1379, 1312, 1379, 1313, 1327, 1327, 1327, 1317,
     1317, 1317, 1338, 1338, 1338, 1393, 1379, 1314, 1379, 1315,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,

     1320, 1320, 1320, 1320, 1321, 1320, 1394,  394, 1320, 1320,
     1320, 1320, 1320, 1320, 1340, 1340, 1340, 1341, 1341, 1341,
     1310, 1310, 1310, 1342, 1342, 1342,  394,  787, 1320, 1320,
     1320, 1317, 1317, 1317, 1318, 1072, 1318, 1285, 1280, 1343,
     1319, 1072, 1319, 1351, 1351, 1351, 1278, 1145, 1352, 1352,
     1352, 1275, 1272, 1145, 1271, 1320, 1320, 1321, 1326, 1326,
     1326, 1327, 1327, 1327, 1353, 1353, 1353, 1338, 1338, 1338,
     1340, 1340, 1340, 1341, 1341, 1341, 1342, 1342, 1342, 1338,
     1338, 1338, 1359, 1359, 1359, 1340, 1340, 1340, 1341, 1341,
     1341, 1270, 1343, 1342, 1342, 1342, 1360, 1360, 1360, 1351,

     1351, 1351, 1352, 1352, 1352, 1353, 1353, 1353, 1269, 1343,
     1370, 1370, 1370, 1371, 1371, 1371, 1359, 1359, 1359, 1360,
     1360, 1360, 1370, 1370, 1370, 1370, 1370, 1370, 1371, 1371,
     1371, 1381, 1381, 1381, 1387, 1387, 1387, 1381, 1381, 1381,
     1389, 1389, 1389, 1387, 1387, 1387, 1392, 1392, 1392, 1389,
     1389, 1389, 1392, 1392, 1392, 1395, 1395, 1395, 1395, 1395,
     1395,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  265,  265,  265,  265,  265,

      265,  265,  265,  265,  265,  265,  265,  265,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  281,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      316,  316,  316,  316,  316,  316,  316,  316,  316,  316,
      316,  316,  316,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  359,  359,  359,  359,  359,
      359,  359,  359,  359,  359,  359,  359,  359,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  378, 1268,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  379,  379,  379,  379,  379,  379,
      379,  379,  379,  379,  379,  379,  379,  395,  395,  408,
     1267,  408,  408,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  409,  424, 1263,  424,  424,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  425,  425,
      425,  425,  438,  840,  438, 1262, 1261,  438,  438,  441,
     1260,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  441,  445, 1259,  445, 1258, 1257,  445,  448, 1256,
      448, 1255, 1216,  448,  450, 1254,  450, 1253, 1252, 1251,
      450,  453,  453, 1250,  453,  453, 1248,  453,  478, 1247,
      478, 1246, 1245, 1244,  478,  513, 1243,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      515,  528, 1242,  528, 1241,  774, 1072,  528,  542,  542,
      542,  542,  919,  542,  542,  542,  542,  542,  542,  542,
      542,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  555, 1171,  555,  555,  555,  555,
      555,  555,  555,  555, 1237,  555,  555,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      572, 1232, 1231,  572,  572,  572,  572, 1230,  572,  572,
      572,  572,  572,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  573,  573,  573,  573,  575, 1228, 1223,  575,
      575,  575,  575,  575,  575,  575,  575,  575,  575,  587,

     1222,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  587,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  589,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      607,  618, 1221,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  378, 1220,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,

      379,  379,  379,  395,  395,  408, 1219,  408,  408,  409,
      409,  409,  409,  409,  409,  409,  409,  409,  409,  409,
      409,  409,  424, 1216,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  425,  425,  425,  438, 1215,
      438, 1214, 1213,  438,  438,  441, 1211,  441,  441,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  445,  846,
      445, 1210, 1209,  445,  448, 1208,  448, 1207, 1206,  448,
      450, 1205,  450, 1204, 1203, 1202,  450,  453,  453, 1201,
      453,  453, 1200,  453,  478, 1199,  478, 1198, 1197, 1196,

      478,  513, 1195,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  528, 1194,  528,
     1193, 1192, 1191,  528,  542,  542,  542,  542, 1190,  542,
      542,  542,  542,  542,  542,  542,  542,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      555, 1189,  555,  555,  555,  555,  555,  555,  555,  555,
     1188,  555,  555,  556,  556,  556,  556,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  572, 1187,  774,  572,
      572,  572,  572, 1072,  572,  572,  572,  572,  572,  573,

      573,  573,  573,  573,  573,  573,  573,  573,  573,  573,
      573,  573,  575, 1186, 1185,  575,  575,  575,  575,  575,
      575,  575,  575,  575,  575,  752, 1184,  752,  752,  752,
      752,  752,  752,  752,  752,  752,  752,  752,  587, 1183,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  589,  589,  589,  589,  589,  589,  589,  589,  589,
      589,  589,  589,  589,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  607,  607,  607,
      607,  607,  607,  607,  607,  607,  607,  607,  607,  607,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  618, 1182,  618,  618,  618,  618,  618,
      618,  618,  618,  618,  618,  618,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  619,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  378, 1180,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780,  780,  780,  780,  424, 1179,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  806, 1178,  806, 1177,  774,  806,

      445, 1072,  445,  774, 1072,  445,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  911,  911,
      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925,  938,  938,  938,

      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      940,  940,  940,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  787,
      787,  424, 1067,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  806, 1072,  806,
      774, 1171,  806,  806,  445,  919,  445, 1051, 1046,  445,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      990,  990,  990,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  995,  995,  995,  478, 1041,  478, 1153,
     1151, 1143,  478,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  513, 1142,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  513,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  528, 1141,  528, 1138, 1137, 1136,  528,  542,
      542,  542,  542, 1135,  542,  542,  542,  542,  542,  542,
      542,  542,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  555, 1134,  555,  555,  555,

      555,  555,  555,  555,  555, 1133,  555,  555,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899,  572, 1132, 1131,  572,  572,  572,  572, 1130,  572,
      572,  572,  572,  572,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  587, 1129,  587,
      587,  587,  587,  587,  587,  587,  587,  587,  587,  587,
      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  911,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  618,

     1128,  618,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  925,  925,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071,  780,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075,  378, 1127,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,

      938,  938,  938,  940,  940,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  940,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  803,  803,  803,  803, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,  424, 1126,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  445, 1124,  445, 1123, 1122,  445,  990,  990,  990,
      990,  990,  990,  990,  990,  990,  990,  990,  990,  990,

      995,  995,  995,  995,  995,  995,  995,  995,  995,  995,
      995,  995,  995,  478,  846,  478, 1121, 1120, 1119,  478,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  881,  881,  881,  881,  881,  881,  881,
      881,  881,  881,  881,  881,  881, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,  513,
     1118,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  528,  996,  528, 1117, 1116,  991,  528,  892,
      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
      892,  892, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156,

     1156, 1156, 1156, 1156, 1156,  542,  542,  542,  542, 1115,
      542,  542,  542,  542,  542,  542,  542,  542,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  899,  899,
      899, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160,  555, 1114,  555,  555,  555,  555,
      555,  555,  555,  555, 1113,  555,  555,  905,  905,  905,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163,
     1163, 1163, 1163,  572, 1112, 1111,  572,  572,  572,  572,
     1110,  572,  572,  572,  572,  572,  911,  911,  911,  911,

      911,  911,  911,  911,  911,  911,  911,  911,  911, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166,  587, 1109,  587,  587,  587,  587,  587,  587,
      587,  587,  587,  587,  587,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  918,  918,  918, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170,  605,  605,  605,  605,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  925,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  925,  925, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,

      618, 1108,  618,  618,  618,  618,  618,  618,  618,  618,
      618,  618,  618, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075,  780,  780,  780,  780,  780,  780,  780,  780,
      780,  780,  780,  780,  780, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,  803,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  803,
      803,  445, 1107,  445, 1106, 1105,  445,  478, 1104,  478,

     1103, 1102, 1101,  478, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1100, 1099, 1098,
     1097, 1096, 1095, 1094, 1093, 1092,  959, 1072,  774, 1088,
     1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078,
      945,  943,  941,  939,  934, 1072,  774,  929, 1072,  774,
      774, 1068, 1067, 1066,  919, 1052, 1051, 1050, 1047, 1046,
     1045, 1042, 1041, 1040, 1039, 1038, 1037, 1036, 1026, 1025,
     1024, 1023, 1022, 1021, 1020, 1019, 1018, 1017, 1016, 1015,
     1014, 1013, 1012, 1011, 1010, 1009, 1007, 1005, 1004, 1003,
     1002, 1001, 1000,  999,  998,  997,  996,  994,  993,  992,

      991,  988,  987,  986,  985,  984,  983,  982,  981,  980,
      979,  978,  977,  976,  975,  974,  973,  972,  971,  970,
      969,  968,  967,  966,  965,  964,  963,  439,  774,  960,
      959,  958,  957,  956,  955,  954,  953,  952,  951,  950,
      949,  947,  946,  396,  945,  943,  941,  939,  774,  935,
      934,  933,  774,  930,  929,  928,  924,  606,  588,  904,
      747,  746,  898,  891,  888,  887,  886,  885,  514,  872,
      871,  870,  869,  868,  867,  866,  865,  864,  863,  862,
      861,  860,  859,  858,  857,  856,  855,  854,  853,  852,
      851,  850,  849,  848,  847,  846,  845,  844,  843,  842,

      841,  838,  837,  836,  832,  831,  830,  829,  828,  825,
      822,  819,  816,  815,  814,  811,  810,  809,  808,  807,
      802,  799,  798,  797,  796,  795,  794,  791,  789,  779,
      772,  769,  766,  606,  606,  367,  606,  606,  602,  588,
      588,  588,  588,  756,  756,  755,  576,  747,  746,  743,
      740,  739,  736,  548,  735,  734,  733,  540,  539,  538,
      732,  514,  514,  720,  719,  718,  717,  716,  715,  712,
      709,  708,  705,  702,  701,  700,  697,  696,  695,  694,
      693,  692,  691,  666,  675,  674,  671,  670,  669,  664,
      663,  662,  661,  660,  657,  442,  442,  656,  439,  655,

      652,  651,  650,  646,  645,  422,  421,  418,  410,  644,
      642,  638,  396,  637,  636,  635,  632,  631,  628,  367,
      617,  367,  606,  602,  588,  367,  367,  367,  576,  367,
      367,  548,  540,  539,  538,  367,  529,  367,  525,  367,
      514,  503,  502,  499,  498,  497,  496,  491,  490,  485,
      484,  446,  442,  439,  422,  421,  418,  410,  407,  406,
      403,  399,  367,  396,  367,  391,  367,  367,  367, 1396,
       87, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396
    } ;

static yyconst flex_int16_t yy_chk[5440] =
    {   0,
        0,    1,   97,    1,   97,    2,    2,    2,    2,    1,
        2,    2,    3,    2,    3,    1,  187,  760,   92,    2,
        3,   92,    4,    4,    4,    4,    3,    4,    0,    5,
        4,    5,  156,   95,  156,   95,    4,    5,   95,    6,
        6,    6,    6,    5,    6,  136,    7,    6,    7,  100,
      760,   94,  100,    6,    7,   94,  107,    7,  187,  107,
        7,    8,    8,    8,    8,    9,    8,    9,  136,    8,
       91,   91,    8,    9,   12,    8,   12,  497,   12,    9,
       10,   10,   10,   10,  497,   10,  102,   14,   10,   14,
      102,   14,   99,   99,   10,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   15,  165,   15,  165,   16,   16,   16,   16,   15,
       16,  115,   15,   16,  115,   15,   16,  106,  106,   16,
       15,   17,  109,   17,   16, 1241,  109,  117,   23,   17,
       23,  117,   17,  113,  113,   17,   23,  121,  121,   15,
       17,  402,   23,   16,   18,   18,   18,   18,   27,   18,
       27,  122,   18,  124,  122,   18,   27,  124,   18,   17,
      133,  133,   27,   18,  402,  151,   23,   25,   25,   25,

       25,  168,   42,  168,   42,   25,   42,  135,  151, 1242,
      135,   25,   18,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,  159,   19,   43,
      159,   43,   19,   19,   19,   19,   19,   43,  158,  158,
       93,   25,   93,   43,   93,   93,  132,  345,  132,  345,
       25,   19,   19,   19,   25,   25,  132,   21,   21,   21,
       21,   45,   53,   45,   53,   21,   21,  226,  226,   45,
       53,   21,   45,  139, 1243,   45,   53,  139,   19,   19,
       19,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   21,   20,   55,  202,   55,

       20,   20,   20,   20,   20,   55,  101,  202,  101,   55,
      101,   55,  108,  211,  108,   55,  108,   55,  211,   20,
       20,   20,   22,   22,   22,   22,  192,   22,  161,  192,
       22,   22,  161,  140,  201,  140,   22,   24,   24,   24,
       24, 1244,   24,  140,  201,   24,   20,   20,   20,  219,
      172,   24,  172,   28,   28,   28,   28,   77,   28,   77,
       22,   28,  116, 1245,  116,   77,  116,   28,   77,  188,
      123,   77,  123,  188,  123,   24,   26,   26,   26,   26,
       57,   26,   57,   39,   26,   39,  207,  524,   57,  207,
       26,   39,  210,  255,   57,   39,  210,   39,   57,  219,

      219,   39,  255,   40,   40,   40,   40,  360,   40,  360,
       81,   40,   81,  172,   69,   40,   69,   40,   81,  524,
       26,   40,   69,  127,   81,  127, 1247,  127,   69,   26,
      147,  147,  147,   26,   26,   29,   29,   29,   29,   29,
       29,   29,   29,  629,   29,   29,   29,   39,   29,   29,
       29,  629,   69,   29,   29,   29,   29,   29,   29,  234,
      234,   44,   44,   44,   44, 1248,   44,   40,  138,   44,
      138,  217,  138,  217,   29,   44,   46,   46,   46,   46,
       83,   46,   83,  220,   46,  217,  220,   46,   83,  228,
       46,   83,  228,  148,   83,  148,  236,  148,  457,  236,

       29,   29,   29,   30,   30,   30,   30,   30,   30,   30,
       30,  230,   30,   30,   30,  230,   30,   30,   30,  244,
      244,   30,   30,   30,   30,   30,   30,   51,   51,   51,
       51,  177,  177,  177, 1250,   51,   51,  186,  186,  186,
      457,   51,   30,   52,   52,   52,   52,  233,   52,  233,
      186,   52,   52,   54,   54,   54,   54,   52,   54, 1253,
      160,   54,  160,  233,  160,  258,  258,   54,   30,   30,
       30,   31,   31,   31,   31,   31,   31,   31,   31,  240,
       31,   31,   31,  240,   31,   31,   31,  268,  268,   31,
       31,   31,   31,   31,   31,   56,   56,   56,   56,  246,

       56,  253,  246,   56,  641,  253,   75,   56,   75,   56,
       31,  275,  275,   56,   75,   56,   58,   58,   58,   58,
       75,   58,  641,  260,   58,   75,  260,   75,  262,   31,
       58,  175,  262,  175,   58,  175,   31,   31,   31,   32,
       32,   32,   32,   32,   32,   32,   32,  406,   32,   32,
       32,  197,   32,   32,   32,  197, 1254,   32,   32,   32,
       32,   32,   32,   59,  269,   59,  197,  269,  222,  197,
      406,   59,   61,   61,   61,   61, 1255,   59,   32,  272,
       61,   61,   61,  272,   61,  415,   61,   73,   73,   73,
       73,  285,  285,  276,  175,   73,  276,   32,  415,  222,

       59,   73,   59,  222,   32,   32,   32,   33,   33,   33,
       33,   33,   33,   33,   33,  280,   33,   33,   33,  280,
       33,   33,   33,  296,  296,   33,   33,   33,   33,   33,
       33,   60,   60,   60,   60,  374,   60,  374,  213,   60,
      213,  289,  213, 1256,  289,   60,   33,   62,   62,   62,
       62,  193,   62,  193,  910,   62,   62,   62,  214,   62,
      214,   62,  214,  309,  309,  193,  193,  193,   60,  248,
       60,  248,   33,   33,   33,   34,   34,   34,   34,   34,
       34,   34,   34,  248,   34,   34,   34,  291,   34,   34,
       34,  291,  910,   34,   34,   34,   34,   34,   34,  379,

      214,  379,   85,   63,   85,   63,  297,   63,  301,  297,
       85,   63,  301,  162,   34,  162,   85,   63,  320,  320,
       64,   64,   64,   64,   64,   64,  326,  326,   64,  162,
      162,  229,  670,  229,   64,  229,  288,  288,  288,  670,
       34,   34,   34,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,  266,   35,  266,
     1258,   35,   35,   35,   35,   35,   35,   63,   63,  256,
      256,  256,   65,  658,   65,  266,  162,  256,  354,  354,
       65,   35,   35,   35,   64,   64,   65,   66,   66,   66,
       66,  237,   66,  237,  221,   66,  221, 1261,  221,  313,

      271,   66,  271,  313,  271,  237,  237,  221,   35,   35,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,  310,   36,  658,  310,   36,   36,
       36,   36,   36,   36,  362,  362,   65,   65,  169,   67,
      169,   67,  169,  311,  311,  311, 1262,   67,   36,   36,
       36,   66,   66,   67,  169,  169,  386,   67,  386,   70,
       70,   70,   70, 1263,   70,  323,  279,   70,  279,  323,
      279,  335,  178,   70,  178,   36,   36,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,  178,
       37,  321,   37,  215,  321,  215,   37,   70,   37,  327,

       37,  169,  327,   67,  730,   68,   68,   68,   68,  425,
       68,  425,   71,   68,   71,   37,   37,   37,  331,   68,
       71, 1267,  331,   68,  335,  335,   71,  283,  283,  283,
       71,  257,  257,  257,  730,  178,  215,  215,  283,  257,
      283,  215,   37,   37,   37,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,  300,   38,  300,
       38,  300,  466,  239,   38,  239,   38,  239,   38,   68,
      881,  466,   74,   74,   74,   74,   71,   74,  336,  239,
       74,  336,  881,   38,   38,   38,   74,   76,   76,   76,
       76,  333,   76,  333, 1268,   76,  261,  261,  261,  465,

      261,   76,  333,  312,  261,  312,   76,  312,   76,  465,
       38,   38,   38,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,  337,   47,  350,  337,   47,

       47,   47,   47,   47,   47,  339,  491,  491,   72,   72,
       72,   72,  342,   72,  356,  342,   72,  356,  518,   47,
       47,   47,   72,  243,  518,  243,   72,   78,   78,   78,
       78,  347,   78,  358, 1269,   78,   47,  358,   78,  339,
      350,   78,  243,  339,  350, 1270,   47,   47,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,  432,   48,  432,  243,   48,   48,   48,   48,
       48,   48,   72,  322, 1271,  322,  363,  322,  243,  363,
      243,   79,   79,   79,   79,  474,   48,   48,   48,   79,
      474,  543,   79,  347,  347,   79,   80,   80,   80,   80,

      543,   80,  365,   48,   80,  495,  365,   80,  372,  340,
       80,  340,  372,   48,   48,   49,   49,   49,   49,  340,
      495,  385,  348,   49,   49,  385,  330, 1275,  330,   49,
      330,  348,   49,   49,  348,   49,   82,   82,   82,   82,
      373,   82,  373,  680,   82,  373,   84,   84,   84,   84,
       82,   84,  576,  149,   84,  149,  405,   84,   49,  405,
       84,   86,   86,   86,   86,  435,   86,  435,  154,   86,
      154,   49,  154,   49,  182,   86,  182,  616,  182,   49,
       50,   50,   50,   50,  437,   50,  437,  576,   50,   50,
      376,  182,  376,  680,   50,  376,  149,   50,   50,  252,

       50,  252,  440,  252,  440,  149,  284,  284,  284,  149,
      149,  154,  338,  443,  338,  443,  338,  284,  252,  284,
      154,  616,  338,   50,  154,  154,  411,  411,  411,  290,
      290,  290,  447,  290,  447,  431,   50,  182,   50,  431,
      290,  252,  290, 1029,   50,  185,  185,  185,  293,  343,
      293,  343,  293,  343,  252, 1029,  252,  458,  185,  343,
      458,  185,  293,  349,  349,  349,  357,  349,  357,  364,
      357,  364,  185,  364,  185,  397,  185,  397,  371,  185,
      371, 1278,  371,  371,  185,  397,  413,  185,  413,  185,
      185,  599,  384,  185,  384,  447,  384,  185,  398,  185,

      398,  185,  185,  185,  185,  390,  473,  390,  398,  390,
      473,  398,  293,  293,  404,  420,  404,  420,  423,  420,
      423,  430,  423,  430,  404,  430,  599,  878,  434,  413,
      434,  444,  449,  444,  449,  444,  449,  775,  413,  451,
      451,  451,  413,  413,  434,  434, 1286,  444,  444,  452,
      454,  452,  454,  500,  454,  456,  456,  456,  500,  878,
      470,  423,  459,  470,  459,  480,  452,  454,  456,  475,
      423,  479,  475,  480,  423,  423,  459,  459,  459,  477,
      775,  480,  479,  477,  481,  502,  481,  482,  483,  482,
      483,  434,  672,  514,  444,  449,  514,  672,  481,  481,

      502,  482,  482,  508,  482,  508,  510,  508,  510,  511,
     1287,  511,  452,  454,  455,  455,  455,  515,  509,  515,
      509,  552,  509,  480,  479,  552,  517,  455,  517,  519,
      455,  515,  519,  553,  520,  553,  520,  517,  562,  523,
      517,  455,  562,  455,  520,  455,  522,  520,  455,  510,
      510,  631,  511,  455,  510,  563,  455,  563,  455,  455,
      509,  521,  455,  521, 1288,  521,  455,  526,  455,  526,
      455,  455,  455,  455,  521,  580,  523,  522,  523,  580,
      527,  522,  527,  526,  530,  531,  530,  531,  530,  532,
      556,  532,  556,  631,  527,  527,  536,  541,  536,  541,

      530,  541,  631,  532,  531,  545,  545,  545,  556,  567,
      536,  588,  567,  545,  588, 1289,  541,  551,  551,  551,
      561,  551,  561,  610,  561,  551,  581,  531,  581,  610,
      565,  565,  565,  566,  566,  566,  568,  568,  568,  541,
      531,  565,  531,  565,  571,  571,  571,  573,  571,  573,
      592,  573,  541,  592,  541,  571,  597,  571,  577,  577,
      577,  573,  579,  589,  579,  589,  579,  598,  577,  583,
      583,  583,  614,  591,  589,  591,  594,  615,  596,  594,
      596,  600,  596,  600,  591,  625, 1293,  591,  596,  625,
      597,  600,  635,  604,  597,  604,  607,  604,  607,  655,

      613,  613,  613,  604,  613,  633,  619,  598,  619,  598,
      643,  573,  573,  633,  624,  614,  624,  645,  624,  614,
      626,  645,  626,  636,  636,  639,  615,  639,  615,  637,
      637,  653,  659,  643,  635,  664,  664,  668,  674,  653,
      659,  655, 1031,  635,  681,  685,  681,  685,  737,  688,
      655,  688,  668,  674,  681, 1294,  737,  681,  685,  690,
      721,  690,  722,  721,  722,  723,  688,  723,  729,  763,
      741,  726,  722,  726, 1031,  722,  723,  731,  741,  723,
      724,  724,  724,  724,  726,  727,  728,  727,  728,  731,
      659,  724,  743,  739,  724,  755,  728,  755,  727,  728,

      739,  753,  759,  729,  749,  749,  749,  755,  743,  753,
      764,  729,  751,  751,  751,  757,  763,  757,  761,  731,
      765,  767,  751,  769,  763,  776,  757,  761,  731,  767,
      781,  790,  879,  782,  743,  739,  804,  755,  805,  833,
      759,  833,  834,  743,  739,  834,  755,  939,  759,  790,
      939,  839,  764,  839,  852,  852,  852,  755,  755,  876,
      761,  876,  765,  879, 1295,  769,  880,  776,  992,  761,
      992,  765,  876,  781,  769,  782,  854,  854,  854,  804,
      805,  873,  873,  873,  873,  874,  874,  874,  874,  875,
      875,  875,  875,  882,  877,  873,  877,  883,  899,  874,

      875,  880,  882,  875,  884,  882,  892,  877,  894,  883,
      895,  900,  908,  892,  899,  894,  884,  895,  901,  905,
      911,  905,  909,  906,  912,  906,  907,  900,  907,  911,
      913,  905,  914,  912,  901,  906,  912,  916,  907,  913,
      883,  914,  921,  915,  917, 1296,  884,  908,  927,  920,
      926,  894,  895,  931,  900,  932,  909,  936,  941,  937,
      901,  941,  961,  997,  962,  997,  906, 1030,  907,  970,
      970,  970, 1297,  913,  914,  972,  972,  972, 1045, 1030,
      916,  905,  905, 1298,  921,  906,  906,  915,  907,  907,
      927,  917,  920,  926, 1045, 1055,  989,  931,  932,  989,

      991,  936,  937,  991, 1055, 1299,  961,  962, 1006, 1006,
     1006, 1007, 1007, 1007, 1008, 1008, 1008, 1022, 1022, 1022,
     1023, 1023, 1023, 1027, 1027, 1027, 1027, 1028, 1028, 1028,
     1028, 1032, 1033, 1033, 1033, 1034, 1301, 1027, 1035, 1040,
     1032, 1028, 1033, 1032, 1063, 1033, 1040, 1034, 1064, 1057,
     1035, 1037, 1037, 1037, 1039, 1039, 1039, 1041, 1043, 1046,
     1044, 1048, 1039, 1056, 1041, 1043, 1049, 1044, 1050, 1058,
     1050, 1051, 1056, 1051, 1053, 1046, 1053, 1048, 1058, 1034,
     1050, 1035, 1049, 1051, 1057, 1054, 1053, 1054, 1063, 1060,
     1302, 1059, 1064, 1303, 1305, 1065, 1069, 1054, 1060, 1070,

     1059, 1074, 1043, 1044, 1144, 1048, 1077, 1091, 1312, 1049,
     1083, 1083, 1083, 1099, 1099, 1099, 1144, 1149, 1053, 1112,
     1112, 1112, 1113, 1113, 1113, 1122, 1122, 1122, 1054, 1149,
     1050, 1050, 1060, 1051, 1051, 1059, 1053, 1053, 1065, 1156,
     1069, 1313, 1070, 1173, 1314, 1074, 1156, 1054, 1054, 1315,
     1077, 1091, 1125, 1125, 1125, 1128, 1128, 1128, 1129, 1129,
     1129, 1135, 1135, 1135, 1136, 1136, 1136, 1137, 1137, 1137,
     1139, 1139, 1139, 1140, 1140, 1140, 1145, 1135, 1146, 1146,
     1146, 1147, 1147, 1147, 1166, 1145, 1150, 1173, 1145, 1316,
     1160, 1146, 1322, 1166, 1147, 1148, 1148, 1148, 1150, 1152,

     1152, 1152, 1153, 1153, 1153, 1148, 1160, 1158, 1148, 1159,
     1153, 1154, 1154, 1154, 1158, 1161, 1159, 1162, 1176, 1154,
     1163, 1232, 1163, 1232, 1164, 1140, 1164, 1165, 1167, 1165,
     1150, 1161, 1163, 1162, 1168, 1169, 1164, 1167, 1323, 1165,
     1167, 1329, 1240, 1168, 1169, 1181, 1181, 1181, 1186, 1186,
     1186, 1240, 1330, 1159, 1190, 1190, 1190, 1195, 1195, 1195,
     1335, 1162, 1176, 1196, 1196, 1196, 1336, 1337, 1201, 1201,
     1201, 1165, 1202, 1202, 1202, 1203, 1203, 1203, 1281, 1169,
     1281, 1344, 1163, 1163, 1201, 1345, 1164, 1164, 1346, 1165,
     1165, 1210, 1210, 1210, 1211, 1211, 1211, 1212, 1212, 1212,

     1213, 1213, 1213, 1217, 1217, 1217, 1218, 1218, 1218, 1222,
     1222, 1222, 1224, 1224, 1224, 1225, 1225, 1225, 1226, 1226,
     1226, 1227, 1227, 1227, 1347, 1222, 1233, 1348, 1224, 1228,
     1228, 1228, 1230, 1230, 1230, 1233, 1349, 1350, 1233, 1234,
     1234, 1234, 1235, 1235, 1235, 1236, 1236, 1236, 1354, 1234,
     1355, 1356, 1234, 1361, 1362, 1235, 1363, 1364, 1236, 1238,
     1238, 1238, 1246, 1246, 1246, 1365, 1366, 1238, 1249, 1249,
     1249, 1251, 1251, 1251, 1252, 1252, 1252, 1257, 1257, 1257,
     1259, 1259, 1259, 1260, 1260, 1260, 1264, 1264, 1264, 1265,
     1265, 1265, 1367, 1257, 1266, 1266, 1266, 1272, 1272, 1272,

     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1372, 1374, 1272, 1272, 1272, 1272, 1272,
     1272, 1375, 1273, 1273, 1273, 1274, 1274, 1274, 1276, 1276,
     1276, 1277, 1277, 1277, 1376, 1272, 1272, 1272, 1273, 1279,
     1279, 1279, 1280, 1280, 1280, 1282, 1282, 1282, 1283, 1283,
     1283, 1290, 1290, 1290, 1377, 1284, 1284, 1284, 1282, 1378,
     1382, 1283, 1272, 1272, 1272, 1284, 1384, 1385, 1284, 1291,
     1291, 1291, 1369, 1277, 1369, 1277, 1292, 1292, 1292, 1300,
     1300, 1300, 1304, 1304, 1304, 1390, 1379, 1277, 1379, 1277,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285, 1285,

     1285, 1285, 1285, 1285, 1285, 1285, 1391, 1429, 1285, 1285,
     1285, 1285, 1285, 1285, 1306, 1306, 1306, 1307, 1307, 1307,
     1310, 1310, 1310, 1311, 1311, 1311, 1460, 1494, 1285, 1285,
     1285, 1317, 1317, 1317, 1318, 1318, 1318, 1237, 1231, 1311,
     1319, 1319, 1319, 1324, 1324, 1324, 1229, 1318, 1325, 1325,
     1325, 1223, 1221, 1319, 1220, 1285, 1285, 1285, 1326, 1326,
     1326, 1327, 1327, 1327, 1328, 1328, 1328, 1331, 1331, 1331,
     1332, 1332, 1332, 1333, 1333, 1333, 1334, 1334, 1334, 1338,
     1338, 1338, 1339, 1339, 1339, 1340, 1340, 1340, 1341, 1341,
     1341, 1219, 1334, 1342, 1342, 1342, 1343, 1343, 1343, 1351,

     1351, 1351, 1352, 1352, 1352, 1353, 1353, 1353, 1216, 1342,
     1357, 1357, 1357, 1358, 1358, 1358, 1359, 1359, 1359, 1360,
     1360, 1360, 1368, 1368, 1368, 1370, 1370, 1370, 1371, 1371,
     1371, 1373, 1373, 1373, 1380, 1380, 1380, 1381, 1381, 1381,
     1383, 1383, 1383, 1387, 1387, 1387, 1388, 1388, 1388, 1389,
     1389, 1389, 1392, 1392, 1392, 1393, 1393, 1393, 1395, 1395,
     1395, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
     1397, 1397, 1397, 1397, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1399, 1399, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399,

     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400,
     1400, 1400, 1400, 1401, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1401, 1401, 1401, 1401, 1402, 1402, 1402, 1402,
     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1403,
     1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,

     1407, 1407, 1407, 1407, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1409, 1409, 1409,
     1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1415, 1415, 1415, 1415, 1415,

     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416,
     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1416, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,
     1420, 1420, 1420, 1421, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1422, 1422, 1422, 1422,
     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1423,

     1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
     1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425,
     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426, 1426,
     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426,
     1426, 1427, 1215, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1427, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1430, 1430, 1431,
     1214, 1431, 1431, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1432, 1432, 1433, 1209, 1433, 1433,

     1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
     1434, 1434, 1435, 1208, 1435, 1207, 1206, 1435, 1435, 1436,
     1205, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436,
     1436, 1436, 1437, 1204, 1437, 1200, 1199, 1437, 1438, 1198,
     1438, 1197, 1194, 1438, 1439, 1193, 1439, 1192, 1191, 1188,
     1439, 1440, 1440, 1187, 1440, 1440, 1185, 1440, 1441, 1184,
     1441, 1183, 1182, 1180, 1441, 1442, 1179, 1442, 1442, 1442,
     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1443, 1443,
     1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,

     1443, 1444, 1178, 1444, 1177, 1175, 1174, 1444, 1445, 1445,
     1445, 1445, 1172, 1445, 1445, 1445, 1445, 1445, 1445, 1445,
     1445, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446,
     1446, 1446, 1446, 1446, 1447, 1170, 1447, 1447, 1447, 1447,
     1447, 1447, 1447, 1447, 1151, 1447, 1447, 1448, 1448, 1448,
     1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
     1449, 1143, 1142, 1449, 1449, 1449, 1449, 1141, 1449, 1449,
     1449, 1449, 1449, 1450, 1450, 1450, 1450, 1450, 1450, 1450,
     1450, 1450, 1450, 1450, 1450, 1450, 1451, 1138, 1134, 1451,
     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1452,

     1133, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
     1452, 1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
     1453, 1453, 1453, 1453, 1453, 1454, 1454, 1454, 1454, 1454,
     1454, 1454, 1454, 1454, 1454, 1454, 1454, 1454, 1455, 1455,
     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455,
     1455, 1456, 1132, 1456, 1456, 1456, 1456, 1456, 1456, 1456,
     1456, 1456, 1456, 1456, 1457, 1457, 1457, 1457, 1457, 1457,
     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1458, 1131, 1458,
     1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
     1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459,

     1459, 1459, 1459, 1461, 1461, 1462, 1130, 1462, 1462, 1463,
     1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
     1463, 1463, 1464, 1127, 1464, 1464, 1464, 1464, 1464, 1464,
     1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465, 1465,
     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1465, 1466, 1126,
     1466, 1124, 1123, 1466, 1466, 1467, 1121, 1467, 1467, 1467,
     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1468, 1120,
     1468, 1119, 1118, 1468, 1469, 1117, 1469, 1116, 1115, 1469,
     1470, 1114, 1470, 1111, 1110, 1109, 1470, 1471, 1471, 1108,
     1471, 1471, 1107, 1471, 1472, 1106, 1472, 1105, 1104, 1103,

     1472, 1473, 1102, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
     1473, 1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474, 1474,
     1474, 1474, 1474, 1474, 1474, 1474, 1474, 1475, 1101, 1475,
     1100, 1098, 1097, 1475, 1476, 1476, 1476, 1476, 1096, 1476,
     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1477, 1477, 1477,
     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
     1478, 1095, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
     1094, 1478, 1478, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
     1479, 1479, 1479, 1479, 1479, 1479, 1480, 1093, 1090, 1480,
     1480, 1480, 1480, 1089, 1480, 1480, 1480, 1480, 1480, 1481,

     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481,
     1481, 1481, 1482, 1088, 1087, 1482, 1482, 1482, 1482, 1482,
     1482, 1482, 1482, 1482, 1482, 1483, 1086, 1483, 1483, 1483,
     1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1484, 1085,
     1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
     1484, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485,
     1485, 1485, 1485, 1485, 1486, 1486, 1486, 1486, 1486, 1486,
     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1487, 1487, 1487,
     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
     1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,

     1488, 1488, 1488, 1489, 1084, 1489, 1489, 1489, 1489, 1489,
     1489, 1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490,
     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1490, 1491,
     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491,
     1491, 1491, 1492, 1082, 1492, 1492, 1492, 1492, 1492, 1492,
     1492, 1492, 1492, 1492, 1492, 1493, 1493, 1493, 1493, 1493,
     1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1495, 1081,
     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495,
     1495, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496,
     1496, 1496, 1496, 1496, 1497, 1080, 1497, 1078, 1076, 1497,

     1498, 1075, 1498, 1073, 1071, 1498, 1499, 1499, 1499, 1499,
     1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1500,
     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500,
     1500, 1500, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501,
     1501, 1501, 1501, 1501, 1501, 1502, 1502, 1502, 1502, 1502,
     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1503, 1503,
     1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
     1503, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
     1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505, 1505, 1505,
     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506,

     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506,
     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
     1507, 1507, 1507, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
     1508, 1508, 1508, 1508, 1508, 1508, 1509, 1509, 1509, 1509,
     1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1509, 1510,
     1510, 1511, 1068, 1511, 1511, 1511, 1511, 1511, 1511, 1511,
     1511, 1511, 1511, 1511, 1512, 1512, 1512, 1512, 1512, 1512,
     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1513, 1067, 1513,
     1066, 1062, 1513, 1513, 1514, 1061, 1514, 1052, 1047, 1514,
     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515, 1515,

     1515, 1515, 1515, 1516, 1516, 1516, 1516, 1516, 1516, 1516,
     1516, 1516, 1516, 1516, 1516, 1516, 1517, 1042, 1517, 1038,
     1036, 1026, 1517, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
     1518, 1518, 1518, 1518, 1518, 1518, 1519, 1025, 1519, 1519,
     1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1519, 1520,
     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520,
     1520, 1520, 1521, 1024, 1521, 1021, 1020, 1019, 1521, 1522,
     1522, 1522, 1522, 1018, 1522, 1522, 1522, 1522, 1522, 1522,
     1522, 1522, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
     1523, 1523, 1523, 1523, 1523, 1524, 1017, 1524, 1524, 1524,

     1524, 1524, 1524, 1524, 1524, 1016, 1524, 1524, 1525, 1525,
     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525,
     1525, 1526, 1015, 1014, 1526, 1526, 1526, 1526, 1013, 1526,
     1526, 1526, 1526, 1526, 1527, 1527, 1527, 1527, 1527, 1527,
     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1528, 1012, 1528,
     1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
     1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
     1529, 1529, 1529, 1530, 1530, 1530, 1530, 1530, 1530, 1530,
     1530, 1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531, 1531,
     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1532,

     1011, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532,
     1532, 1532, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
     1533, 1533, 1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534,
     1534, 1534, 1534, 1534, 1534, 1534, 1534, 1534, 1535, 1535,
     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535,
     1535, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536,
     1536, 1536, 1536, 1536, 1537, 1537, 1537, 1537, 1537, 1537,
     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1538, 1010, 1538,
     1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
     1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539,

     1539, 1539, 1539, 1540, 1540, 1540, 1540, 1540, 1540, 1540,
     1540, 1540, 1540, 1540, 1540, 1540, 1541, 1541, 1541, 1541,
     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1542,
     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
     1542, 1542, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
     1543, 1543, 1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544,
     1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1545, 1009,
     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545, 1545,
     1545, 1546, 1005, 1546, 1004, 1003, 1546, 1547, 1547, 1547,
     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,

     1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
     1548, 1548, 1548, 1549, 1002, 1549, 1001, 1000,  999, 1549,
     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550,
     1550, 1550, 1550, 1551, 1551, 1551, 1551, 1551, 1551, 1551,
     1551, 1551, 1551, 1551, 1551, 1551, 1552, 1552, 1552, 1552,
     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1553,
      998, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
     1553, 1553, 1554,  995, 1554,  994,  993,  990, 1554, 1555,
     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555, 1555,
     1555, 1555, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556,

     1556, 1556, 1556, 1556, 1556, 1557, 1557, 1557, 1557,  988,
     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1558, 1558,
     1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
     1558, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
     1559, 1559, 1559, 1559, 1560,  987, 1560, 1560, 1560, 1560,
     1560, 1560, 1560, 1560,  986, 1560, 1560, 1561, 1561, 1561,
     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561,
     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
     1562, 1562, 1562, 1563,  985,  984, 1563, 1563, 1563, 1563,
      983, 1563, 1563, 1563, 1563, 1563, 1564, 1564, 1564, 1564,

     1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1565,
     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565, 1565,
     1565, 1565, 1566,  982, 1566, 1566, 1566, 1566, 1566, 1566,
     1566, 1566, 1566, 1566, 1566, 1567, 1567, 1567, 1567, 1567,
     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1568, 1568,
     1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
     1568, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
     1569, 1569, 1569, 1569, 1570, 1570, 1570, 1570, 1570, 1570,
     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571,
     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571,

     1572,  981, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
     1572, 1572, 1572, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
     1573, 1573, 1573, 1573, 1573, 1573, 1574, 1574, 1574, 1574,
     1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1574, 1575,
     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575,
     1575, 1575, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576,
     1576, 1576, 1576, 1576, 1576, 1577, 1577, 1577, 1577, 1577,
     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1578, 1578,
     1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
     1578, 1579,  980, 1579,  979,  978, 1579, 1580,  977, 1580,

      976,  975,  974, 1580, 1581, 1581, 1581, 1581, 1581, 1581,
     1581, 1581, 1581, 1581, 1581, 1581, 1581,  973,  971,  969,
      968,  967,  966,  965,  964,  963,  960,  959,  958,  957,
      956,  955,  954,  953,  952,  951,  950,  949,  948,  947,
      944,  942,  940,  938,  935,  934,  933,  930,  929,  928,
      925,  924,  923,  922,  918,  904,  903,  902,  898,  897,
      896,  891,  890,  889,  888,  887,  886,  885,  872,  871,
      870,  869,  868,  867,  866,  865,  864,  863,  862,  861,
      860,  859,  858,  857,  856,  855,  853,  851,  850,  849,
      848,  847,  845,  844,  843,  842,  841,  840,  838,  837,

      836,  832,  831,  830,  829,  828,  827,  826,  825,  824,
      823,  822,  821,  820,  819,  818,  817,  816,  815,  814,
      813,  812,  811,  810,  809,  808,  807,  806,  803,  802,
      801,  800,  799,  798,  797,  796,  795,  794,  793,  792,
      791,  789,  788,  787,  786,  785,  784,  783,  780,  779,
      778,  777,  773,  772,  771,  770,  768,  762,  758,  754,
      745,  744,  742,  738,  735,  734,  733,  732,  725,  720,
      719,  718,  717,  716,  715,  714,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  704,  703,  702,  701,  700,
      699,  698,  697,  696,  695,  694,  693,  692,  691,  687,

      686,  684,  683,  682,  679,  678,  677,  676,  675,  673,
      671,  669,  667,  666,  665,  663,  662,  661,  660,  657,
      654,  651,  650,  649,  648,  647,  646,  644,  642,  634,
      630,  627,  621,  612,  611,  609,  608,  605,  601,  595,
      593,  590,  587,  586,  585,  582,  575,  570,  569,  564,
      558,  554,  547,  546,  540,  539,  538,  535,  534,  533,
      529,  516,  513,  512,  507,  506,  505,  504,  503,  501,
      499,  498,  496,  494,  493,  492,  490,  489,  488,  487,
      486,  485,  484,  476,  472,  471,  469,  468,  467,  464,
      463,  462,  461,  460,  446,  442,  441,  439,  438,  433,

      427,  422,  421,  419,  418,  417,  416,  414,  409,  407,
      403,  396,  395,  389,  388,  387,  381,  375,  368,  366,
      355,  352,  344,  341,  332,  325,  317,  307,  295,  282,
      274,  259,  251,  250,  249,  242,  238,  232,  227,  224,
      216,  209,  208,  206,  205,  204,  203,  200,  198,  196,
      195,  171,  167,  163,  153,  152,  150,  146,  142,  141,
      137,  134,  131,  128,  119,  114,  111,  104,   89,   87,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int cppYY_flex_debug;
int cppYY_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *cppYYtext;
#line 1 "cpp.ll"
/*
  cpp.ll

  Copyright (c) 1996 Roland Wunderling, Malte Zoeckler
  Copyright (c) 1998 Michael Meeks
  Copyright (c) 1999-2001 Dragos Acostachioaie

  This file is part of DOC++.

  DOC++ is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the license, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
#line 26 "cpp.ll"

#include <assert.h>
#include <ctype.h>
#include <iostream>
#include <stdarg.h>
#include <stdio.h>

#include "doc.h"

using namespace std;

static const char*	inputString;
static int		inputPosition;
static int		lastCContext;
static int		protection = PUBL;
static int		curlyBracketCount = 0;
static int		innerCurlyCount = 0;
static int              skipCurlyStart = 0;
static int		roundBracketCount = 0;
static int		skipReturn   = 0;
static int		sharpCount   = 0;
static Entry*		current_root = 0;
static Entry*		global_root  = 0;
static Entry*		current      = 0;
static Entry*		last         = 0; // For handling trailing comments
static int		argumentStartPos;

McDArray<namespace_entry *> namespace_table;

static int		yyLineNr = 0;
static char		yyFileName[264];

extern void addNamespace(Entry* entry);

void msg(const char *__fmt, ...)
{
    char s[1024];

    va_list argptr;
    va_start(argptr, __fmt);
    vsprintf(s, __fmt, argptr);
    va_end(argptr);
    fprintf(stderr, "%s(%d): %s\n", yyFileName, yyLineNr, s);
}

#ifdef DEBUG
void debug(const char *__fmt, ...)
{
    char s[1024];

    if(verb)
	{
	va_list argptr;
	va_start(argptr, __fmt);
	vsprintf(s, __fmt, argptr);
	va_end(argptr);
	printf("%s(%d): %s\n", yyFileName, yyLineNr, s);
	}
}
#endif

static void lineCount()
{
    const char *c;
    for(c = cppYYtext; *c; ++c)
	yyLineNr += (*c == '\n');
}

static void addType(Entry *current)
{
    if(current->type.length() > 0 &&
	current->type[current->type.length() - 1] == '*' && current->name[0] == '*')
	return;
    if(current->type.length())
	current->type += ' ';
    current->type += current->name;
    current->name.clear();
    current->type += current->args;
    current->args.clear();
    current->startLine = yyLineNr;
}

static char nonewline(char c)
{
    return (c == '\n') ? ' ' : c;
}

#undef	YY_INPUT
#define	YY_INPUT(buf, result, max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
    int c = 0;
    while(c < max_size && inputString[inputPosition])
	{
	*buf = inputString[inputPosition++];
	c++;
	buf++;
	}
    return c;
}

static int addParamDoc()
{
    if(current->doc.length() == 0)
	return 0;

    char *start = current->args;
    start += argumentStartPos;
    argumentStartPos = current->args.length();

    char *end = start;
    while(*end != '\0' && *end != '=')
	end++;

    if(start == end)
	return 0;

    do {
	end--;
    } while(end != start && (isspace(*end) || *end == ',' || *end == ')'));

    char *identifier = end;
    while(start != identifier && (isalnum(*identifier) || *identifier == '_'))
	identifier--;

    if(identifier == end)
	return 0;

    current->doc += "\n@param ";
    while(identifier != end)
	current->doc += *++identifier;
    current->doc += ' ';
    return 1;
}











































#line 2378 "cpp.cc"

#define INITIAL 0
#define Cxx_Memo 1
#define SubDoc 2
#define SubDocComment 3
#define SubDocCppComment 4
#define Namespace 5
#define UsingNamespace 6
#define Doc 7
#define VerbDoc 8
#define Define 9
#define DefineEnd 10
#define DefineEnded 11
#define StorageModifier 12
#define File 13
#define ClassName 14
#define IdlUnion 15
#define IdlSwitch 16
#define IdlCase 17
#define Bases 18
#define NextSemi 19
#define FindMembers 20
#define FindMembersSuffix 21
#define GrabSuffixMemo 22
#define FindMembersName 23
#define Function 24
#define Operator 25
#define Throws 26
#define Union 27
#define Friend 28
#define Array 29
#define Round 30
#define Curly 31
#define SkipCurly 32
#define SkipInits 33
#define SkipCPP 34
#define SkipSemiOrCurly 35
#define SkipSemiAndCurly 36
#define Sharp 37
#define Comment 38
#define SkipComment 39
#define SkipCxxComment 40
#define Param_Doc 41
#define Param_CxxDoc 42

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int cppYYlex_destroy (void );

int cppYYget_debug (void );

void cppYYset_debug (int debug_flag  );

YY_EXTRA_TYPE cppYYget_extra (void );

void cppYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *cppYYget_in (void );

void cppYYset_in  (FILE * in_str  );

FILE *cppYYget_out (void );

void cppYYset_out  (FILE * out_str  );

int cppYYget_leng (void );

char *cppYYget_text (void );

int cppYYget_lineno (void );

void cppYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int cppYYwrap (void );
#else
extern int cppYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( cppYYtext, cppYYleng, 1, cppYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( cppYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( cppYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, cppYYin))==0 && ferror(cppYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(cppYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int cppYYlex (void);

#define YY_DECL int cppYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after cppYYtext and cppYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( cppYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(cppYYtext[cppYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 212 "cpp.ll"


#line 2613 "cpp.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! cppYYin )
			cppYYin = stdin;

		if ( ! cppYYout )
			cppYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			cppYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				cppYY_create_buffer(cppYYin,YY_BUF_SIZE );
		}

		cppYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of cppYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1397 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5371 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 214 "cpp.ll"
{
					int i;
					for(i = 0; cppYYtext[i + 1] != 6; i++)
					    yyFileName[i] = cppYYtext[i + 1];
					yyFileName[i] = 0;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 221 "cpp.ll"
{
					}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 224 "cpp.ll"
{ // kill `#if', `#ifdef', `#ifndef', `#elif'
					}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 227 "cpp.ll"
{ // kill `#else', `#endif'
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 230 "cpp.ll"
{ // kill RCS keywords
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 233 "cpp.ll"
{ // Array inits
					skipReturn = NextSemi;
					skipCurlyStart = curlyBracketCount;
					BEGIN(SkipCurly);
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 239 "cpp.ll"
{
					BEGIN(FindMembersSuffix);
					}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 243 "cpp.ll"
{
					current->protection = protection = PUBL;
					lineCount();
					}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 248 "cpp.ll"
{
					current->protection = protection = PROT;
					lineCount();
					}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 253 "cpp.ll"
{
					current->protection = protection = PRIV;
					lineCount();
					}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 258 "cpp.ll"
{
					current->section = NAMESPACE_SEC;
					current->type = "namespace";
					lineCount();
					BEGIN(Namespace);
					}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 265 "cpp.ll"
{
					lineCount();
					BEGIN(UsingNamespace);
					}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 270 "cpp.ll"
{
					current->section = TYPEDEF_SEC;
					current->type = "typedef class";
					current->name.clear();
					lineCount();
					BEGIN(ClassName);
					}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 278 "cpp.ll"
{
					current->section = TYPEDEF_SEC;
					current->type = "typedef struct";
					current->name.clear();
					lineCount();
					BEGIN(ClassName);
					}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 286 "cpp.ll"
{
					current->section = TYPEDEF_SEC;
					current->type = "typedef enum";
					current->name.clear();
					lineCount();
					BEGIN(ClassName);
					}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 294 "cpp.ll"
{
					current->section = TYPEDEF_SEC;
					current->type = "typedef union";
					current->name.clear();
					lineCount();
					BEGIN(ClassName);
					}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 302 "cpp.ll"
{
					current->section = TYPEDEF_SEC;
					current->type = "typedef";
					current->name.clear();
					lineCount();
					BEGIN(ClassName);
					}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 310 "cpp.ll"
{
					current->section = CLASS_SEC;
					addType(current);
					current->type += "class";
					lineCount();
					BEGIN(ClassName);
					}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 318 "cpp.ll"
{
					// IDL mode
					current->section = INTERFACE_SEC;
					addType(current);
					current->type += "interface";
					lineCount();
					BEGIN(ClassName);
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 327 "cpp.ll"
{
					current->section = UNION_SEC;
					addType(current);
					current->type += "struct";
					lineCount();
					BEGIN(ClassName);
					}
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 335 "cpp.ll"
{
                                        // IDL mode
					current->section = UNION_SEC;
					addType(current);
					current->type += "exception";
					lineCount();
					BEGIN(ClassName);
					}
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 344 "cpp.ll"
{
					current->section = UNION_SEC;
					addType(current);
					current->type += "enum";
					lineCount();
					BEGIN(ClassName);
					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 352 "cpp.ll"
{
					current->section = UNION_SEC;
					addType(current);
					current->type += "union";
					lineCount();
					if(language == LANG_IDL)
					    BEGIN(IdlUnion);
                                    	else
  					    BEGIN(ClassName);
					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 363 "cpp.ll"
{
					// IDL mode
					current->section = UNION_SEC;
					addType(current);
					current->type += "case ";
					lineCount();
					BEGIN(IdlCase);
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 372 "cpp.ll"
{
					current->type += cppYYtext;
                			}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 376 "cpp.ll"
{
            				current->type += ": ";
                            		BEGIN(FindMembers);
                			}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 381 "cpp.ll"
{
					// search for file name marker inserted
					// in `readfiles.ll'
					BEGIN(File);
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 387 "cpp.ll"
{
					// found a file name: now use it as the
					// current file name
					strcpy(yyFileName, cppYYtext);
					}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 393 "cpp.ll"
{
					BEGIN(FindMembers);
					}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 397 "cpp.ll"
{
					current->clear();
					BEGIN(FindMembers);
					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 402 "cpp.ll"
{
					BEGIN(Friend);
					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 406 "cpp.ll"
{
                                        current->type += "inline ";
                                	}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 410 "cpp.ll"
{
                                        current->type += "static ";
                                        }
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 414 "cpp.ll"
{
                                	current->type += "volatile ";
                                        }
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 418 "cpp.ll"
{
                                        current->type += "__cdecl ";
                                        }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 422 "cpp.ll"
{
                                        current->type += "ILVCALLBACK ";
                                        }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 426 "cpp.ll"
{
                                        current->type += "virtual ";
					}
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 430 "cpp.ll"
{
// PK: This one I simply need in doc++.
// I have too many projects using this macro as a storage type modifier
                                        current->type += "LIBRARY ";
					}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 436 "cpp.ll"
{
// WINAPI storage type modifier is now used instead of now obsolete __pascal,
// __fortran and __syscall calling conventions
                                        current->type += "WINAPI ";
					}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 442 "cpp.ll"
{
// Microsoft compiler specific: declarator
                                        current->type += "__declspec(";
					BEGIN(StorageModifier);
					}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 448 "cpp.ll"
{
// Microsoft compiler specific: DLL export symbol
                                        current->type += "dllexport) ";
					BEGIN(FindMembers);
					}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 454 "cpp.ll"
{
// Microsoft compiler specific: DLL import symbol
                                        current->type += "dllimport) ";
					BEGIN(FindMembers);
					}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 460 "cpp.ll"
{
// Microsoft compiler specific: thread local storage in multithreading
// environment
                                        current->type += "thread) ";
					BEGIN(FindMembers);
					}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 467 "cpp.ll"
{
// Microsoft compiler specific: naked function without prolog and epilog code
                                        current->type += "naked) ";
					BEGIN(FindMembers);
					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 473 "cpp.ll"
{
// Microsoft compiler specific: prevents compiler to expect return values in
// all return branches (error handlers)
                                        current->type += "noreturn) ";
					BEGIN(FindMembers);
					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 480 "cpp.ll"
{
// Microsoft compiler specific: for pure class interfaces, which are never
// instantiated on their own (saves plenty of space)
                                        current->type += "novtable) ";
					BEGIN(FindMembers);
					}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 487 "cpp.ll"
{
// Microsoft compiler specific: hint for linker to eliminate COMDAT
                                        current->type += "selectany) ";
					BEGIN(FindMembers);
					}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 493 "cpp.ll"
{
// Microsoft compiler specific: eliminates lifetime tracking for unwindable
// objects
                                        current->type += "nothrow) ";
					BEGIN(FindMembers);
					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up cppYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up cppYYtext again */
YY_RULE_SETUP
#line 500 "cpp.ll"
{
					addType(current);
					current->name = cppYYtext;
					BEGIN(Operator);
					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 506 "cpp.ll"
{
					current->name += cppYYtext;
					BEGIN(FindMembersName);
					}
	YY_BREAK
case 51:
*yy_cp = (yy_hold_char); /* undo effects of setting up cppYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up cppYYtext again */
YY_RULE_SETUP
#line 511 "cpp.ll"

	YY_BREAK
// kill obscure bit-width stuff

case 52:
YY_RULE_SETUP
#line 515 "cpp.ll"
{ // Must append to name but if previous
					  // text is current classname discard it.
					if(current->name == current_root->name)
					    current->name.clear();
					else
				            current->name += "::";
					BEGIN(FindMembersName);
					}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
#line 524 "cpp.ll"

	YY_BREAK
// Ignore keywords used by makeheader

case 54:
YY_RULE_SETUP
#line 528 "cpp.ll"
{ // Normal name
					addType(current);
					current->name = cppYYtext;
					if(current_root->section == UNION_SEC &&
					    current_root->type.index("enum") != -1)
					    BEGIN(Union);
					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 536 "cpp.ll"
{
					if(current_root->section == NAMESPACE_SEC)
					    current_root = current_root->parent;
					}
	YY_BREAK
case 56:
/* rule 56 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up cppYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up cppYYtext again */
YY_RULE_SETUP
#line 541 "cpp.ll"
{
 					current->name += cppYYtext;
 					BEGIN(Operator);
 					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 546 "cpp.ll"
{
					current->name += cppYYtext;
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 550 "cpp.ll"
{
					yyless(0);
					BEGIN(FindMembers);
 					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 555 "cpp.ll"
{
					BEGIN(SkipCPP);
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 559 "cpp.ll"

	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 560 "cpp.ll"
{
					yyLineNr++;
					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 564 "cpp.ll"
{
					yyLineNr++;
					BEGIN(FindMembers);
					}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 569 "cpp.ll"
{
					current->type = "#define";
					BEGIN(Define);
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 574 "cpp.ll"
{
					current->name = cppYYtext;
					BEGIN(DefineEnd);
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 579 "cpp.ll"
{
					BEGIN(DefineEnd);
					}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 583 "cpp.ll"
{
					current->args = cppYYtext;
					BEGIN(DefineEnded);
					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 588 "cpp.ll"
{
					yyLineNr++;
					}
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 592 "cpp.ll"
{
					if(!noDefines)
					    {
					    current->section = MACRO_SEC;
#ifdef DEBUG
					    debug("found macro `%s'", current->name.c_str());
#endif
					    current->file = yyFileName;
					    current_root->addSubEntry(current);
					    last = current;
					    current = new Entry;
					    current->protection = protection;
					    }
					else
					    current->clear();
					yyLineNr++;
					BEGIN(FindMembers);
					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 611 "cpp.ll"
{
					current->name += cppYYtext;
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 615 "cpp.ll"
{
					BEGIN(FindMembersSuffix);
#ifdef DEBUG
					debug("found `%s %s'",
					    current->type.c_str(),
					    current->name.c_str());
#endif
					if(current->section != TYPEDEF_SEC)
					    current->section = VARIABLE_SEC;
					current->file = yyFileName;
					current_root->addSubEntry(current);
				    	last = current;
					current = new Entry;
					// So `int a, b' gives `int a, int b'
					if(*cppYYtext == ',')
					    current->type = last->type;
					current->protection = protection;
					if(*cppYYtext == '=')
					    BEGIN(NextSemi);
					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 636 "cpp.ll"
{
					BEGIN(FindMembersSuffix);
#ifdef DEBUG
					debug("found `%s %s'",
					    current->type.c_str(),
					    current->name.c_str());
#endif
					if(current->section != TYPEDEF_SEC)
					    current->section = VARIABLE_SEC;
					current->file = yyFileName;
					current_root->addSubEntry(current);
				    	last = current;
					current = new Entry;
					// So `int a, b' gives `int a, int b'
					if(*cppYYtext == ',')
					    current->type = last->type;
					current->protection = protection;
					if(*cppYYtext == '=')
					    BEGIN(NextSemi);
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 657 "cpp.ll"
{
					current->clear();
					current_root->friends.append(new McString(cppYYtext));
					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 662 "cpp.ll"
{
					lineCount();
					BEGIN(FindMembers);
					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 667 "cpp.ll"
{
					current->args += cppYYtext;
					sharpCount = 1;
					BEGIN(Array);
					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 673 "cpp.ll"
{
					current->args += *cppYYtext;
					if(--sharpCount <= 0)
	                            	    BEGIN(FindMembers);
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 679 "cpp.ll"
{
					current->args += *cppYYtext;
					sharpCount++;
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 684 "cpp.ll"
{
					current->args += *cppYYtext;
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 688 "cpp.ll"
{
					addType(current);
					current->type += cppYYtext;
					sharpCount = 1;
					BEGIN(Sharp);
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 695 "cpp.ll"
{
					current->type += *cppYYtext;
					if(--sharpCount <= 0)
	                            	    BEGIN(FindMembers);
					}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 701 "cpp.ll"
{
					current->type += *cppYYtext;
					sharpCount++;
					}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 706 "cpp.ll"
{
					current->type += *cppYYtext;
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 710 "cpp.ll"
{
					current->program += cppYYtext;
					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 714 "cpp.ll"
{
					current->program += cppYYtext;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 718 "cpp.ll"
{
					current->program += cppYYtext;
					}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 722 "cpp.ll"
{
					current->program += cppYYtext;
					BEGIN(Comment);
					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 727 "cpp.ll"
{
					current->program += cppYYtext;
					++yyLineNr;
					BEGIN(Comment);
					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 733 "cpp.ll"
{
					current->program += cppYYtext;
					++curlyBracketCount;
					++innerCurlyCount;
					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 739 "cpp.ll"
{
					if(curlyBracketCount > 0)
					    --curlyBracketCount;
					if(innerCurlyCount > 0)
					    {
					    // do we have any ``using namespace'' at this level?
					    // if so, remove them
					    for(int i = 0; i < namespace_table.size(); i++)
						if(namespace_table[i]->innerCurlyCount == innerCurlyCount)
						    {
						    delete namespace_table[i]->name;
						    namespace_table.remove(i);
						    }
					    current->program += cppYYtext;
					    --innerCurlyCount;
					    }
					else
					    {
					    current_root->addSubEntry(current);
					    current->file = yyFileName;
					    last = current;
					    current = new Entry;
					    current->protection = protection;
					    BEGIN(NextSemi);
					    }
					}
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 766 "cpp.ll"
{
					current->program += cppYYtext;
					yyLineNr++;
					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 771 "cpp.ll"
{
					current->program += cppYYtext;
					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 775 "cpp.ll"
{
					current->args = cppYYtext;
					argumentStartPos = 0;
					BEGIN(Round);
					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 781 "cpp.ll"
{
					current->args += *cppYYtext;
					++roundBracketCount;
					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 786 "cpp.ll"
{
					current->args += *cppYYtext;
					if(roundBracketCount)
					    --roundBracketCount;
					else
					    BEGIN(Function);
					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 794 "cpp.ll"
{
                                        lineCount();
                                        if(addParamDoc())
                                            BEGIN(Param_Doc);
                                        }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 800 "cpp.ll"
{
                                        lineCount();
                                        if(addParamDoc())
                                            BEGIN(Param_CxxDoc);
                                        }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 806 "cpp.ll"
{
					lineCount();
					current->args += ", ";
					}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 811 "cpp.ll"
{
					lineCount();
					current->args += ' ';
					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 816 "cpp.ll"
{
					current->args += *cppYYtext;
					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 820 "cpp.ll"
{
					current->doc += cppYYtext;
					yyLineNr++;
					}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 825 "cpp.ll"
{
					current->doc += cppYYtext;
					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 829 "cpp.ll"
{
					BEGIN(Round);
					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 833 "cpp.ll"
{
					current->doc += cppYYtext;
					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 837 "cpp.ll"
{
					yyLineNr++;
					BEGIN(Round);
					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 842 "cpp.ll"
{
					current->args += " const ";
					lineCount();
					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 847 "cpp.ll"
{
					current->args += " throw(";
					lineCount();
					BEGIN(Round);
					}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 853 "cpp.ll"
{
					// IDL mode
					current->args += " raises(";
					lineCount();
					BEGIN(Round);
					}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 860 "cpp.ll"
{
					current->type += current->name;
					current->name = current->args;
					current->args = cppYYtext;
					BEGIN(Round);
					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 867 "cpp.ll"
{
#ifdef DEBUG
					debug("found pure virtual method %s %s%s",
					    current->type.c_str(),
					    current->name.c_str(),
					    current->args.c_str());
#endif
					current->pureVirtual = true;
					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 877 "cpp.ll"
{
#ifdef DEBUG
					debug("found method `%s %s%s'",
					    current->type.c_str(),
					    current->name.c_str(),
					    current->args.c_str());
#endif
					current->section = FUNCTION_SEC;
					current->file = yyFileName;
					current_root->addSubEntry(current);
					for(int i = 0; i < current->args.length(); i++)
					    if(i > 0 && current->args[i] == '*' && current->args[i - 1] == ' ')
						{
						current->args.remove(i - 1);
						current->args.insert(i, " ");
						}
					last = current;
					current = new Entry;
					current->protection = protection;
					if(*cppYYtext == '{')
					    {
					    skipReturn = SkipSemiAndCurly;
					    skipCurlyStart = curlyBracketCount;
					    BEGIN(SkipCurly);
					    }
					else
					    if(*cppYYtext == ':')
						BEGIN(SkipInits);
					    else
						BEGIN(FindMembersSuffix);
					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 909 "cpp.ll"
{
					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 912 "cpp.ll"
{
					yyless(0);
                                        BEGIN(FindMembers);
					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 917 "cpp.ll"
{
					if(QuantelExtn)
				    	    {
#ifdef DEBUG
				            debug("appended note to `%s'", last->name.c_str());
#endif
					    last->docify = true;
				            last->memo += " ";
				            BEGIN(GrabSuffixMemo);
					    }
					else
					    {
					    yyless(0);
					    BEGIN(FindMembers);
					    }
					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 934 "cpp.ll"
{
					if(commentExtn)
				 	    {
#ifdef DEBUG
				            debug("appended note to `%s'", last->name.c_str());
#endif
					    last->docify = true;
				            last->memo += " ";
				            BEGIN(GrabSuffixMemo);
					    }
					else
					    {
					    yyless(0);
 					    BEGIN(FindMembers);
					    }
					}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 951 "cpp.ll"
{
					yyless(0);
					BEGIN(FindMembers);
					}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 956 "cpp.ll"
{
					last->memo += nonewline(*cppYYtext);
					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 960 "cpp.ll"
{
					lineCount();
                                        BEGIN(FindMembers);
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 965 "cpp.ll"
{
					BEGIN(FindMembers);
					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 969 "cpp.ll"
{
					skipReturn = FindMembers;
					skipCurlyStart = curlyBracketCount;
					BEGIN(SkipCurly);
					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 975 "cpp.ll"
{
					++curlyBracketCount;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 979 "cpp.ll"
{
					if(curlyBracketCount > skipCurlyStart)
					    --curlyBracketCount;
					else
					    BEGIN(skipReturn);
					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 986 "cpp.ll"
{
					skipReturn = SkipSemiAndCurly;
					skipCurlyStart = curlyBracketCount;
					BEGIN(SkipCurly);
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 992 "cpp.ll"
{
					BEGIN(FindMembers);
					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 996 "cpp.ll"

	YY_BREAK
case 124:
YY_RULE_SETUP
#line 997 "cpp.ll"
{
					yyless(0);
					BEGIN(FindMembers);
					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1002 "cpp.ll"
{ // i.e. a semicolon (or anything else)
					if(*cppYYtext != ';')
					    yyless(0);
					BEGIN(FindMembers);
					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1008 "cpp.ll"
{
					current->section = VARIABLE_SEC;
					current_root->addSubEntry(current);
					current->file = yyFileName;
					last = current;
					current = new Entry;
					current->protection = protection;
					BEGIN(FindMembersSuffix);
					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1018 "cpp.ll"
{
                                        current->args += " switch";
                                        BEGIN(IdlSwitch);
                                        }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1023 "cpp.ll"
{
					current->name += cppYYtext;
                                        }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1027 "cpp.ll"
{
                                        current->args += " ";
                                        current->args += cppYYtext;
                                        current->args += " ";
                                        }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1033 "cpp.ll"
{
                                        current->args += cppYYtext;
                                        }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1037 "cpp.ll"
{
					current->args = cppYYtext;
					argumentStartPos = 0;
					BEGIN(Round);
					}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1043 "cpp.ll"
{
					current->type += ' ';
					current->type += current->name;
					current->name = cppYYtext;
					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1049 "cpp.ll"
{
					// FIXME: dirty hack to allow partially
					// specialized templates
					current->name += cppYYtext;
					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1055 "cpp.ll"
{
					current->args = ":";
					BEGIN(Bases);
					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1060 "cpp.ll"
{
#ifdef DEBUG
					debug("found `%s %s'",
					    current->type.c_str(),
					    current->name.c_str());
#endif
					current->file = yyFileName;
					current->startLine = yyLineNr;
					++curlyBracketCount;
					innerCurlyCount = 0;
					BEGIN(Curly);
					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1073 "cpp.ll"
{
					current->file = yyFileName;
					current->startLine = yyLineNr;
					innerCurlyCount = 0;
					if(current->section == TYPEDEF_SEC ||
					    current->section == UNION_SEC)
					    {
#ifdef DEBUG
					    debug("found `%s %s'",
						current->type.c_str(),
						current->name.c_str());
#endif

					    if(current->section == UNION_SEC)
						// hack for C-style structs
						current->section = VARIABLE_SEC;

					    current_root->addSubEntry(current);
					    current->file = yyFileName;
					    last = current;
					    current = new Entry;
					    current->protection = protection;
					    BEGIN(FindMembersSuffix);
					    }
					else
					    {
#ifdef DEBUG
					    debug("found forward class declaration `%s'",
						current->name.c_str());
#endif
					    current->clear();
					    }
					BEGIN(FindMembers);
					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1108 "cpp.ll"
{
					current->extends.append(
					    new McString(cppYYtext));
					current->args += ' ';
					current->args += cppYYtext;
					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 1115 "cpp.ll"
{
					current->args += ',';
					}
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
#line 1119 "cpp.ll"
{
					current->program += cppYYtext;
					yyLineNr++;
					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1124 "cpp.ll"

	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1125 "cpp.ll"
{
					current->program += cppYYtext;
					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1129 "cpp.ll"
{
					current->program += cppYYtext;
					BEGIN(Curly);
					}
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1134 "cpp.ll"
{
					lineCount();
					current->docify = true;
					if(current->doc.length() > 0 ||
					    current->memo.length() > 0)
					    {
#ifdef DEBUG
					    debug("found commented entry");
#endif
					    current->file = yyFileName;
					    current_root->addSubEntry(current);
					    last = current;
					    current = new Entry;
					    }
					else
					    current->clear();
					BEGIN(Cxx_Memo);
					}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1153 "cpp.ll"
{
					current->doc += cppYYtext;
					}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
#line 1157 "cpp.ll"
{
					yyLineNr++;
					BEGIN(FindMembers);
					}
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 1162 "cpp.ll"

	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 1163 "cpp.ll"
{
					lastCContext = YY_START;
					lineCount();
					BEGIN(SkipComment);
					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1169 "cpp.ll"
{
					lastCContext = YY_START;
					lineCount();
					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 1174 "cpp.ll"
{
					lineCount();
					current->docify = true;
        				if(current->doc.length() > 0 ||
					    current->memo.length() > 0)
					    {
#ifdef DEBUG
					    debug("found commented entry");
#endif
					    current_root->addSubEntry(current);
					    current->file = yyFileName;
					    last = current;
				    	    current = new Entry;
					    }
					else
					    current->clear();
					BEGIN(Doc);
					}
	YY_BREAK
case 150:
/* rule 150 can match eol */
YY_RULE_SETUP
#line 1193 "cpp.ll"
{
					lineCount();
					BEGIN(FindMembers);
					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1198 "cpp.ll"
{
					McString tmp;
					// maybe we have to deal with a
					// hierarchy of namespaces here
					if(current_root->section == NAMESPACE_SEC)
					    tmp = current_root->fullName + "::";
					else
					    addNamespace(current_root);
					tmp += cppYYtext;
					Entry *find = findEntry(current_root->sub, tmp.c_str(), NAMESPACE_SEC);
					if(find)
					    {
					    current_root = find;
                                    	    if(find->doc.length() == 0 &&
                                        	current->doc.length() > 0)
                                        	find->doc = current->doc;
                                            if(find->memo.length() == 0 &&
                                        	current->memo.length() > 0)
                                        	find->memo = current->memo;
                                    	    last = find;
                                    	    // do not doc this namespace twice
                                    	    delete current;
                                    	    current = new Entry;
					    }
					else
					    if(current->doc.length() > 0 || current->memo.length() > 0 || !onlyDocs)
					    // ignore the namespace if it's not
					    // doc++-commented or not in
					    // 'document all' mode
                                    		{
#ifdef DEBUG
						debug("found namespace `%s'", cppYYtext);
#endif
						current->docify = true;
						current->name = cppYYtext;
						current->file = yyFileName;
						current_root->addSubEntry(current);
						current_root = current;
					        last = current;
						current = new Entry;
						}
					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1241 "cpp.ll"
{
					++curlyBracketCount;
					BEGIN(FindMembers);
					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1246 "cpp.ll"
{
					Entry *find = findEntry(current_root->sub, cppYYtext, NAMESPACE_SEC);
					if(find)
					    {
					    // add the namespace to the lookup
					    // table, which will tell us where
					    // to look when a identifier isn't
					    // known
					    namespace_entry *n = new namespace_entry;
					    n->name = new char[strlen(cppYYtext) + 1];
					    strcpy(n->name, cppYYtext);
					    n->innerCurlyCount = innerCurlyCount;
					    namespace_table.append(n);
#ifdef DEBUG
					    debug("Namespace `%s' appended to lookup table",
						cppYYtext);
#endif
					    }
					else
					    msg("Warning: unknown namespace `%s', ignoring `using' keyword\n",
						cppYYtext);
					}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 1269 "cpp.ll"
{
					BEGIN(FindMembers);
					}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 1273 "cpp.ll"
{
					current->doc += cppYYtext;
					if(!HTMLsyntax)
					    BEGIN(VerbDoc);
					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1279 "cpp.ll"
{
					if(HTMLsyntax)
					    {
                                            current->doc += "<PRE>";
                                            BEGIN(VerbDoc);
                                    	    }
					else
                                            current->doc += cppYYtext;
                                        }
	YY_BREAK
case 157:
/* rule 157 can match eol */
YY_RULE_SETUP
#line 1289 "cpp.ll"
{
					current->doc += '\n';
					yyLineNr++;
					}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 1294 "cpp.ll"
{
					current->doc += cppYYtext;
					if(!HTMLsyntax)
					    BEGIN(Doc);
					}
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 1300 "cpp.ll"
{
					if(HTMLsyntax)
					    {
                                            current->doc += "</PRE>";
                                            BEGIN(Doc);
                                    	    }
					else
                                             current->doc += cppYYtext;
                                        }
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 1310 "cpp.ll"
{
					current->doc += '\n';
					yyLineNr++;
					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1315 "cpp.ll"
{
					current->doc += *cppYYtext;
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 1319 "cpp.ll"
{
					current->doc += cppYYtext;
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1323 "cpp.ll"
{
					current->doc += cppYYtext;
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1327 "cpp.ll"
{
					BEGIN(FindMembers);
					}
	YY_BREAK
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 1331 "cpp.ll"
{
					lineCount();
					current->file = yyFileName;
					current->startLine = yyLineNr;
					innerCurlyCount = 0;
					BEGIN(SubDoc);
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1339 "cpp.ll"
{
					current->program += cppYYtext;
					BEGIN(SubDocComment);
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 1344 "cpp.ll"
{
					current->program += cppYYtext;
					BEGIN(SubDocCppComment);
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 1349 "cpp.ll"
{
					current->program += *cppYYtext;
					}
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 1353 "cpp.ll"
{
					current->program += *cppYYtext;
					++yyLineNr;
					}
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 1358 "cpp.ll"
{
					lineCount();
					current->program += cppYYtext;
					++curlyBracketCount;
					++innerCurlyCount;
					}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 1365 "cpp.ll"
{
					lineCount();
					if(curlyBracketCount > 0)
					    --curlyBracketCount;
					if(innerCurlyCount > 0)
					    {
					    current->program += cppYYtext;
					    --innerCurlyCount;
					    }
					else
					    {
#ifdef DEBUG
					    debug("found explicit subentry");
#endif
					    current->docify = true;
					    current_root->addSubEntry(current);
					    last = current;
					    current = new Entry;
					    current->protection = protection;
					    BEGIN(FindMembers);
					    }
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1388 "cpp.ll"
{
					current->program += cppYYtext;
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 1392 "cpp.ll"
{
					current->program += cppYYtext;
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 1396 "cpp.ll"
{
					current->program += cppYYtext;
					}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 1400 "cpp.ll"
{
					current->program += cppYYtext;
					++yyLineNr;
					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 1405 "cpp.ll"
{
					current->program += cppYYtext;
					BEGIN(SubDoc);
					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1410 "cpp.ll"
{
					current->program += cppYYtext;
					}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 1414 "cpp.ll"
{
					current->program += cppYYtext;
					++yyLineNr;
					BEGIN(SubDoc);
					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1420 "cpp.ll"

	YY_BREAK
case 180:
YY_RULE_SETUP
#line 1421 "cpp.ll"
{
					BEGIN(lastCContext);
					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 1425 "cpp.ll"
{
					lastCContext = YY_START;
					BEGIN(SkipCxxComment);
					}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 1430 "cpp.ll"
{
					yyLineNr++;
					BEGIN(lastCContext);
					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1435 "cpp.ll"

	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 1436 "cpp.ll"
{
					yyLineNr++;
					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 1440 "cpp.ll"
{
					lastCContext = YY_START;
					BEGIN(SkipComment);
					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 1444 "cpp.ll"
ECHO;
	YY_BREAK
#line 4587 "cpp.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Cxx_Memo):
case YY_STATE_EOF(SubDoc):
case YY_STATE_EOF(SubDocComment):
case YY_STATE_EOF(SubDocCppComment):
case YY_STATE_EOF(Namespace):
case YY_STATE_EOF(UsingNamespace):
case YY_STATE_EOF(Doc):
case YY_STATE_EOF(VerbDoc):
case YY_STATE_EOF(Define):
case YY_STATE_EOF(DefineEnd):
case YY_STATE_EOF(DefineEnded):
case YY_STATE_EOF(StorageModifier):
case YY_STATE_EOF(File):
case YY_STATE_EOF(ClassName):
case YY_STATE_EOF(IdlUnion):
case YY_STATE_EOF(IdlSwitch):
case YY_STATE_EOF(IdlCase):
case YY_STATE_EOF(Bases):
case YY_STATE_EOF(NextSemi):
case YY_STATE_EOF(FindMembers):
case YY_STATE_EOF(FindMembersSuffix):
case YY_STATE_EOF(GrabSuffixMemo):
case YY_STATE_EOF(FindMembersName):
case YY_STATE_EOF(Function):
case YY_STATE_EOF(Operator):
case YY_STATE_EOF(Throws):
case YY_STATE_EOF(Union):
case YY_STATE_EOF(Friend):
case YY_STATE_EOF(Array):
case YY_STATE_EOF(Round):
case YY_STATE_EOF(Curly):
case YY_STATE_EOF(SkipCurly):
case YY_STATE_EOF(SkipInits):
case YY_STATE_EOF(SkipCPP):
case YY_STATE_EOF(SkipSemiOrCurly):
case YY_STATE_EOF(SkipSemiAndCurly):
case YY_STATE_EOF(Sharp):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipCxxComment):
case YY_STATE_EOF(Param_Doc):
case YY_STATE_EOF(Param_CxxDoc):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed cppYYin at a new source and called
			 * cppYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = cppYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( cppYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * cppYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of cppYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					cppYYrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			cppYYrestart(cppYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) cppYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1397 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1397 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1396);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up cppYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					cppYYrestart(cppYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( cppYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve cppYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void cppYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        cppYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            cppYY_create_buffer(cppYYin,YY_BUF_SIZE );
	}

	cppYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	cppYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void cppYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		cppYYpop_buffer_state();
	 *		cppYYpush_buffer_state(new_buffer);
     */
	cppYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	cppYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (cppYYwrap()) processing, but the only time this flag
	 * is looked at is after cppYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void cppYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	cppYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE cppYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) cppYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cppYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) cppYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in cppYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	cppYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with cppYY_create_buffer()
 * 
 */
    void cppYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		cppYYfree((void *) b->yy_ch_buf  );

	cppYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a cppYYrestart() or at EOF.
 */
    static void cppYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	cppYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then cppYY_init_buffer was _probably_
     * called from cppYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void cppYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		cppYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void cppYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	cppYYensure_buffer_stack();

	/* This block is copied from cppYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from cppYY_switch_to_buffer. */
	cppYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void cppYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	cppYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		cppYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void cppYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)cppYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cppYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)cppYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in cppYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE cppYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) cppYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in cppYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	cppYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to cppYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       cppYY_scan_bytes() instead.
 */
YY_BUFFER_STATE cppYY_scan_string (yyconst char * yystr )
{
    
	return cppYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to cppYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE cppYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) cppYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in cppYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = cppYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in cppYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up cppYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		cppYYtext[cppYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = cppYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		cppYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int cppYYget_lineno  (void)
{
        
    return cppYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *cppYYget_in  (void)
{
        return cppYYin;
}

/** Get the output stream.
 * 
 */
FILE *cppYYget_out  (void)
{
        return cppYYout;
}

/** Get the length of the current token.
 * 
 */
int cppYYget_leng  (void)
{
        return cppYYleng;
}

/** Get the current token.
 * 
 */

char *cppYYget_text  (void)
{
        return cppYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void cppYYset_lineno (int  line_number )
{
    
    cppYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see cppYY_switch_to_buffer
 */
void cppYYset_in (FILE *  in_str )
{
        cppYYin = in_str ;
}

void cppYYset_out (FILE *  out_str )
{
        cppYYout = out_str ;
}

int cppYYget_debug  (void)
{
        return cppYY_flex_debug;
}

void cppYYset_debug (int  bdebug )
{
        cppYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from cppYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    cppYYin = stdin;
    cppYYout = stdout;
#else
    cppYYin = (FILE *) 0;
    cppYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * cppYYlex_init()
     */
    return 0;
}

/* cppYYlex_destroy is for both reentrant and non-reentrant scanners. */
int cppYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		cppYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		cppYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	cppYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * cppYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *cppYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *cppYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void cppYYfree (void * ptr )
{
	free( (char *) ptr );	/* see cppYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1444 "cpp.ll"



void callcppYYlex()
{
    cppYYlex();
    if(current->name.length() || current->program.length() ||
	current->memo.length() || current->doc.length())
	{
	current->docify = true;
	if(current->section == EMPTY_SEC)
	    current->section = VARIABLE_SEC;
	current_root->addSubEntry(current);
	last = current;
	current->file = yyFileName;
	current = new Entry;
	current->protection = protection;
	}
}

void parseCppClasses(Entry *rt)
{
    Entry *cr;

    if(rt == 0)
	return;
    for(cr = rt->sub; cr; cr = cr->next)
	{
#ifdef DEBUG
	if(verb)
	    {
	    printf("Scanning `%s %s%s'", cr->type.c_str(), cr->name.c_str(),
		cr->args.c_str());
	    if(cr->program.length())
		printf("...");
	    printf("\n");
	    }
#endif
	if(cr->program.length() > 0)
	    {
	    cr->program += '\n';
	    inputString = cr->program.c_str();
	    inputPosition = 0;
	    cppYYrestart(cppYYin);
	    BEGIN(FindMembers);
	    current_root = cr;
	    strcpy(yyFileName, cr->file.c_str());
	    yyLineNr = cr->startLine;
	    current->clear();
	    if(cr->section & CLASS_SEC)
		current->protection = protection = PRIV;
	    else
		current->protection = protection = PUBL;
	    callcppYYlex();
	    cr->program.clear();
	    }
        parseCppClasses(cr);
	}
    parseDoc(rt);
}

void buildFullName(Entry *entry)
{
    Entry *tmp;

    for(tmp = entry; tmp; tmp = tmp->next)
	{
	tmp->makeFullName();
	buildFullName(tmp->sub);
	}
}

void removeNotDocified(Entry *entry)
{
    Entry *index = entry, *tmp;

    for(; index; index = tmp)
	{
	if(index->sub)
	    removeNotDocified(index->sub);
	tmp = index->next;
	if((!index->docify || !MAKE_DOC(index)) && index != root)
	    index->parent->removeSub(index);
	}
}

void parseCpp(Entry *rt)
{
    assert(rt);

    current_root = rt;
    global_root = rt;
    protection = PUBL;
    current = new Entry;
    last = current;

    inputString = rt->program.c_str();
    inputPosition = 0;
    cppYYrestart(cppYYin);
    BEGIN(FindMembers);
    callcppYYlex();
    rt->program.clear();
    parseCppClasses(rt);
    removeNotDocified(rt);
    buildFullName(rt);

    delete current;
}

extern "C" {
    int cppYYwrap()
	{
	return 1;
	}
};

