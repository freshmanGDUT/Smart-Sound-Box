
#line 3 "java.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer javaYY_create_buffer
#define yy_delete_buffer javaYY_delete_buffer
#define yy_flex_debug javaYY_flex_debug
#define yy_init_buffer javaYY_init_buffer
#define yy_flush_buffer javaYY_flush_buffer
#define yy_load_buffer_state javaYY_load_buffer_state
#define yy_switch_to_buffer javaYY_switch_to_buffer
#define yyin javaYYin
#define yyleng javaYYleng
#define yylex javaYYlex
#define yylineno javaYYlineno
#define yyout javaYYout
#define yyrestart javaYYrestart
#define yytext javaYYtext
#define yywrap javaYYwrap
#define yyalloc javaYYalloc
#define yyrealloc javaYYrealloc
#define yyfree javaYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE javaYYrestart(javaYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int javaYYleng;

extern FILE *javaYYin, *javaYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up javaYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up javaYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via javaYYrestart()), so that the user can continue scanning by
	 * just pointing javaYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when javaYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int javaYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow javaYYwrap()'s to do buffer switches
 * instead of setting up a fresh javaYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void javaYYrestart (FILE *input_file  );
void javaYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE javaYY_create_buffer (FILE *file,int size  );
void javaYY_delete_buffer (YY_BUFFER_STATE b  );
void javaYY_flush_buffer (YY_BUFFER_STATE b  );
void javaYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void javaYYpop_buffer_state (void );

static void javaYYensure_buffer_stack (void );
static void javaYY_load_buffer_state (void );
static void javaYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER javaYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE javaYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE javaYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE javaYY_scan_bytes (yyconst char *bytes,int len  );

void *javaYYalloc (yy_size_t  );
void *javaYYrealloc (void *,yy_size_t  );
void javaYYfree (void *  );

#define yy_new_buffer javaYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        javaYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            javaYY_create_buffer(javaYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        javaYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            javaYY_create_buffer(javaYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *javaYYin = (FILE *) 0, *javaYYout = (FILE *) 0;

typedef int yy_state_type;

extern int javaYYlineno;

int javaYYlineno = 1;

extern char *javaYYtext;
#define yytext_ptr javaYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up javaYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	javaYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[509] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    9,    9,
       11,   11,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   40,   40,   85,   82,
       82,   83,   82,   83,   80,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   16,   16,   16,   15,   26,   26,
       26,   23,   25,   26,   21,   22,   82,    9,   10,   11,
       11,   12,   17,   18,   82,   42,   82,   27,   42,   42,

       42,   42,   42,   42,   42,   42,   53,   43,   44,   45,
       59,   60,   47,   50,   52,   48,   51,   46,   49,   55,
       55,   55,   55,   54,   55,   55,   82,   57,   82,   58,
       62,   64,   64,   63,   64,   82,   83,   82,   82,   71,
       71,   69,   71,   76,   76,   76,   73,   76,   40,   40,
       41,    0,    1,    0,    0,    0,    0,    0,    0,    0,
       78,   77,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   15,   16,   16,   16,   15,
        0,    0,   20,    0,    0,    9,   11,   17,    0,   19,
       18,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   42,    0,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   43,    0,    0,    0,    0,   61,   62,
        0,    0,    0,    1,    0,   65,    0,    0,    0,    0,
       66,    0,   70,    0,    0,   75,   75,   74,   40,   40,
        1,    0,   72,    0,   81,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   16,   16,   20,   20,    0,   24,
       19,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,    0,   65,    0,   68,   75,   72,
       72,   72,   79,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   16,   16,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,    0,   68,
       68,   68,   67,   72,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   16,   16,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   31,   38,
       42,   42,   42,   42,   42,   42,   42,   42,   42,    0,
       68,    7,    0,    0,    0,    0,    3,    0,    0,    0,
       16,   16,    0,   31,   38,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   31,   38,   42,   37,   42,

       42,   42,   33,   42,   42,   42,    0,    0,    0,    0,
        5,    3,    2,    0,    0,   13,   16,    0,    0,   37,
        0,    0,    0,   33,    0,    0,    0,    0,   42,   37,
       42,   42,   29,   33,   42,   42,   42,   56,    0,    4,
        0,    2,   13,    0,   13,   16,    0,    0,    0,    0,
        0,    0,    0,    0,   42,   28,   42,   42,   42,   35,
        0,    0,    0,   16,    0,    0,    0,    0,    0,   35,
        0,   42,   42,   42,   36,   35,    8,    6,    0,   14,
        0,    0,    0,    0,   36,    0,   32,   30,   42,   36,
       14,   14,    0,    0,    0,   42,    0,    0,    0,   34,

        0,   34,    0,   34,    0,   39,   39,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    5,    1,    6,    1,    1,    5,    7,
        8,    9,    1,   10,    1,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,    1,   14,    1,
       15,    1,    1,    1,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       16,   17,   18,    1,   13,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,   13,   28,   29,   30,   31,
       32,   33,   13,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,    1,   44,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[45] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    2,
        5,    4,    6,    1,    1,    1,    1,    1,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[532] =
    {   0,
        0,    1,    4,    7,   40,    0,   83,  126,  170,    0,
      214,    0,  258,    0,  302,    0,  346,    0,  390,    0,
       89,   92,  433,    0,  476,  487,  497,  538,  581,    0,
       10,   13,   24,   95,   98,  104,  108,  116,  113,  120,
      121,  134,  433,  435,  436,  440,  480,  483,  494,  499,
      502,  516,  533,  535,  536,  543,   16,   19, 1175, 1176,
     1172, 1176,  623,   26, 1176, 1161,   23, 1143, 1140,   55,
      479,   83,  125,  654,    0, 1130, 1139, 1165, 1176, 1165,
      146,  148, 1176,  154, 1176, 1176,  441,    0, 1176, 1154,
     1153, 1176,    0,  455,  695,    0,  156, 1176, 1135, 1136,

     1131, 1142,  418,  434, 1126, 1127, 1176,    0, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1156,  505, 1176, 1176, 1145,  462,  541, 1176, 1130, 1176,
      154, 1146,  571, 1176,  513,  625,  627, 1142, 1144, 1176,
     1150, 1176,    0, 1176, 1149,  637,  639,  519,    0,  141,
     1176, 1148, 1176,    0,  648, 1137, 1139, 1118, 1115,  514,
     1176, 1136, 1140, 1124, 1106,  466, 1121,    0,  548,  628,
     1107, 1118,    0, 1098, 1107, 1133,    0, 1099, 1101, 1130,
      664, 1123,  439, 1127,  666,    0, 1118,    0,  651,  668,
      670,    0,  546, 1100, 1101, 1096, 1107,  599,  506, 1091,

     1092,    0,  460, 1104, 1091, 1085, 1084,  540, 1099, 1099,
     1086, 1097, 1086,    0,  679, 1088, 1079,  484, 1176,  635,
     1103,  675,  691, 1102,  699, 1101,  709,  682, 1097, 1099,
     1176, 1098, 1176,  720,  680,  731,  693, 1176,    0,  723,
        0, 1097,  729, 1101, 1176, 1069, 1080, 1064, 1065, 1071,
     1067, 1070, 1061, 1063, 1072, 1065, 1090,  650, 1088, 1176,
      706, 1079, 1071, 1058, 1052, 1051,  710, 1066, 1066, 1053,
     1064, 1053,  739, 1046, 1061, 1056, 1051, 1039, 1040, 1046,
     1038, 1052, 1041, 1052, 1038,  742, 1060,  744, 1065,  711,
     1064,  745, 1176, 1031, 1031, 1045, 1040, 1035, 1027, 1041,

     1036, 1029, 1026, 1033, 1049, 1019, 1034, 1029, 1024, 1012,
     1013, 1019, 1011, 1025, 1014, 1025,  746, 1008, 1013, 1007,
     1002, 1020, 1015, 1010, 1009, 1009,  999,  997,  993,  746,
     1028,  755, 1176,  756, 1027, 1005,  992, 1006, 1005,  989,
      999,  992,  999,  999,  990, 1013,  983,  988,  982,  977,
      995,  990,  985,  984,  984,  974,  972,  756, 1004, 1003,
      981,  981,  967,  981,  980,  979,  965,  971,  970,  961,
      759,  992,  975,  970,  956,  988,  987,  966,  966,  957,
      951,  962,  960,  980,  979,  957,  957,  943,  957,  956,
      955,  941,  947,  946,  757,  969,  968,  951,  966,  945,

      931,  963,  962,  932,  940,  933,  958,  939,  956,  935,
      954,  953,  952,  919,  930,  949,  920,  923,  930,  945,
      924,  910,  942,  941,  911,  919,  912,  759,  919,  936,
      935,  914,  933,  932,  903,  902,  909,  928,  907,  926,
      906,  924,  923,  894,  921,  887,  893,  900,  917,  896,
      887,  886,  893,  713,  892,  911,  891,  885,  875,  907,
      906,  905,  871,  871,  882,  881,  881,  875,  865,  897,
      530,  896,  895,  834,  867,  855,  850,  849,  809,  784,
      755,  780,  779,  739,  776,   20,  775,  774,  753,  772,
      771,  770,  720,  683,  660,  657,  619,  481,  762,  443,

      133,  136,  766,  119,  102,  768,   98, 1176,  788,  794,
      800,  806,  812,  818,  824,  830,   84,    5,  833,  835,
      840,  842,  844,  849,  855,  861,  867,  873,  879,  885,
      891
    } ;

static yyconst flex_int16_t yy_def[532] =
    {   0,
      509,  509,  509,    3,  508,    5,  510,  510,  508,    9,
      508,   11,  508,   13,  508,   15,  508,   17,  508,   19,
      509,  509,  509,   23,  511,  511,    3,    3,  508,   29,
      512,  512,  509,  509,  513,  513,  514,  514,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,  515,  515,  508,  508,
      516,  508,  508,  508,  508,  508,  508,  508,  508,  508,
       63,  508,  508,  508,  517,  517,  517,  508,  508,  516,
      508,  508,  508,  508,  508,  508,  508,  518,  508,  519,
      519,  508,  520,  521,  508,  522,  508,  508,  522,  522,

      522,  522,  522,  522,  522,  522,  508,  523,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      516,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      524,  525,  526,  508,  525,  508,  508,  508,  508,  508,
      516,  508,  527,  508,  516,  508,  508,  508,  528,  529,
      508,  516,  508,   63,  508,  508,  508,  508,  508,  508,
      508,  508,  530,  508,  508,  508,  508,   71,  508,  508,
      508,  508,   74,  508,  508,  508,  517,  517,  517,  508,
      508,  508,  508,  531,  508,  518,  519,  520,  508,  508,
      521,   95,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  522,  530,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  523,  508,  508,  508,  508,  508,  524,
      525,  525,  526,  525,  526,  525,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  528,  529,
      528,  508,  508,  530,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  517,  517,  508,  508,  531,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  530,  522,  522,  522,  522,  522,  522,  522,
      522,  522,  522,  522,  508,  526,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  517,  517,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  530,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  517,  517,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  530,  522,  522,
      522,  522,  522,  522,  522,  522,  522,  522,  522,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      517,  517,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  530,  508,  508,  522,  522,  522,

      522,  522,  522,  522,  522,  522,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  517,  517,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  530,  522,  508,
      522,  522,  508,  508,  522,  522,  522,  508,  508,  508,
      508,  508,  508,  508,  508,  517,  508,  508,  508,  508,
      508,  508,  508,  530,  522,  508,  522,  522,  522,  522,
      508,  508,  508,  517,  508,  508,  508,  508,  508,  508,
      530,  522,  522,  522,  522,  508,  508,  508,  508,  517,
      508,  508,  508,  508,  508,  530,  508,  508,  522,  508,
      508,  508,  508,  508,  530,  522,  508,  508,  530,  522,

      508,  508,  530,  508,  508,  530,  508,    0,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508
    } ;

static yyconst flex_int16_t yy_nxt[1221] =
    {   0,
      508,   61,   61,   62,   62,   61,   63,   64,   65,   71,
      186,  133,   66,  134,  133,   67,  134,  150,  135,  151,
      150,  135,  151,  245,   68,   61,  136,  137,  155,  155,
       69,  162,  138,   72,  163,  139,   70,  157,  495,   73,
       60,   61,   74,   64,   65,   60,   60,   60,   66,   60,
       60,   67,   75,   60,   60,   60,   60,   60,   75,   75,
       75,   75,   76,   75,   75,   75,   77,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   78,   60,   80,   81,   82,   83,  166,  177,
       61,  167,   62,   61,   84,   62,   61,  136,  137,  141,

      507,   62,  142,  138,  507,  141,  139,   62,  142,  145,
      146,  147,  171,  165,  143,   87,  148,  145,  146,  147,
      143,  504,   87,   87,  148,   85,   86,   80,   81,   82,
       83,  111,  112,   60,  111,  112,   87,   84,  504,   60,
       60,   60,  241,  172,  152,   60,   60,   60,  181,  181,
      181,  181,   60,   60,   60,  505,  218,  182,  166,  182,
       60,  167,  183,  219,  162,  184,   60,  203,   85,   86,
       60,   61,   87,   64,   65,   60,   60,   60,   66,   60,
       60,   67,   88,   89,   60,   60,   60,   60,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   60,   60,   60,   61,   87,   64,   65,   60,
       60,   60,   90,   60,   91,   67,   91,   92,   60,   60,
       60,   60,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   60,   60,   60,   61,
       87,   64,   65,   60,   60,   60,   66,   60,   93,   67,
       93,   60,   60,   60,   60,   60,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,

       60,   60,   60,   61,   87,   64,   65,   60,   60,   60,
       66,   60,   94,   67,   94,   60,   60,   60,   60,   60,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   60,   60,   60,   61,   95,   64,
       65,   60,   60,   60,   66,   60,   96,   97,   96,   98,
       60,   60,   60,   60,   96,   96,   99,   96,   96,  100,
       96,   96,  101,   96,   96,   96,  102,   96,  103,   96,
      104,  105,   96,  106,   96,   96,   96,   96,   60,   60,
       60,   61,   87,   64,   65,   60,  107,   60,   66,   60,

      108,   67,  108,  109,  110,   60,   60,   60,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,   60,   60,   61,   87,   62,   87,   87,  113,
      114,  257,   87,  185,  155,  504,  115,  258,  116,  156,
      117,  208,  157,   60,  209,   60,   60,  189,  189,   60,
       60,   60,   60,  245,  190,   60,   60,   60,   60,  210,
      162,  273,   60,  163,  211,  118,  119,  121,  122,   64,
      123,  168,   87,  124,  125,   87,  218,  126,  121,  122,
       64,  123,  248,  219,  124,  125,   87,  249,  126,  127,

       60,   87,  502,   60,   87,  169,   60,  185,  155,   60,
      128,  170,   60,  156,   60,   60,  157,   60,   87,   60,
       60,  222,   60,   60,  226,   60,   60,  235,   60,   60,
      238,   60,  129,  245,   60,   87,   60,   87,   87,  130,
      127,  269,   60,  215,  155,   87,  270,  166,   60,  156,
      167,  128,  157,   60,  242,   60,   60,  262,   60,   60,
      486,   60,   60,   60,   60,   60,  278,   60,   60,   60,
       60,  279,  224,  129,  152,   60,  216,  171,  165,  225,
      130,   60,   61,   87,   64,   65,   60,   60,   60,   66,
       60,  131,   67,  131,   60,   60,   60,   60,   60,  131,

      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,   60,   60,  154,  155,  227,  228,  228,
      228,  156,  267,  229,  157,  268,  230,  218,  230,  234,
      234,  236,  234,  158,  219,  235,  172,  237,  501,  159,
      155,  155,  257,  189,  189,  160,  173,  155,  258,  157,
      190,  166,  156,  245,  167,  157,  181,  181,  185,  155,
      261,  261,  189,  189,  156,  182,  174,  157,  500,  190,
      175,  215,  155,  222,  228,  228,  226,  156,  235,  499,
      157,  238,  224,  230,  152,  289,  176,  192,  155,  225,

      224,  237,  152,  156,  238,  498,  193,  225,  261,  261,
      286,  227,  228,  291,  216,  194,  245,  229,  195,  334,
      230,  196,  234,  234,  241,  197,  152,  198,  235,  199,
      200,  291,  201,  236,  234,  471,  310,  292,  497,  237,
      293,  311,  245,  224,  317,  152,  331,  291,  331,  245,
      225,  358,  332,  292,  371,  333,  293,  331,  291,  245,
      245,  331,  245,  332,  334,  245,  333,  371,  506,  245,
      506,  245,  492,  492,  490,  496,  488,  487,  490,  395,
      494,  488,  487,  428,  503,  493,  492,  454,   60,   60,
       60,   60,   60,   60,   79,   79,   79,   79,   79,   79,

      120,  120,  120,  120,  120,  120,  132,  132,  132,  132,
      132,  132,  140,  140,  140,  140,  140,  140,  144,  144,
      144,  144,  144,  144,  149,  149,  149,  149,  149,  149,
      152,  152,  152,  152,  152,  152,  187,  187,  187,  188,
      188,  191,  191,  491,  191,  191,  202,  202,  214,  214,
      220,  478,  477,  220,  220,  221,  221,  476,  221,  221,
      221,  223,  223,  223,  223,  223,  223,  233,  233,  490,
      233,  233,  233,  239,  239,  489,  239,  239,  239,  240,
      240,  240,  240,  240,  240,  244,  244,  244,  244,  244,
      244,  259,  259,  259,  259,  259,  259,  488,  487,  476,

      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  456,  472,  470,  469,  468,  467,  456,
      466,  465,  464,  445,  463,  445,  442,  462,  440,  461,
      438,  460,  459,  458,  434,  433,  457,  456,  430,  455,
      453,  452,  451,  434,  433,  450,  449,  430,  448,  447,
      446,  445,  444,  443,  442,  412,  411,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      397,  396,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  397,  396,  418,  417,  416,  415,  414,  413,  412,
      411,  410,  409,  408,  372,  407,  406,  405,  404,  403,

      402,  401,  400,  399,  398,  397,  396,  394,  393,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  382,
      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      331,  370,  369,  368,  367,  366,  365,  364,  363,  362,
      361,  360,  359,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  291,  289,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  316,  315,  314,  313,  312,  309,  308,  307,  306,
      305,  260,  257,  304,  303,  302,  301,  300,  299,  298,

      297,  296,  295,  294,  245,  290,  288,  287,  231,  222,
      222,  222,  285,  217,  284,  283,  282,  281,  280,  277,
      276,  275,  274,  272,  271,  266,  265,  264,  263,  508,
      260,  183,  180,  256,  255,  180,  254,  253,  252,  251,
      250,  247,  246,  245,  243,  165,  164,  242,  161,  153,
      153,  153,  232,  231,  222,  217,  161,  153,  213,  212,
      207,  206,  205,  204,  508,  161,  153,  180,  179,  178,
      165,  164,  161,  153,  508,   59,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508
    } ;

static yyconst flex_int16_t yy_chk[1221] =
    {   0,
        0,    1,    2,    1,    2,    3,    3,    3,    3,    4,
      518,   31,    3,   31,   32,    3,   32,   57,   31,   57,
       58,   32,   58,  486,    3,   33,   33,   33,   64,   64,
        3,   67,   33,    4,   67,   33,    3,   64,  486,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    7,    7,    7,    7,   70,  517,
       21,   70,   21,   22,    7,   22,   34,   34,   34,   35,

      507,   35,   35,   34,  505,   36,   34,   36,   36,   37,
       37,   37,   72,   72,   35,   39,   37,   38,   38,   38,
       36,  504,   40,   41,   38,    7,    7,    8,    8,    8,
        8,   21,   21,   39,   22,   22,   42,    8,  502,   39,
       40,   41,  150,   73,  150,   39,   40,   41,   81,   81,
       82,   82,   40,   41,   42,  501,  131,   81,   73,   82,
       42,   73,   84,  131,   97,   84,   42,   97,    8,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   23,   43,   23,   44,   45,   23,
       23,  183,   46,   87,   87,  500,   23,  183,   23,   87,
       23,  103,   87,   43,  103,   44,   45,   94,   94,   43,
       46,   44,   45,  203,   94,   43,   46,   44,   45,  104,
      126,  203,   46,  126,  104,   23,   23,   25,   25,   25,
       25,   71,   47,   25,   25,   48,  218,   25,   26,   26,
       26,   26,  166,  218,   26,   26,   49,  166,   26,   27,

       47,   50,  498,   48,   51,   71,   47,  122,  122,   48,
       27,   71,   47,  122,   49,   48,  122,   27,   52,   50,
       49,  135,   51,   27,  135,   50,   49,  148,   51,   27,
      148,   50,   27,  471,   51,   53,   52,   54,   55,   27,
       28,  199,   52,  127,  127,   56,  199,  160,   52,  127,
      160,   28,  127,   53,  193,   54,   55,  193,   28,   53,
      471,   54,   55,   56,   28,   53,  208,   54,   55,   56,
       28,  208,  133,   28,  133,   56,  127,  169,  169,  133,
       28,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   63,   63,  136,  136,  137,
      137,   63,  198,  136,   63,  198,  136,  220,  137,  146,
      146,  147,  147,   63,  220,  146,  170,  147,  497,   63,
      155,  155,  258,  189,  189,   63,   74,   74,  258,  155,
      189,  170,   74,  495,  170,   74,  181,  181,  185,  185,
      190,  190,  191,  191,  185,  181,   74,  185,  496,  191,
       74,  215,  215,  222,  228,  228,  222,  215,  235,  495,
      215,  235,  223,  228,  223,  237,   74,   95,   95,  223,

      225,  237,  225,   95,  237,  494,   95,  225,  261,  261,
      225,  227,  227,  290,  215,   95,  454,  227,   95,  290,
      227,   95,  234,  234,  240,   95,  240,   95,  234,   95,
       95,  243,   95,  236,  236,  454,  267,  243,  493,  236,
      243,  267,  273,  286,  273,  286,  288,  292,  330,  317,
      286,  317,  288,  292,  330,  288,  292,  332,  334,  358,
      395,  371,  428,  332,  334,  499,  332,  371,  503,  503,
      506,  506,  492,  491,  490,  489,  488,  487,  485,  358,
      484,  483,  482,  395,  499,  481,  480,  428,  509,  509,
      509,  509,  509,  509,  510,  510,  510,  510,  510,  510,

      511,  511,  511,  511,  511,  511,  512,  512,  512,  512,
      512,  512,  513,  513,  513,  513,  513,  513,  514,  514,
      514,  514,  514,  514,  515,  515,  515,  515,  515,  515,
      516,  516,  516,  516,  516,  516,  519,  519,  519,  520,
      520,  521,  521,  479,  521,  521,  522,  522,  523,  523,
      524,  478,  477,  524,  524,  525,  525,  476,  525,  525,
      525,  526,  526,  526,  526,  526,  526,  527,  527,  475,
      527,  527,  527,  528,  528,  474,  528,  528,  528,  529,
      529,  529,  529,  529,  529,  530,  530,  530,  530,  530,
      530,  531,  531,  531,  531,  531,  531,  473,  472,  470,

      469,  468,  467,  466,  465,  464,  463,  462,  461,  460,
      459,  458,  457,  456,  455,  453,  452,  451,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  431,  430,  429,
      427,  426,  425,  424,  423,  422,  421,  420,  419,  418,
      417,  416,  415,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  405,  404,  403,  402,  401,  400,  399,  398,
      397,  396,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  370,  369,  368,  367,  366,

      365,  364,  363,  362,  361,  360,  359,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      331,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  291,  289,  287,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  272,  271,  270,  269,  268,  266,  265,  264,  263,
      262,  259,  257,  256,  255,  254,  253,  252,  251,  250,

      249,  248,  247,  246,  244,  242,  232,  230,  229,  226,
      224,  221,  217,  216,  213,  212,  211,  210,  209,  207,
      206,  205,  204,  201,  200,  197,  196,  195,  194,  187,
      184,  182,  180,  179,  178,  176,  175,  174,  172,  171,
      167,  165,  164,  163,  162,  159,  158,  157,  156,  152,
      145,  141,  139,  138,  132,  129,  125,  121,  106,  105,
      102,  101,  100,   99,   91,   90,   80,   78,   77,   76,
       69,   68,   66,   61,   59,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int javaYY_flex_debug;
int javaYY_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *javaYYtext;
#line 1 "java.ll"
/*
  java.ll

  Copyright (c) 1996 Roland Wunderling, Malte Zoeckler
  Copyright (c) 1998 Michael Meeks
  Copyright (c) 1998-2001 Dragos Acostachioaie

  This file is part of DOC++.

  DOC++ is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the license, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
#line 26 "java.ll"

#include <assert.h>
#include <ctype.h>
#include <iostream>
#include <stdio.h>

#include "doc.h"

using namespace std;

static const char	*inputString;
static int		inputPosition;
static int		lastContext;
static int		bracketCount  = 0;
static Entry		*current_root = 0;
static Entry		*global_root  = 0;
static Entry		*current      = 0;
// this one trackes whether we're looking for first-level classes (true)
// or members and nested classes (false).
static bool		findClasses  = false;

static int		yyLineNr = 0;
static char		yyFileName[264];

static char		ssEndChar;
static int		ssSave;

// these two variables count brackets in two new flex-start-conditions.
static int		skip_to_semi_count = 0;
static int		skip_to_bracket_count = 0;

extern void msg(const char *__fmt, ...);
#ifdef DEBUG
extern void debug(const char *__fmt, ...);
#endif

static void lineCount()
{
    for(const char *c = javaYYtext; *c; ++c)
	yyLineNr += (*c == '\n');
}

#undef	YY_INPUT
#define	YY_INPUT(buf, result, max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
    int c = 0;

    while(c < max_size && inputString[inputPosition])
	{
	*buf = inputString[inputPosition++];
	c++;
	buf++;
	}
    return c;
}





























#line 1028 "java.cc"

#define INITIAL 0
#define FindClasses 1
#define ClassName 2
#define ClassBody 3
#define Package 4
#define Import 5
#define Extends 6
#define Implements 7
#define FindMembers 8
#define Member 9
#define SkipToBracket 10
#define SkipToSemi 11
#define Args 12
#define Function 13
#define Throws 14
#define Comment 15
#define SkipComment 16
#define SkipString 17
#define JavaDoc 18
#define See 19
#define Author 20
#define Version 21
#define Param 22
#define Return 23
#define Exception 24
#define Precondition 25
#define Postcondition 26
#define Invariant 27
#define File 28

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int javaYYlex_destroy (void );

int javaYYget_debug (void );

void javaYYset_debug (int debug_flag  );

YY_EXTRA_TYPE javaYYget_extra (void );

void javaYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *javaYYget_in (void );

void javaYYset_in  (FILE * in_str  );

FILE *javaYYget_out (void );

void javaYYset_out  (FILE * out_str  );

int javaYYget_leng (void );

char *javaYYget_text (void );

int javaYYget_lineno (void );

void javaYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int javaYYwrap (void );
#else
extern int javaYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( javaYYtext, javaYYleng, 1, javaYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( javaYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( javaYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, javaYYin))==0 && ferror(javaYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(javaYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int javaYYlex (void);

#define YY_DECL int javaYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after javaYYtext and javaYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( javaYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(javaYYtext[javaYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 119 "java.ll"

#line 1248 "java.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! javaYYin )
			javaYYin = stdin;

		if ( ! javaYYout )
			javaYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			javaYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				javaYY_create_buffer(javaYYin,YY_BUF_SIZE );
		}

		javaYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of javaYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 509 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1176 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 120 "java.ll"
{
					int i;
					yyLineNr = 1;
					if(bracketCount != 0 || YY_START != FindClasses)
					    msg("Warning end of duff file: {} %d, %d\n",
						bracketCount, YY_START);
					for(i = 0; javaYYtext[i + 1] != 6; i++)
					    yyFileName[i] = javaYYtext[i + 1];
					yyFileName[i] = 0;
					current_root  = global_root;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 132 "java.ll"
{
					current_root = global_root;
					BEGIN(Package);
					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 137 "java.ll"
{
					BEGIN(Import);
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 141 "java.ll"
{
					current->protection = PRIV;
					if(current->type.length() == 0)
					    current->type += "private ";
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 147 "java.ll"
{
					current->protection = PUBL;
					if(current->type.length() == 0)
					    current->type += "public ";
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 153 "java.ll"
{
					current->protection = PROT;
					if(current->type.length() == 0)
					    current->type += "protected ";
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 159 "java.ll"
{
					current->section = CLASS_SEC;
					current->type += "class";
					findClasses = true;
					BEGIN(ClassName);
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 166 "java.ll"
{
					current->section = INTERFACE_SEC;
					current->type += "interface";
					BEGIN(ClassName);
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 172 "java.ll"
{
					Entry *find = current_root->sub;
					for(; find; find = find->next)
					    if(find->section == PACKAGE_SEC)
						if(find->name == (const char*)javaYYtext)
						    break;
					if(find == 0)
					    {
					    find = new Entry;
					    find->section = PACKAGE_SEC;
					    find->name = javaYYtext;
					    current_root->addSubEntry(find);
					    }
					current_root = find;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 188 "java.ll"
{
					BEGIN(FindClasses);
					if(current->doc.length())
					    {
					    current_root->doc = current->doc;
					    current->doc.clear();
					    }
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 197 "java.ll"
{
					current->import.append(new McString(javaYYtext));
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 201 "java.ll"
{
					BEGIN(FindClasses);
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 205 "java.ll"
{
					BEGIN(Extends);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 209 "java.ll"
{
					BEGIN(Implements);
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 213 "java.ll"
{
					BEGIN(ClassBody);
    					current->file = yyFileName;
					current->startLine = yyLineNr;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 219 "java.ll"
{
					current->name = javaYYtext;
					msg("found class `%s'", javaYYtext);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 224 "java.ll"
{
					current->extends.append(new McString(javaYYtext));
					BEGIN(ClassName);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 229 "java.ll"
{
					current->implements.append(new McString(javaYYtext));
					BEGIN(ClassName);
					}
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 234 "java.ll"
{
					McString *tmp = new McString(javaYYtext);
					lineCount();
                                        tmp->remove(tmp->length() - 1);
                                        while(!isalpha(tmp->last()))
					    tmp->remove(tmp->length() - 1);
					current->implements.append(tmp);
					BEGIN(Implements);
					}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 244 "java.ll"
{
					current->program += javaYYtext;
					lineCount();
					lastContext = YY_START;
					BEGIN(Comment);
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 251 "java.ll"
{
					current->program += javaYYtext;
					++bracketCount;
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 256 "java.ll"
{
					if(bracketCount)
					    {
					    current->program += javaYYtext;
					    --bracketCount;
					    }
					else
					    {
					    if(current->section == CLASS_SEC &&
						!current->extends.size())
						    current->extends.append(new McString("java.lang.Object"));
					    current_root->addSubEntry(current);
					    current = new Entry;
					    if(findClasses)
						BEGIN(FindClasses);
					    else
						BEGIN(FindMembers);
					    }
					}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 276 "java.ll"
{
					current->program += javaYYtext;
					yyLineNr++;
					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 281 "java.ll"
{
					current->program += javaYYtext;
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 285 "java.ll"
{
					ssEndChar = *javaYYtext;
					ssSave = 0;
					lastContext = YY_START;
					BEGIN(SkipString);
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 292 "java.ll"
{
					current->program += javaYYtext;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 296 "java.ll"
{
					current->name.clear();
					current->type.clear();
					current->args.clear();
					current->program.clear();
					current->doc.clear();
					current->section = EMPTY_SEC;
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 305 "java.ll"
{
//
// Here is the major change:
// <FindMembers> now scans until (including)
// the first word that is not a (here allowed keyword)

// Therefore, the following three rules doesn't change start condition anymore.

					current->protection = PRIV;
					if(current->type.length() == 0)
					    current->type += "private ";
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 318 "java.ll"
{
					current->protection = PUBL;
					if(current->type.length() == 0)
					    current->type += "public ";
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 324 "java.ll"
{
					current->protection = PROT;
					if(current->type.length() == 0)
					    current->type += "protected ";
					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 330 "java.ll"
{ 
// I added the following rules for FindMembers

// if we find "class", this is a nested class. We make note of it and
// then go for ClassName

					current->section = CLASS_SEC;
					current->type += "class";
					msg("found class `%s'", current->name.c_str());
					BEGIN(ClassName);
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 342 "java.ll"
{
// same for a nested interface here
					current->section = INTERFACE_SEC;
					current->type += "interface";
					msg("found interface `%s'", current->name.c_str());
					BEGIN(ClassName);
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 350 "java.ll"
{
// we notice all of the allowed keywords here but don't do anything accept
// adding it to type
					current->type += "static ";
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 356 "java.ll"
{
					current->type += "synchronized ";
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 360 "java.ll"
{
					current->type += "volatile ";
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 364 "java.ll"
{
					current->type += "transient ";
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 368 "java.ll"
{
					current->type += "native ";
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 372 "java.ll"
{
					current->type += "final ";
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 376 "java.ll"
{
					// search for file name marker inserted
					// in `readfiles.ll'
					BEGIN(File);
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 382 "java.ll"
{
					// found a file name: now use it as the
					// current file name
					strcpy(yyFileName, javaYYtext);
					}
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 388 "java.ll"
{
					BEGIN(FindMembers);
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 392 "java.ll"
{
// if we find a non-keyword word, make note of it and go to rule <Member>
					if(current->type.length())
					    current->type += ' ';
					current->type += current->name;
					current->name = javaYYtext;
					BEGIN(Member);
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 401 "java.ll"
{
// The rule <Member> I had to make a small adjustment:
// splitting <Member>[;=] into <Member>";" and <Member>"="
// (see below for explaination)

					if(current->type.length())
					    current->type += ' ';
					current->type += current->name;
					current->name = javaYYtext;
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 412 "java.ll"
{
// this is "business as usual"
					current->section = VARIABLE_SEC;
					current_root->addSubEntry(current);
					msg("found field `%s'", current->name.c_str());
					current = new Entry;
					BEGIN(FindMembers);
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 421 "java.ll"
{
// we made this an extra rule because otherwise the initialized had been
// treated as Member (which it obviously isn't). So if we have an "=", we go to
// a new rule <SkipToSemi> where we skip everything including the ending ";"
// then we go to FindMembers 

					current->section = VARIABLE_SEC;
					current_root->addSubEntry(current);
					msg("found field `%s'", current->name.c_str());
					current = new Entry;
					skip_to_semi_count = 0; // we count bracket-levels "{}"
					BEGIN(SkipToSemi);
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 435 "java.ll"
{
// We take care for bracket-levels because there might be definition of an
// anonymous class here that makes use of Semicolons we are not interested in.
					skip_to_semi_count++;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 441 "java.ll"
{
					skip_to_semi_count++;
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 445 "java.ll"
{
					skip_to_semi_count++;
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 449 "java.ll"
{
					skip_to_semi_count--;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 453 "java.ll"
{
					skip_to_semi_count--;
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 457 "java.ll"
{
					skip_to_semi_count--;
					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 461 "java.ll"
{
// So if there is a semicolon at "our" bracket level, we expect members again.
					if(skip_to_semi_count == 0)
					    BEGIN(FindMembers); 
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 467 "java.ll"
{
					current->section = FUNCTION_SEC;
					current->args = javaYYtext;
					msg("found method `%s'", current->name.c_str());
					BEGIN(Args);
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 474 "java.ll"
{
					current->args += *javaYYtext;
					BEGIN(Function);
					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 479 "java.ll"
{
					current->args += *javaYYtext;
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 483 "java.ll"
{
					BEGIN(Throws);
// I changed <Function> in order to skip method(function)-body *totally*. I
// hope this is ok.
// In order to do so, after getting the "{", we skip to the corresponding "}"
// using an extra new rule <SkipToBracket>
					current->args += " throws ";
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 492 "java.ll"
{
					current_root->addSubEntry(current);
					current = new Entry;
					BEGIN(FindMembers);
					}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 498 "java.ll"
{
					current_root->addSubEntry(current);
					current = new Entry;
					skip_to_bracket_count = 1; // we take care of bracket level
					BEGIN(SkipToBracket);
					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 505 "java.ll"
{ 
// this skips the function body.
					skip_to_bracket_count++;
					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 510 "java.ll"
{
					if(--skip_to_bracket_count == 0)
   					    BEGIN(FindMembers);
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 515 "java.ll"
{
					current->args += javaYYtext;
					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 519 "java.ll"
{
					current->args += javaYYtext;
					BEGIN(Function);
					}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 524 "java.ll"
{
					current->program += javaYYtext;
					yyLineNr++;
					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 529 "java.ll"
{
					current->program += javaYYtext;
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 533 "java.ll"
{
					current->program += javaYYtext;
					BEGIN(lastContext);
					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 538 "java.ll"
{
					BEGIN(lastContext);
					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 542 "java.ll"

	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 543 "java.ll"

	YY_BREAK
case 69:
YY_RULE_SETUP
#line 545 "java.ll"
{
					if(*javaYYtext == ssEndChar)
					    BEGIN(lastContext);
					if(ssSave)
					    current->program += *javaYYtext;
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 552 "java.ll"
{
					if(ssSave)
					    current->program += javaYYtext;
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 557 "java.ll"
{
					if(ssSave)
					    current->program += *javaYYtext;
					}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 562 "java.ll"
{
					lastContext = YY_START;
					lineCount();
					current->doc.clear();
					BEGIN(JavaDoc);
					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 569 "java.ll"
{
					current->doc += *javaYYtext;
					yyLineNr++;
					}
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 574 "java.ll"
{
// Before the fix, it was context-sensitive which state to go next - depending
// on current->section. I changed this, since it doesn't make sense.
					BEGIN(lastContext);
					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 580 "java.ll"
{
					current->doc += '\n';
					yyLineNr++;
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 585 "java.ll"
{
					current->doc += *javaYYtext;
					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 589 "java.ll"
{ 
					if(YY_START != SkipComment) // Default rules are hellspawn
					    lastContext = YY_START;
					BEGIN(SkipComment);
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 595 "java.ll"
{
					BEGIN(lastContext);
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 599 "java.ll"

	YY_BREAK
case 80:
YY_RULE_SETUP
#line 601 "java.ll"
{
					ssEndChar = *javaYYtext;
					ssSave = 0;
					lastContext = YY_START;
					BEGIN(SkipString);
					}
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 608 "java.ll"

	YY_BREAK
case 82:
YY_RULE_SETUP
#line 609 "java.ll"

	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 610 "java.ll"
{
					yyLineNr++;
					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 613 "java.ll"
ECHO;
	YY_BREAK
#line 2097 "java.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FindClasses):
case YY_STATE_EOF(ClassName):
case YY_STATE_EOF(ClassBody):
case YY_STATE_EOF(Package):
case YY_STATE_EOF(Import):
case YY_STATE_EOF(Extends):
case YY_STATE_EOF(Implements):
case YY_STATE_EOF(FindMembers):
case YY_STATE_EOF(Member):
case YY_STATE_EOF(SkipToBracket):
case YY_STATE_EOF(SkipToSemi):
case YY_STATE_EOF(Args):
case YY_STATE_EOF(Function):
case YY_STATE_EOF(Throws):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(JavaDoc):
case YY_STATE_EOF(See):
case YY_STATE_EOF(Author):
case YY_STATE_EOF(Version):
case YY_STATE_EOF(Param):
case YY_STATE_EOF(Return):
case YY_STATE_EOF(Exception):
case YY_STATE_EOF(Precondition):
case YY_STATE_EOF(Postcondition):
case YY_STATE_EOF(Invariant):
case YY_STATE_EOF(File):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed javaYYin at a new source and called
			 * javaYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = javaYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( javaYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * javaYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of javaYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					javaYYrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			javaYYrestart(javaYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) javaYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 509 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 509 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 508);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up javaYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					javaYYrestart(javaYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( javaYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve javaYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void javaYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        javaYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            javaYY_create_buffer(javaYYin,YY_BUF_SIZE );
	}

	javaYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	javaYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void javaYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		javaYYpop_buffer_state();
	 *		javaYYpush_buffer_state(new_buffer);
     */
	javaYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	javaYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (javaYYwrap()) processing, but the only time this flag
	 * is looked at is after javaYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void javaYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	javaYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE javaYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) javaYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in javaYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) javaYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in javaYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	javaYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with javaYY_create_buffer()
 * 
 */
    void javaYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		javaYYfree((void *) b->yy_ch_buf  );

	javaYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a javaYYrestart() or at EOF.
 */
    static void javaYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	javaYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then javaYY_init_buffer was _probably_
     * called from javaYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void javaYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		javaYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void javaYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	javaYYensure_buffer_stack();

	/* This block is copied from javaYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from javaYY_switch_to_buffer. */
	javaYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void javaYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	javaYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		javaYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void javaYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)javaYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in javaYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)javaYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in javaYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE javaYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) javaYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in javaYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	javaYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to javaYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       javaYY_scan_bytes() instead.
 */
YY_BUFFER_STATE javaYY_scan_string (yyconst char * yystr )
{
    
	return javaYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to javaYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE javaYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) javaYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in javaYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = javaYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in javaYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up javaYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		javaYYtext[javaYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = javaYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		javaYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int javaYYget_lineno  (void)
{
        
    return javaYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *javaYYget_in  (void)
{
        return javaYYin;
}

/** Get the output stream.
 * 
 */
FILE *javaYYget_out  (void)
{
        return javaYYout;
}

/** Get the length of the current token.
 * 
 */
int javaYYget_leng  (void)
{
        return javaYYleng;
}

/** Get the current token.
 * 
 */

char *javaYYget_text  (void)
{
        return javaYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void javaYYset_lineno (int  line_number )
{
    
    javaYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see javaYY_switch_to_buffer
 */
void javaYYset_in (FILE *  in_str )
{
        javaYYin = in_str ;
}

void javaYYset_out (FILE *  out_str )
{
        javaYYout = out_str ;
}

int javaYYget_debug  (void)
{
        return javaYY_flex_debug;
}

void javaYYset_debug (int  bdebug )
{
        javaYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from javaYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    javaYYin = stdin;
    javaYYout = stdout;
#else
    javaYYin = (FILE *) 0;
    javaYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * javaYYlex_init()
     */
    return 0;
}

/* javaYYlex_destroy is for both reentrant and non-reentrant scanners. */
int javaYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		javaYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		javaYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	javaYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * javaYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *javaYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *javaYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void javaYYfree (void * ptr )
{
	free( (char *) ptr );	/* see javaYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 613 "java.ll"



void parseJavaClasses(Entry *rt)
{
    if(rt == 0)
	return;
    for(Entry *cr = rt->sub; cr; cr = cr->next)
	{
	if(cr->program.length())
	    {
	    inputString = cr->program.c_str();
	    inputPosition = 0;
	    javaYYrestart(javaYYin);

	    // We're looking for members and nested classes.
	    findClasses = false;
	    BEGIN(FindMembers);

	    current_root = cr;
	    strcpy(yyFileName, cr->file.c_str());
	    yyLineNr = cr->startLine;
	    javaYYlex();
	    cr->program.clear();
	    }
	parseJavaClasses(cr);
	}
    parseDoc(rt);
}

void parseJava(Entry *rt)
{
    assert(rt);

    current_root = rt;
    global_root = rt;
    current = new Entry;

    inputString = rt->program.c_str();
    inputPosition = 0;
    javaYYrestart(javaYYin);

    // We're looking for first-level Classes.
    BEGIN(FindClasses);
    findClasses = true;

    javaYYlex();
    rt->program.clear();

    parseJavaClasses(rt);

    delete current;
}

extern "C" {
  int javaYYwrap()
    {
    return 1;
    }
};


