
#line 3 "doc2tex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer doc2texYY_create_buffer
#define yy_delete_buffer doc2texYY_delete_buffer
#define yy_flex_debug doc2texYY_flex_debug
#define yy_init_buffer doc2texYY_init_buffer
#define yy_flush_buffer doc2texYY_flush_buffer
#define yy_load_buffer_state doc2texYY_load_buffer_state
#define yy_switch_to_buffer doc2texYY_switch_to_buffer
#define yyin doc2texYYin
#define yyleng doc2texYYleng
#define yylex doc2texYYlex
#define yylineno doc2texYYlineno
#define yyout doc2texYYout
#define yyrestart doc2texYYrestart
#define yytext doc2texYYtext
#define yywrap doc2texYYwrap
#define yyalloc doc2texYYalloc
#define yyrealloc doc2texYYrealloc
#define yyfree doc2texYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE doc2texYYrestart(doc2texYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int doc2texYYleng;

extern FILE *doc2texYYin, *doc2texYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up doc2texYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up doc2texYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via doc2texYYrestart()), so that the user can continue scanning by
	 * just pointing doc2texYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when doc2texYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int doc2texYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow doc2texYYwrap()'s to do buffer switches
 * instead of setting up a fresh doc2texYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void doc2texYYrestart (FILE *input_file  );
void doc2texYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE doc2texYY_create_buffer (FILE *file,int size  );
void doc2texYY_delete_buffer (YY_BUFFER_STATE b  );
void doc2texYY_flush_buffer (YY_BUFFER_STATE b  );
void doc2texYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void doc2texYYpop_buffer_state (void );

static void doc2texYYensure_buffer_stack (void );
static void doc2texYY_load_buffer_state (void );
static void doc2texYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER doc2texYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE doc2texYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE doc2texYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE doc2texYY_scan_bytes (yyconst char *bytes,int len  );

void *doc2texYYalloc (yy_size_t  );
void *doc2texYYrealloc (void *,yy_size_t  );
void doc2texYYfree (void *  );

#define yy_new_buffer doc2texYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        doc2texYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            doc2texYY_create_buffer(doc2texYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        doc2texYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            doc2texYY_create_buffer(doc2texYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *doc2texYYin = (FILE *) 0, *doc2texYYout = (FILE *) 0;

typedef int yy_state_type;

extern int doc2texYYlineno;

int doc2texYYlineno = 1;

extern char *doc2texYYtext;
#define yytext_ptr doc2texYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up doc2texYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	doc2texYYleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 147
#define YY_END_OF_BUFFER 148
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[362] =
    {   0,
       12,   12,   15,   15,   18,   18,   31,   31,   32,   32,
      148,   56,  147,   56,  147,   57,  147,    3,   56,  147,
       41,   56,  147,   42,   56,  147,   44,   56,  147,   38,
       56,  147,   39,   56,  147,   56,  147,   40,   56,  147,
       56,  147,   43,   56,  147,   37,  147,   37,  147,   33,
       37,  147,   28,   37,  147,   35,   37,  147,   36,   37,
      147,   34,   37,  147,   29,   37,  147,   12,   37,  147,
       12,   37,  147,   12,   33,   37,  147,   12,   35,   37,
      147,   12,   36,   37,  147,   13,   33,   37,  147,   12,
       34,   37,  147,   10,  147,   10,  147,   10,  147,    8,

       10,  147,    9,   10,  147,   15,  147,   15,  147,  147,
       18,  147,   18,  147,  147,   18,   19,  147,  147,  147,
       26,  147,  147,  147,  147,  147,  147,  147,  147,  104,
      147,  104,  147,  102,  104,  147,  105,  147,  104,  147,
      104,  147,  104,  147,  102,  104,  147,  101,  105,  147,
      104,  147,  120,  147,  120,  147,  116,  147,  119,  120,
      147,  120,  147,  120,  147,   30,   37,  147,  109,  147,
      109,  147,  110,  147,  109,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,   53,  147,   53,  147,   54,
      147,   53,  147,   31,   37,  147,   31,   33,   37,  147,

       32,   37,  147,   32,   33,   37,  147,   96,  147,   96,
      147,   97,  147,   58,   96,  147,   58,   96,  147,   59,
       96,  147,   59,   96,  147,   95,   96,  147,   98,  147,
       98,  147,   98,  147,  100,   47,    2,   45,   46,   12,
       12,   12,  100,    7,    6,   15,   15,   15,  100,   18,
       18,   18,  100,   26,  100,   26,  100,   24,   23,  100,
       25,  103,  113,  112,  101,  115,  118,  111,  130,  129,
      131,  124,  123,  125,  136,  135,  137,  121,  142,  141,
      143,  133,  132,  134,  127,  126,  128,  139,  138,  140,
      145,  144,  146,  122,   31,   32,    1,   16,   24,   23,

       25,  114,  108,  117,   61,   62,   76,  108,  106,   85,
       78,   84,   77,   83,   63,   94,   72,   69,   71,   60,
       75,   67,   64,   73,   27,   22,   21,   11,    5,   14,
        5,   21,  107,   79,   90,   91,   70,   68,   65,   74,
       66,   17,   86,   80,   92,   93,   99,    4,   17,   89,
       82,   87,   88,   20,   81,   49,   51,   55,   48,   50,
       52
    } ;

static yyconst flex_int16_t yy_accept[579] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    4,    5,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    8,    9,   10,
       11,   11,   11,   11,   11,   12,   14,   16,   18,   21,
       24,   27,   30,   33,   36,   38,   41,   43,   46,   48,
       50,   53,   56,   59,   62,   65,   68,   71,   74,   78,
       82,   86,   90,   94,   96,   98,  100,  103,  106,  108,
      110,  111,  113,  115,  116,  119,  120,  121,  123,  124,
      125,  126,  127,  128,  129,  130,  132,  134,  137,  139,

      141,  143,  145,  148,  151,  153,  155,  157,  159,  162,
      164,  166,  169,  171,  173,  175,  177,  178,  179,  180,
      181,  182,  183,  184,  185,  186,  188,  190,  192,  194,
      197,  201,  204,  208,  210,  212,  214,  217,  220,  223,
      226,  229,  231,  233,  235,  235,  236,  236,  236,  237,
      238,  238,  238,  238,  238,  238,  238,  239,  240,  240,
      240,  240,  240,  240,  240,  241,  242,  244,  245,  246,
      247,  248,  250,  250,  251,  252,  254,  254,  255,  255,
      256,  257,  257,  257,  257,  258,  258,  259,  260,  260,
      260,  260,  261,  261,  262,  262,  262,  262,  262,  262,

      262,  263,  264,  265,  265,  266,  266,  267,  268,  269,
      270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
      280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
      290,  291,  292,  293,  294,  295,  295,  296,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  298,  298,  299,  300,  301,
      302,  302,  303,  304,  304,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,

      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  306,  306,  306,  306,  306,  306,  306,  306,  307,
      307,  307,  307,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  309,  309,  309,  309,  310,  310,
      310,  310,  310,  310,  311,  312,  312,  313,  314,  314,
      315,  315,  315,  315,  315,  315,  316,  316,  316,  316,
      316,  316,  316,  317,  317,  317,  318,  318,  319,  319,
      320,  320,  321,  321,  322,  322,  323,  323,  323,  323,
      324,  324,  325,  325,  325,  325,  326,  326,  327,  328,

      328,  328,  329,  329,  330,  331,  331,  331,  331,  331,
      331,  333,  333,  334,  334,  335,  335,  335,  335,  335,
      335,  335,  336,  336,  337,  337,  337,  337,  338,  338,
      339,  339,  339,  340,  340,  341,  341,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  342,  343,
      343,  343,  343,  343,  344,  345,  345,  346,  347,  347,
      347,  347,  347,  348,  349,  349,  349,  349,  349,  349,
      349,  349,  350,  350,  351,  352,  352,  353,  354,  354,
      354,  354,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  356,  356,  356,  356,  356,

      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  356,  356,  356,
      356,  356,  356,  356,  356,  356,  356,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  358,  358,  359,  359,  359,  359,  359,  359,
      359,  359,  360,  360,  361,  362,  362,  362
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    7,    8,    9,   10,    1,    1,
        1,   11,    1,    1,   12,   13,   14,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   15,   16,
        1,   17,    1,   18,   19,   20,   21,   22,   23,    1,
       24,    1,   25,    1,    1,   26,   27,   28,   29,   30,
        1,   31,   32,   33,   34,    1,    1,   35,    1,    1,
       36,   37,   38,   39,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,    1,   50,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,    1,   62,
       63,    1,   64,   65,   66,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[68] =
    {   0,
        1,    1,    1,    2,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    4,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    1
    } ;

static yyconst flex_int16_t yy_base[612] =
    {   0,
        0,   66,  132,  198, 1125, 1124,  264,  330,   13,   20,
        1,    3,   19,   21,   12,   23,    4,    9,   10,   11,
     1128, 1127,   29,   49,   54,   86, 1121, 1120, 1124, 1123,
       16,   34,   70,  124,   58,   67,  108,  113,  140,  154,
      396,  461,   28,   64, 1124, 1133, 1121, 1133,   61, 1133,
     1133, 1133, 1133, 1133,  523, 1133, 1104, 1133, 1133, 1119,
     1133, 1133, 1133, 1133, 1133, 1133,    0,   44,    0,    0,
        0, 1133,    0, 1133, 1118,   58, 1133, 1133,    0,   98,
     1055,    0,  123, 1133,    0, 1052,  117, 1133, 1079,  127,
       96, 1078,  129, 1051, 1112, 1133, 1111,  148,  173,  181,

     1106,  159,  187,  206,  213, 1133, 1109, 1133, 1073, 1095,
     1101, 1133, 1133, 1105, 1133, 1092,  181,  200,  210, 1075,
      212,  216,  218,  220,  230, 1133, 1102, 1133, 1058,  241,
      244,  250,  272, 1133, 1100, 1133, 1133,  238,  587, 1133,
     1133, 1133, 1099, 1086, 1097, 1133, 1091, 1052, 1133, 1133,
      161,  234, 1055, 1050,  174, 1063, 1133, 1133, 1048, 1039,
      240,  255,  271, 1040,    0,  202,    0, 1133, 1133,    0,
      136,    0, 1024,    0,  177,    0, 1023, 1133,  249, 1022,
     1085, 1048,  246,  269, 1047,  286, 1133, 1133, 1046, 1019,
      304, 1044,   17, 1133,  340,  348, 1070,  352, 1069, 1073,

     1133, 1060, 1059,  360,  368, 1069, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133, 1133,
     1133, 1133, 1133, 1133, 1133, 1022,  314,  321, 1022,  102,
     1019,   49, 1014,  268,  333, 1011, 1021, 1055,  645,  378,
      205,  366,  281,  374,  309,  333,  415,  278,  327,  342,
      418, 1133, 1022,  343,  377, 1025, 1020,  354, 1039, 1017,
     1019, 1019, 1017,  417, 1011,  993, 1133, 1056, 1055, 1054,
     1037, 1036, 1042, 1048, 1133, 1007,  995,  994,  999,  990,
     1031, 1030,  995, 1028, 1027,  983, 1025,  980,  306,  986,

      352,  381,  426,  364,  395,  400,  394,  395,  404,  478,
     1133,  482,  144,  483,  486,  487,  491,  502, 1133,  506,
      507,  512, 1133,  218,  418,  517,  533,  541,  405,  427,
      988,  490,  511,  991,  538,  561,  999,  985,  969,  981,
      990,  588,  977, 1133, 1018,  507, 1024, 1133,  963, 1011,
      966,  966,  982, 1133, 1133,  969, 1133, 1133,  966, 1133,
      971,   14,  392,  974,  578, 1133,  601,  623,  436,  632,
      652,  655, 1133,  421,  656, 1133,  659, 1133,  678, 1133,
      679, 1133,  683, 1133,  703, 1133,  704,  497,  707, 1133,
      708, 1133,  458,  529,  965, 1133,  711, 1133, 1133,  966,

      575, 1133,  651, 1133, 1133,  963,  678,  955,  951,  723,
     1133,  963, 1001,  950, 1133,  947,  950,  957,  992,  991,
      952, 1133,  989, 1133,  988,  944,  724, 1133,  727, 1133,
      531,  728, 1133,  731, 1133,  735, 1133,  541,  553,  746,
      956,  936,  935,  941,  948,  940,  954,  950,  574,  948,
      977,  976,  939, 1133, 1133,  974, 1133, 1133,  973,  569,
      450,  750, 1133, 1133,  921,  713,  929,  927,  261,  942,
      938,  600,  925, 1133, 1133,  966, 1133, 1133,  576,  759,
      914, 1133,  922,  929,  921,  935,  930,  933,  918,  931,
      930,  910,  922,  926, 1133,  910,  908,  385,  923,  907,

      900,  898,  882,  841,  840,  733,  748,  747,  731,  744,
      741,  721,  738,  713,  732,  714,  719,  725,  724,  702,
      697,  705,  693,  687,  692,  701, 1133,  676,  694,  663,
      645,  646,  648,  627,  651,  634,  636,  639,  616,  619,
      603,  598,  596,  582,  563,  552,  573,  545,  529,  524,
      529,  632,  492,  504,  476,  726,  485,  443,  404,  404,
      321, 1133,  306, 1133,  727,  300,  652,  263,  236,  209,
      178, 1133,   48, 1133, 1133,   51, 1133,  793,  798,  803,
      808,  813,  818,  823,  828,  833,  838,  843,  848,  853,
      858,  863,  868,  873,  878,  882,  887,  892,  897,  902,

      907,  912,  917,  922,  927,  932,  937,  942,  947,  952,
      957
    } ;

static yyconst flex_int16_t yy_def[612] =
    {   0,
      578,  578,  579,  579,    4,    4,  580,  580,  581,  581,
      582,  582,  583,  583,  584,  584,  585,  585,  586,  586,
      587,  587,  588,  588,  589,  589,    4,    4,  587,  587,
      590,  590,  587,  587,  591,  591,    4,    4,    4,    4,
      592,  592,  593,  593,  577,  577,  594,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  594,
      577,  577,  577,  577,  577,  577,  595,  596,  595,  595,
      595,  577,  595,  577,  594,  577,  577,  577,  597,  598,
      577,  599,  600,  577,  599,  601,  602,  577,  603,  604,
      577,  605,  606,  577,  594,  577,  594,  577,  577,  577,

      607,  577,  577,  577,  577,  577,  594,  577,  577,  577,
      577,  577,  577,  594,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  594,  577,  577,  577,
      577,  577,  577,  577,  594,  577,  577,  577,  577,  577,
      577,  577,  594,  577,  594,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  595,  596,  595,  577,  577,  597,
      598,  597,  608,  599,  600,  599,  601,  577,  602,  601,
      594,  603,  577,  604,  603,  594,  577,  577,  605,  577,
      606,  605,  594,  577,  577,  577,  577,  577,  577,  607,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  139,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  608,  577,  594,  594,  594,
      577,  577,  609,  610,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  249,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  609,  609,  610,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  609,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  611,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      611,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,    0,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,

      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577
    } ;

static yyconst flex_int16_t yy_nxt[1201] =
    {   0,
      577,   47,   80,   48,   80,   90,   49,   50,   51,   52,
       90,   93,   93,   87,   75,   53,   54,  114,  146,  115,
       83,   75,   83,   84,   87,   84,  116,  577,  422,  143,
       97,   98,   99,  100,  101,  114,   55,  115,   81,   56,
       81,   91,  102,  144,  116,  167,   91,   94,   94,   76,
       97,  103,  104,  105,  101,  107,   76,  108,  423,  127,
      109,  128,  102,   57,  110,  143,   58,   47,  127,   48,
      128,   95,   49,   50,   51,   52,   77,   88,   78,  144,
      280,   53,   54,   77,   85,   78,   85,  107,   88,  108,
      111,  117,  109,  291,  129,  118,  110,  147,  568,  172,

      119,  120,   55,  129,  148,   56,  576,  292,  121,  145,
      130,  130,  131,  122,   59,  130,  130,  131,  180,   59,
      123,  168,  111,  169,  176,   95,  124,  145,  185,   57,
      192,  187,   58,   60,  125,  145,   61,  172,   62,   61,
       61,   61,  132,  132,  133,  117,   59,   61,   61,  118,
      195,  196,  195,  288,  119,  120,  132,  132,  133,  188,
       59,  197,  121,  289,  186,  374,  193,  122,   63,  202,
       64,   61,  203,  145,  123,  198,  198,  198,  176,  264,
      124,  145,  181,  195,  196,  195,  199,  374,  125,  204,
      205,  204,  210,  211,  197,   61,  268,   61,   65,   60,

      197,  264,   61,  167,   62,   61,   61,   61,  198,  198,
      198,  213,  214,   61,   61,  204,  205,  204,  268,  199,
      212,  216,  217,  220,  221,  264,  197,  223,  224,  226,
      227,  229,  230,  313,   63,  333,   64,   61,  268,  215,
      387,  232,  233,  237,  237,  237,  237,  237,  237,  218,
      180,  222,  238,  238,  238,  225,  553,  228,  313,  231,
      265,   61,  387,   61,   65,   68,  265,  145,   69,  234,
      185,   69,   69,   69,  238,  238,  238,  268,  239,   69,
       69,  187,  240,  241,  242,  265,  243,  146,  244,  264,
      245,  265,  272,  268,  235,  246,  247,  265,  265,  268,

       70,  575,   71,   69,  265,  192,  186,  317,  273,  188,
      325,  264,  294,  490,  181,  268,  237,  237,  237,  268,
      491,  278,  265,  238,  238,  238,  295,   69,  574,   72,
       73,   68,  317,  320,   69,  274,  325,   69,   69,   69,
      573,  193,  195,  196,  195,   69,   69,  362,  571,  279,
      198,  198,  198,  197,  198,  198,  198,  320,  321,  326,
      363,  199,  204,  205,  204,  199,   70,  327,   71,   69,
      198,  198,  198,  197,  296,  332,  318,  297,  318,  570,
      310,  199,  310,  321,  308,  326,  298,  314,  336,  367,
      319,  315,  327,   69,  311,   72,   73,  135,  316,  136,

      333,  332,  137,  137,  137,  138,  424,  332,  312,  314,
      308,  139,  140,  577,  367,  336,  315,  322,  336,  322,
      328,  303,  328,  333,  316,  368,  369,  370,  365,  371,
      365,  323,  141,  393,  312,  137,  425,  510,  329,  577,
      333,  333,  366,  387,  511,  324,  303,  330,  388,  332,
      368,  336,  369,  370,  371,  569,  568,  394,  393,  137,
      329,  137,  135,  333,  136,  387,  431,  137,  137,  137,
      138,  324,  330,  480,  388,  332,  139,  140,  336,  439,
      310,  342,  310,  394,  372,  375,  372,  375,  377,  379,
      377,  379,  431,  381,  311,  381,  480,  141,  373,  376,

      137,  439,  378,  380,  318,  567,  318,  382,  383,  385,
      383,  385,  396,  397,  322,  397,  322,  346,  319,  389,
      413,  389,  384,  386,  137,  438,  137,  149,  323,  150,
      149,  149,  149,  390,  396,  391,  566,  391,  149,  149,
      401,  564,  401,  328,  151,  328,  398,  152,  153,  392,
      438,  440,  563,  154,  396,  155,  156,  562,  157,  460,
      158,  329,  149,  403,  159,  403,  151,  160,  461,  561,
      330,  161,  560,  440,  399,  440,  472,  401,  472,  401,
      365,  162,  365,  329,  460,  534,  149,  163,  149,  248,
      410,  248,  410,  461,  366,  330,  479,  440,  559,  303,

      249,  402,  472,  427,  472,  427,  250,  251,  252,  253,
      396,  254,  255,  558,  557,  256,  257,  428,  258,  259,
      260,  479,  303,  398,  404,  429,  556,  429,  250,  251,
      252,  253,  396,  555,  432,  254,  432,  255,  402,  430,
      256,  257,  553,  554,  258,  259,  260,  302,  433,  302,
      553,  411,  396,  403,  434,  403,  434,  372,  375,  372,
      375,  377,  568,  377,  303,  552,  304,  305,  435,  303,
      551,  373,  376,  306,  550,  378,  307,  308,  309,  549,
      379,  381,  379,  381,  548,  383,  303,  383,  304,  305,
      547,  546,  545,  303,  380,  382,  544,  562,  306,  384,

      543,  514,  307,  308,  309,  385,  436,  385,  436,  389,
      391,  389,  391,  397,  404,  397,  542,  574,  444,  386,
      437,  445,  446,  390,  392,  410,  427,  410,  427,  429,
      432,  429,  432,  434,  541,  434,  447,  436,  540,  436,
      428,  539,  538,  430,  433,  537,  398,  435,  462,  536,
      462,  437,  462,  483,  462,  535,  484,  485,  398,  534,
      533,  310,  463,  310,  532,  531,  463,  530,  565,  565,
      529,  486,  528,  487,  399,  311,  565,  565,  527,  526,
      525,  524,  565,  565,  523,  522,  411,  521,  520,  519,
      565,  565,  572,   46,   46,   46,   46,   46,   59,   59,

       59,   59,   59,   67,   67,   67,   67,   67,   74,   74,
       74,   74,   74,   79,   79,   79,   79,   79,   82,   82,
       82,   82,   82,   86,   86,   86,   86,   86,   89,   89,
       89,   89,   89,   92,   92,   92,   92,   92,   84,   84,
       84,   84,   84,   96,   96,   96,   96,   96,  106,  106,
      106,  106,  106,  113,  113,  113,  113,  113,  126,  126,
      126,  126,  126,  134,  134,  134,  134,  134,  142,  142,
      142,  142,  142,  145,  145,  145,  145,  145,  165,  165,
      165,  165,  166,  166,  166,  166,  166,  170,  170,  170,
      518,  170,  171,  171,  171,  171,  171,  174,  174,  517,

      174,  174,  175,  175,  175,  175,  175,  177,  177,  177,
      177,  177,  179,  179,  179,  179,  179,  182,  182,  182,
      182,  182,  184,  184,  184,  184,  184,  189,  189,  189,
      189,  189,  191,  191,  191,  191,  191,  200,  516,  200,
      200,  200,  276,  276,  276,  276,  276,  345,  515,  345,
      345,  345,  347,  347,  347,  347,  347,  481,  481,  481,
      481,  481,  514,  513,  512,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  482,
      495,  494,  493,  492,  489,  488,  482,  478,  477,  476,
      475,  474,  473,  471,  470,  469,  468,  467,  466,  465,

      464,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  346,  449,  396,  448,  443,  442,  441,  426,  421,
      420,  419,  418,  417,  416,  415,  414,  348,  346,  412,
      409,  408,  407,  406,  405,  400,  395,  364,  361,  360,
      359,  358,  357,  356,  355,  354,  353,  352,  351,  350,
      349,  348,  346,  344,  344,  146,  146,  146,  277,  343,
      341,  340,  339,  338,  337,  335,  334,  331,  301,  300,
      299,  293,  290,  287,  286,  285,  284,  283,  201,  282,
      281,  190,  194,  190,  183,  183,  146,  178,  178,  277,
      275,  271,  270,  269,  267,  266,  263,  262,  146,  261,

      146,  146,  236,  146,  219,  209,  146,  208,  207,  206,
      146,  201,  146,  146,  194,  190,  183,  178,  173,  146,
      146,  164,  146,  577,   95,   95,  112,  112,   95,   95,
       66,   66,   45,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577

    } ;

static yyconst flex_int16_t yy_chk[1201] =
    {   0,
        0,    1,   11,    1,   12,   17,    1,    1,    1,    1,
       18,   19,   20,   15,    9,    1,    1,   31,  193,   31,
       13,   10,   14,   13,   16,   14,   31,    0,  362,   43,
       23,   23,   23,   23,   23,   32,    1,   32,   11,    1,
       12,   17,   23,   43,   32,   68,   18,   19,   20,    9,
       24,   24,   24,   24,   24,   25,   10,   25,  362,   35,
       25,   35,   24,    1,   25,   44,    1,    2,   36,    2,
       36,   33,    2,    2,    2,    2,    9,   15,    9,   44,
      193,    2,    2,   10,   13,   10,   14,   26,   16,   26,
       25,   33,   26,  242,   35,   33,   26,   49,  576,   80,

       33,   33,    2,   36,   49,    2,  573,  242,   33,   68,
       37,   37,   37,   33,   37,   38,   38,   38,   87,   38,
       33,   76,   26,   76,   83,   34,   33,   83,   90,    2,
       93,   91,    2,    3,   33,   80,    3,  171,    3,    3,
        3,    3,   39,   39,   39,   34,   39,    3,    3,   34,
       98,   98,   98,  240,   34,   34,   40,   40,   40,   91,
       40,   98,   34,  240,   90,  313,   93,   34,    3,  102,
        3,    3,  102,  171,   34,   99,   99,   99,  175,  151,
       34,  175,   87,  100,  100,  100,   99,  313,   34,  103,
      103,  103,  117,  117,  100,    3,  155,    3,    3,    4,

      103,  151,    4,  166,    4,    4,    4,    4,  104,  104,
      104,  118,  118,    4,    4,  105,  105,  105,  155,  104,
      117,  119,  119,  121,  121,  151,  105,  122,  122,  123,
      123,  124,  124,  251,    4,  571,    4,    4,  155,  118,
      324,  125,  125,  130,  130,  130,  131,  131,  131,  119,
      179,  121,  132,  132,  132,  122,  570,  123,  251,  124,
      152,    4,  324,    4,    4,    7,  161,  166,    7,  125,
      184,    7,    7,    7,  133,  133,  133,  162,  138,    7,
        7,  183,  138,  138,  138,  152,  138,  186,  138,  163,
      138,  161,  161,  163,  125,  138,  138,  163,  152,  162,

        7,  569,    7,    7,  161,  191,  184,  253,  162,  183,
      258,  163,  244,  469,  179,  163,  237,  237,  237,  162,
      469,  186,  163,  238,  238,  238,  244,    7,  568,    7,
        7,    8,  253,  255,    8,  163,  258,    8,    8,    8,
      566,  191,  195,  195,  195,    8,    8,  299,  563,  186,
      196,  196,  196,  195,  198,  198,  198,  255,  256,  259,
      299,  196,  204,  204,  204,  198,    8,  260,    8,    8,
      205,  205,  205,  204,  245,  264,  254,  245,  254,  561,
      250,  205,  250,  256,  301,  259,  245,  252,  268,  304,
      254,  252,  260,    8,  250,    8,    8,   41,  252,   41,

      265,  264,   41,   41,   41,   41,  363,  264,  250,  252,
      301,   41,   41,  302,  304,  268,  252,  257,  268,  257,
      261,  305,  261,  265,  252,  306,  307,  308,  303,  309,
      303,  257,   41,  329,  250,   41,  363,  498,  261,  302,
      274,  265,  303,  374,  498,  257,  305,  261,  325,  274,
      306,  274,  307,  308,  309,  560,  559,  330,  329,   41,
      261,   41,   42,  274,   42,  374,  369,   42,   42,   42,
       42,  257,  261,  461,  325,  274,   42,   42,  274,  393,
      310,  274,  310,  330,  312,  314,  312,  314,  315,  316,
      315,  316,  369,  317,  310,  317,  461,   42,  312,  314,

       42,  393,  315,  316,  318,  558,  318,  317,  320,  321,
      320,  321,  332,  333,  322,  333,  322,  346,  318,  326,
      346,  326,  320,  321,   42,  388,   42,   55,  322,   55,
       55,   55,   55,  326,  332,  327,  557,  327,   55,   55,
      335,  555,  335,  328,   55,  328,  333,   55,   55,  327,
      388,  394,  554,   55,  332,   55,   55,  553,   55,  431,
       55,  328,   55,  336,   55,  336,   55,   55,  438,  551,
      328,   55,  550,  394,  333,  439,  449,  401,  449,  401,
      365,   55,  365,  328,  431,  549,   55,   55,   55,  139,
      342,  139,  342,  438,  365,  328,  460,  439,  548,  479,

      139,  335,  472,  367,  472,  367,  139,  139,  139,  139,
      342,  139,  139,  547,  546,  139,  139,  367,  139,  139,
      139,  460,  479,  342,  336,  368,  545,  368,  139,  139,
      139,  139,  342,  544,  370,  139,  370,  139,  401,  368,
      139,  139,  552,  543,  139,  139,  139,  249,  370,  249,
      542,  342,  342,  403,  371,  403,  371,  372,  375,  372,
      375,  377,  567,  377,  249,  541,  249,  249,  371,  249,
      540,  372,  375,  249,  539,  377,  249,  249,  249,  538,
      379,  381,  379,  381,  537,  383,  249,  383,  249,  249,
      536,  535,  534,  249,  379,  381,  533,  552,  249,  383,

      532,  531,  249,  249,  249,  385,  387,  385,  387,  389,
      391,  389,  391,  397,  403,  397,  530,  567,  407,  385,
      387,  407,  407,  389,  391,  410,  427,  410,  427,  429,
      432,  429,  432,  434,  529,  434,  407,  436,  528,  436,
      427,  526,  525,  429,  432,  524,  397,  434,  440,  523,
      440,  436,  462,  466,  462,  522,  466,  466,  410,  521,
      520,  480,  440,  480,  519,  518,  462,  517,  556,  565,
      516,  466,  515,  466,  397,  480,  556,  565,  514,  513,
      512,  511,  556,  565,  510,  509,  410,  508,  507,  506,
      556,  565,  565,  578,  578,  578,  578,  578,  579,  579,

      579,  579,  579,  580,  580,  580,  580,  580,  581,  581,
      581,  581,  581,  582,  582,  582,  582,  582,  583,  583,
      583,  583,  583,  584,  584,  584,  584,  584,  585,  585,
      585,  585,  585,  586,  586,  586,  586,  586,  587,  587,
      587,  587,  587,  588,  588,  588,  588,  588,  589,  589,
      589,  589,  589,  590,  590,  590,  590,  590,  591,  591,
      591,  591,  591,  592,  592,  592,  592,  592,  593,  593,
      593,  593,  593,  594,  594,  594,  594,  594,  595,  595,
      595,  595,  596,  596,  596,  596,  596,  597,  597,  597,
      505,  597,  598,  598,  598,  598,  598,  599,  599,  504,

      599,  599,  600,  600,  600,  600,  600,  601,  601,  601,
      601,  601,  602,  602,  602,  602,  602,  603,  603,  603,
      603,  603,  604,  604,  604,  604,  604,  605,  605,  605,
      605,  605,  606,  606,  606,  606,  606,  607,  503,  607,
      607,  607,  608,  608,  608,  608,  608,  609,  502,  609,
      609,  609,  610,  610,  610,  610,  610,  611,  611,  611,
      611,  611,  501,  500,  499,  497,  496,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  485,  484,  483,  481,
      476,  473,  471,  470,  468,  467,  465,  459,  456,  453,
      452,  451,  450,  448,  447,  446,  445,  444,  443,  442,

      441,  426,  425,  423,  421,  420,  419,  418,  417,  416,
      414,  413,  412,  409,  408,  406,  400,  395,  364,  361,
      359,  356,  353,  352,  351,  350,  349,  347,  345,  343,
      341,  340,  339,  338,  337,  334,  331,  300,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  284,  283,  282,  281,  280,  279,  278,  276,  275,
      273,  272,  271,  270,  269,  267,  266,  263,  248,  247,
      246,  243,  241,  239,  236,  206,  203,  202,  200,  199,
      197,  192,  190,  189,  185,  182,  181,  180,  177,  173,
      164,  160,  159,  156,  154,  153,  148,  147,  145,  144,

      143,  135,  129,  127,  120,  116,  114,  111,  110,  109,
      107,  101,   97,   95,   94,   92,   89,   86,   81,   75,
       60,   57,   47,   45,   30,   29,   28,   27,   22,   21,
        6,    5,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577

    } ;

extern int doc2texYY_flex_debug;
int doc2texYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up doc2texYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *doc2texYYtext;
#line 1 "doc2tex.ll"
/*
  doc2tex.ll

  Copyright (c) 1996 Roland Wunderling, Malte Zoeckler
  Copyright (c) 1998-2000 Dragos Acostachioaie

  This file is part of DOC++.

  DOC++ is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the license, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
#line 25 "doc2tex.ll"
#include <assert.h>
#include <fstream>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include "classgraph.h"
#include "doc.h"

using namespace std;

#define YY_DECL int doc2texYYlex()

#undef	YY_INPUT
#define	YY_INPUT(buf, result, max_size) result = yyread(buf, max_size);

static Entry*	current;
static int	inPos;
static int	lastContext;
static const char*	inStr;
static McString	img, imgArg1, imgArg2;

static enum {
    C_COMMENT,
    SHORT_C_COMMENT,
    CC_COMMENT
} commentMode;

static int	escapePercent	= 0;
static int	verbMode	= 0;
static int	skip		= 0;
static int	tab		= 0;
static int	yyLineNr	= 0;
static int	texBracketCount	= 0;
static McString	refStr		= "";
static Entry*	ref		= 0;
static Entry*	noref		= ref + 1;
static char	yyFileName[264];
bool		mathmode	= false;
static int	tabFlag		= 0;

static int yyread(char *buf, int max_size)
{
    int c = 0;
    while(c < max_size && inStr[inPos])
	{
	*buf = inStr[inPos++];
	c++;
	buf++;
	}
    return c;
}

extern "C" {
    int doc2texYYwrap()
	{
	return 1;
	}
}

static void setupVerbMode()
{
    if(skip)
	{
	fprintf(out, "\\strut\\goodbreak\n");
	fprintf(out, "\\noindent{\\tiny\\em %s}", yyFileName);
	fprintf(out, "\\strut\\nopagebreak\\\\\n");
	skip = 0;
	}
    fprintf(out, "\\cxxCodeLine{%d} ", yyLineNr);
    verbMode = 1;
    tab = 0;
}

static void closeVerbMode()
{
    fprintf(out, "%c\n", 3);
    verbMode = 0;
}






















#line 1118 "doc2tex.cc"

#define INITIAL 0
#define Code 1
#define Verb 2
#define Ref 3
#define texmode 4
#define URL 5
#define Link 6
#define Image 7
#define ImageArg1 8
#define ImageArg2 9
#define Label 10
#define Listing 11
#define Comment 12
#define LVerb 13
#define ShortComment 14
#define RealComment 15
#define Graph 16
#define texverbatim 17
#define TeXlist 18
#define HTMLlist 19
#define HTML 20
#define HTMLverbatim 21

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int doc2texYYlex_destroy (void );

int doc2texYYget_debug (void );

void doc2texYYset_debug (int debug_flag  );

YY_EXTRA_TYPE doc2texYYget_extra (void );

void doc2texYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *doc2texYYget_in (void );

void doc2texYYset_in  (FILE * in_str  );

FILE *doc2texYYget_out (void );

void doc2texYYset_out  (FILE * out_str  );

int doc2texYYget_leng (void );

char *doc2texYYget_text (void );

int doc2texYYget_lineno (void );

void doc2texYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int doc2texYYwrap (void );
#else
extern int doc2texYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( doc2texYYtext, doc2texYYleng, 1, doc2texYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( doc2texYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( doc2texYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, doc2texYYin))==0 && ferror(doc2texYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(doc2texYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int doc2texYYlex (void);

#define YY_DECL int doc2texYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after doc2texYYtext and doc2texYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( doc2texYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(doc2texYYtext[doc2texYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 132 "doc2tex.ll"

#line 1331 "doc2tex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)doc2texYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in doc2texYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! doc2texYYin )
			doc2texYYin = stdin;

		if ( ! doc2texYYout )
			doc2texYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			doc2texYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				doc2texYY_create_buffer(doc2texYYin,YY_BUF_SIZE );
		}

		doc2texYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of doc2texYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 578 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1133 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 133 "doc2tex.ll"
{
			fprintf(out, "$\\backslash$");
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 137 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 141 "doc2tex.ll"
{
			fprintf(out, "{\\tt\\strut ");
			BEGIN(Verb);
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 146 "doc2tex.ll"
{
			fprintf(out, "\\#define");
			BEGIN(Verb);
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 151 "doc2tex.ll"
{
			BEGIN(texmode);
			texBracketCount = 1;
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 156 "doc2tex.ll"
{
			yymore();
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 160 "doc2tex.ll"
{
			yymore();
			}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 164 "doc2tex.ll"
{
			++texBracketCount;
			yymore();
			}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 169 "doc2tex.ll"
{
			if(--texBracketCount == 0)
			    {
			    doc2texYYtext[--doc2texYYleng] = 0;
			    fprintf(out, doc2texYYtext);
			    BEGIN(0);
			    }
			else
			    yymore();
			}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 180 "doc2tex.ll"
{
			yymore();
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 184 "doc2tex.ll"
{
			BEGIN(Ref);
			}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 188 "doc2tex.ll"
{
			if(ref == 0)
			    {
			    refStr = McString(doc2texYYtext, 0, doc2texYYleng - 2);
			    ref = getRefEntry(refStr, current);
			    }
			REJECT;
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 197 "doc2tex.ll"
{
			if(ref && ref != noref)
			    {
			    fprintf(out, " ($\\rightarrow$ ");
			    if(MAKE_DOC(ref))
				{
				ref->dumpNumber(out);
				fprintf(out, ",");
				}
			    fprintf(out, " {\\em page }\\pageref{cxx.");
			    ref->dumpNumber(out);
			    fprintf(out, "})");
			    }
			else
			    fprintf(out, refStr.c_str());
			ref = 0;
			refStr.clear();
			BEGIN(0);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 217 "doc2tex.ll"
{
			BEGIN(URL);
			}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 221 "doc2tex.ll"
{
			char *p = doc2texYYtext;
			while(*p != '\0')
			    {
			    switch(*p)
				{
				case '%':
				case '_':
				case '&':
				case '$':
				    fputc('\\', out);
				default:
				    fputc(*p, out);
				    break;
				}
			    ++p;
			    }
			}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 240 "doc2tex.ll"
{
			BEGIN(0);
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 244 "doc2tex.ll"
{
			BEGIN(Link);
			}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 248 "doc2tex.ll"
{
			if(ref == 0)
			    {
			    McString tmp = doc2texYYtext;
			    ref = getRefEntry(tmp, current);
			    }
			REJECT;
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 257 "doc2tex.ll"
{
			if(ref && ref != noref)
			    {
			    fprintf(out, " ($\\rightarrow$ ");
			    if(MAKE_DOC(ref))
				{
				ref->dumpNumber(out);
				fprintf(out, ",");
				}
			    fprintf(out, " {\\em page }\\pageref{cxx.");
			    ref->dumpNumber(out);
			    fprintf(out, "})");
			    }
			ref = 0;
			BEGIN(0);
			}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 274 "doc2tex.ll"
{
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 277 "doc2tex.ll"
{
			img.clear();
			imgArg1.clear();
			imgArg2.clear();
			BEGIN(Image);
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 284 "doc2tex.ll"
{
			img.clear();
			imgArg1.clear();
			imgArg2.clear();
			BEGIN(ImageArg1);
			}
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 291 "doc2tex.ll"
{
    			if(strlen(doc2texYYtext) > 2 && imgArg1.length() == 0)
			    imgArg1 = McString(doc2texYYtext, 0, strlen(doc2texYYtext) - 2);
			BEGIN(Image);
			}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 297 "doc2tex.ll"
{
    			if(strlen(doc2texYYtext) > 2 && imgArg1.length() == 0)
			    imgArg1 = McString(doc2texYYtext, 0, strlen(doc2texYYtext) - 2);
			BEGIN(ImageArg2);
			}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 303 "doc2tex.ll"
{
			if(strlen(doc2texYYtext) > 2 && imgArg2.length() == 0)
	    		    imgArg2 = McString(doc2texYYtext, 0, strlen(doc2texYYtext) - 2);
			BEGIN(Image);
			}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 309 "doc2tex.ll"
{
			if(strlen(doc2texYYtext) > 1 && img.length() == 0)
			    img = McString(doc2texYYtext, 0, strlen(doc2texYYtext) - 1);
			if(img.length() > 0)
			    {
        		    fprintf(out, "\\includegraphics");
        		    if(imgArg2.length() > 0)
            			{
            			fprintf(out, "[");
				fprintf(out, imgArg2.c_str());
				fprintf(out, "]");
            			}
        		    // remove extension if present
			    int i = img.index('.');
			    if(i > 0)
				img.remove(i, img.length() - i);
        		    fprintf(out, "{%s.eps}", img.c_str());
			    }
			img.clear();
			imgArg1.clear();
			imgArg2.clear();
                	BEGIN(0);
                	}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 333 "doc2tex.ll"
{
			time_t ltime;
			(void)time(&ltime);
			char timebuf[64];
			strftime(timebuf, 64, "%c", localtime(&ltime));
			fprintf(out, timebuf);
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 341 "doc2tex.ll"
{
			fprintf(out, "\\%c", *doc2texYYtext);
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 345 "doc2tex.ll"
{
			fprintf(out, "}");
			BEGIN(0);
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 350 "doc2tex.ll"
{
			fprintf(out, "}");
			BEGIN(Comment);
			}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 355 "doc2tex.ll"
{
			fprintf(out, "} & ");
			BEGIN(0);
			}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 360 "doc2tex.ll"
{
			fprintf(out, "} & ");
			BEGIN(HTML);
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 365 "doc2tex.ll"
{
			fprintf(out, "\\%c", *doc2texYYtext);
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 369 "doc2tex.ll"
{
			fprintf(out, "\\cxxtilde ");
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 373 "doc2tex.ll"
{
			fprintf(out, "{$\\backslash$\\relax}");
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 377 "doc2tex.ll"
{
			fprintf(out, "$\\hat{\\;}$");
			}
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 381 "doc2tex.ll"
{
			fprintf(out, "%c", *doc2texYYtext);
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 385 "doc2tex.ll"
{
			fprintf(out, (mathmode ? "<" : "\\<"));
			}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 389 "doc2tex.ll"
{
			fprintf(out, (mathmode ? ">" : "\\>"));
			}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 393 "doc2tex.ll"
{
			fprintf(out, (mathmode ? "_" : "\\_"));
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 397 "doc2tex.ll"
{
			fprintf(out, "$");
			mathmode = !mathmode;
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 402 "doc2tex.ll"
{
			fprintf(out, "\\%c", *doc2texYYtext);
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 406 "doc2tex.ll"
{
			fprintf(out, "\\cxxtilde ");
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 410 "doc2tex.ll"
{
			fprintf(out, tabFlag ? "&" : "\\&");
			}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 414 "doc2tex.ll"
{
			fprintf(out, "\\[");
			mathmode = true;
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 419 "doc2tex.ll"
{
			fprintf(out, "\\]");
			mathmode = false;
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 424 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 428 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			tabFlag++;
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 433 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			tabFlag--;
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 438 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			mathmode = true;
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 443 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			mathmode = false;
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 448 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			BEGIN(texverbatim);
			}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 453 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 457 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 461 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			BEGIN(0);
			}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 466 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 470 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 474 "doc2tex.ll"
{
			fprintf(out, "\\%s", doc2texYYtext);
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 478 "doc2tex.ll"
{
			fprintf(out, "$%s$", doc2texYYtext);
			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 482 "doc2tex.ll"
{
			fprintf(out, "{\\em ");
			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 486 "doc2tex.ll"
{
			fprintf(out, "{\\bf ");
			}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 490 "doc2tex.ll"
{
			fprintf(out, "{\\it ");
			}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 494 "doc2tex.ll"
{
			fprintf(out, "}");
			}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 498 "doc2tex.ll"
{
			fprintf(out, "{\\tt\\strut ");
			}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 502 "doc2tex.ll"
{
			fprintf(out, "}");
			}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 506 "doc2tex.ll"
{
			fprintf(out, "\\begin{verbatim}\n");
			lastContext = YY_START;
			BEGIN(HTMLverbatim);
			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 512 "doc2tex.ll"
{
			fprintf(out, "\\begin{enumerate}\n");
			}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 516 "doc2tex.ll"
{
			fprintf(out, "\\end{enumerate}\n");
			}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 520 "doc2tex.ll"
{
			fprintf(out, "\\begin{description}\n");
			}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 524 "doc2tex.ll"
{
			fprintf(out, "\\end{description}\n");
			}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 528 "doc2tex.ll"
{
			fprintf(out, "\\item[");
			}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 532 "doc2tex.ll"
{
			fprintf(out, "]\t");
			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 536 "doc2tex.ll"
{
			fprintf(out, "\\begin{itemize}\n");
			}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 540 "doc2tex.ll"
{
			fprintf(out, "\\end{itemize}\n");
			}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 544 "doc2tex.ll"
{
			fprintf(out, "\\item\t");
			}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 548 "doc2tex.ll"
{
			fprintf(out, "\\strut\\\\");
			}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 552 "doc2tex.ll"
{
			fprintf(out, "\\<");
			}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 556 "doc2tex.ll"
{
			fprintf(out, "\\>");
			}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 560 "doc2tex.ll"
{
			fprintf(out, "&");
			}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 564 "doc2tex.ll"
{
			fprintf(out, "~");
			}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 568 "doc2tex.ll"
{
			fprintf(out, "$\\forall$");
			}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 572 "doc2tex.ll"
{
			fprintf(out, "$\\exists$");
			}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 576 "doc2tex.ll"
{
			fprintf(out, "$\\neq$");
			}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 580 "doc2tex.ll"
{
			fprintf(out, "$\\le$");
			}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 584 "doc2tex.ll"
{
			fprintf(out, "$\\ge$");
			}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 588 "doc2tex.ll"
{
			fprintf(out, "$\\in$");
			}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 592 "doc2tex.ll"
{
			fprintf(out, "$\\not\\in$");
			}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 596 "doc2tex.ll"
{
			fprintf(out, "$\\times$");
			}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 600 "doc2tex.ll"
{
			fprintf(out, "$\\emptyset$");
			}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 604 "doc2tex.ll"
{
			fprintf(out, "$\\subset$");
			}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 608 "doc2tex.ll"
{
			fprintf(out, "$\\superset$");
			}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 612 "doc2tex.ll"
{
			fprintf(out, "$\\subseteq$");
			}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 616 "doc2tex.ll"
{
			fprintf(out, "$\\superseteq$");
			}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 620 "doc2tex.ll"
{
			fprintf(out, "\\\\");
			}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 624 "doc2tex.ll"
{
			fprintf(out, "$\\backslash$");
			}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 628 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 632 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			} 
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 636 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 640 "doc2tex.ll"
{
			fprintf(out, "\\end{verbatim}\n");
			BEGIN(lastContext);
			}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 645 "doc2tex.ll"
{
			yyLineNr = 1;
			int i;
		   	for(i = 0; doc2texYYtext[i + 1] != 6; i++)
		   	    yyFileName[i] = doc2texYYtext[i + 1];
		   	yyFileName[i] = 0;
			fprintf(out, "\\strut\\\\\n");
			skip = 1;
		   	}
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 655 "doc2tex.ll"
{
			if(!skip)
			    fprintf(out, "\\cxxCodeLine{%d} %c\n\\\\\n", yyLineNr, 3);
			yyLineNr++;
			}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 661 "doc2tex.ll"
{
			if(!verbMode)
			    setupVerbMode();
			do
			    {
			    putc(' ', out);
			    }
			while(++tab % 8);
			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 671 "doc2tex.ll"
{
			if(!verbMode)
			    setupVerbMode();
			fprintf(out, "%s", &(doc2texYYtext[0]));
			tab += doc2texYYleng;
			}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 678 "doc2tex.ll"
{
			if(!verbMode)
			    setupVerbMode();
			putc(doc2texYYtext[0], out);
			++tab;
			}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 685 "doc2tex.ll"
{
			if(!skip)
			    {
			    if(!verbMode)
				setupVerbMode();
			    closeVerbMode();
			    fprintf(out, "\\\\\n");
			    }
			yyLineNr++;
			}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 696 "doc2tex.ll"
{
			yyLineNr++;
			}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 700 "doc2tex.ll"

	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 701 "doc2tex.ll"
{
			BEGIN(RealComment);
			}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 705 "doc2tex.ll"

	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 706 "doc2tex.ll"
{
			yyLineNr++;
			}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 710 "doc2tex.ll"
{
			BEGIN(Listing);
			}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 714 "doc2tex.ll"
{ 
			if(!verbMode)
			    setupVerbMode();
			closeVerbMode();
			fprintf(out, "\\hbox{//");
			commentMode = CC_COMMENT;
			BEGIN(Comment);
			}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 723 "doc2tex.ll"
{ 
			if(verbMode)
			    closeVerbMode();
			fprintf(out, "\\hbox{/*");
			commentMode = SHORT_C_COMMENT;
			BEGIN(Comment);
			}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 731 "doc2tex.ll"
{
			if(verbMode)
			    closeVerbMode();
			commentMode = C_COMMENT;
			while(doc2texYYleng--)
			    yyLineNr += (doc2texYYtext[doc2texYYleng] == '\n');
			BEGIN(Comment);
			fprintf(out, "\\strut\\\\");
			fprintf(out, "\\strut\\\\");
			}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 742 "doc2tex.ll"
{
			switch(commentMode)
			    {
			    case SHORT_C_COMMENT:
				fprintf(out, "%s", &(doc2texYYtext[0]));
				fprintf(out, "}\\\\\n");
				BEGIN(Listing);
				break;
			    case C_COMMENT:
				skip = 1;
				BEGIN(Listing);
				break;
			    default:
				fprintf(out, "%s", &(doc2texYYtext[0]));
				break;
			    }
			}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 760 "doc2tex.ll"
{
			switch(commentMode)
			    {
			    case SHORT_C_COMMENT:
				commentMode = C_COMMENT;
				fprintf(out, "}\n");
			    case C_COMMENT:
				putc(doc2texYYtext[0], out);
				break;
			    default:
				fprintf(out, "}\\strut\\\\\n");
				BEGIN(Listing);
				break;
			    }
			yyLineNr++;
			}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 777 "doc2tex.ll"
{
			fprintf(out, "$\\backslash$");
			}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 781 "doc2tex.ll"
{
			fprintf(out, "%s", doc2texYYtext);
			}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 785 "doc2tex.ll"
{
			fprintf(out, "{\\tt\\strut ");
			BEGIN(LVerb);
			}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 790 "doc2tex.ll"
{
			putc(doc2texYYtext[0], out);
			}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 794 "doc2tex.ll"
{
			fprintf(out, "\\cxxNone");
			}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 798 "doc2tex.ll"
{
			fprintf(out, "\\cxxLong");
			}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 802 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPriLeft" \
			    : "\\cxxPriLeft");
			}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 806 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkProLeft" \
			    : "\\cxxProLeft");
			}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 811 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPubLeft" \
			    : "\\cxxPubLeft");
			}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 816 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPrileft" \
			    : "\\cxxPrileft");
			}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 821 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkProleft" \
			    : "\\cxxProleft");
			}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 826 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPubleft" \
			    : "\\cxxPubleft");
			}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 831 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPriLeft" \
			    : "\\cxxLastPriLeft");
			}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 836 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkProLeft" \
			    : "\\cxxLastProLeft");
			}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 841 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPubLeft" \
			    : "\\cxxLastPubLeft");
			}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 846 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPrileft" \
			    : "\\cxxLastPrileft");
			}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 851 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkProleft" \
			    : "\\cxxLastProleft");
			}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 856 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxLinkPubleft" \
			    : "\\cxxLastPubleft");
			}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 861 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxPriRight" \
			    : "\\cxxLinkPriRight");
			}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 866 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxProRight" \
			    : "\\cxxLinkProRight");
			}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 871 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxPubRight" \
			    : "\\cxxLinkPubRight");
			}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 876 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxPriright" \
			    : "\\cxxLinkPriright");
			}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 881 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxProright" \
			    : "\\cxxLinkProright");
			}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 886 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxPubright" \
			    : "\\cxxLinkPubright");
			}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 891 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstPriright" \
			    : "\\cxxLinkPriright");
			}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 896 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstProright" \
			    : "\\cxxLinkProright");
			}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 901 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstPubright" \
			    : "\\cxxLinkPubright");
			}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 906 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstPriRight" \
			    : "\\cxxLinkPriRight");
			}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 911 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstProRight" \
			    : "\\cxxLinkProRight");
			}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 916 "doc2tex.ll"
{
			fprintf(out, upArrows ? "\\cxxFirstPubRight" \
			    : "\\cxxLinkPubRight");
			}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 920 "doc2tex.ll"
ECHO;
	YY_BREAK
#line 2689 "doc2tex.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Code):
			case YY_STATE_EOF(Verb):
			case YY_STATE_EOF(Ref):
			case YY_STATE_EOF(texmode):
			case YY_STATE_EOF(URL):
			case YY_STATE_EOF(Link):
			case YY_STATE_EOF(Image):
			case YY_STATE_EOF(ImageArg1):
			case YY_STATE_EOF(ImageArg2):
			case YY_STATE_EOF(Label):
			case YY_STATE_EOF(Listing):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(LVerb):
			case YY_STATE_EOF(ShortComment):
			case YY_STATE_EOF(RealComment):
			case YY_STATE_EOF(Graph):
			case YY_STATE_EOF(texverbatim):
			case YY_STATE_EOF(TeXlist):
			case YY_STATE_EOF(HTMLlist):
			case YY_STATE_EOF(HTML):
			case YY_STATE_EOF(HTMLverbatim):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed doc2texYYin at a new source and called
			 * doc2texYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = doc2texYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( doc2texYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * doc2texYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of doc2texYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			doc2texYYrestart(doc2texYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) doc2texYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 578 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 578 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 577);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up doc2texYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					doc2texYYrestart(doc2texYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( doc2texYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve doc2texYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void doc2texYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        doc2texYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            doc2texYY_create_buffer(doc2texYYin,YY_BUF_SIZE );
	}

	doc2texYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	doc2texYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void doc2texYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		doc2texYYpop_buffer_state();
	 *		doc2texYYpush_buffer_state(new_buffer);
     */
	doc2texYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	doc2texYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (doc2texYYwrap()) processing, but the only time this flag
	 * is looked at is after doc2texYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void doc2texYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	doc2texYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE doc2texYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) doc2texYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in doc2texYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) doc2texYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in doc2texYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	doc2texYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with doc2texYY_create_buffer()
 * 
 */
    void doc2texYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		doc2texYYfree((void *) b->yy_ch_buf  );

	doc2texYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a doc2texYYrestart() or at EOF.
 */
    static void doc2texYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	doc2texYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then doc2texYY_init_buffer was _probably_
     * called from doc2texYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void doc2texYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		doc2texYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void doc2texYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	doc2texYYensure_buffer_stack();

	/* This block is copied from doc2texYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from doc2texYY_switch_to_buffer. */
	doc2texYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void doc2texYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	doc2texYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		doc2texYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void doc2texYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)doc2texYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in doc2texYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)doc2texYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in doc2texYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE doc2texYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) doc2texYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in doc2texYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	doc2texYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to doc2texYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       doc2texYY_scan_bytes() instead.
 */
YY_BUFFER_STATE doc2texYY_scan_string (yyconst char * yystr )
{
    
	return doc2texYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to doc2texYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE doc2texYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) doc2texYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in doc2texYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = doc2texYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in doc2texYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up doc2texYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		doc2texYYtext[doc2texYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = doc2texYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		doc2texYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int doc2texYYget_lineno  (void)
{
        
    return doc2texYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *doc2texYYget_in  (void)
{
        return doc2texYYin;
}

/** Get the output stream.
 * 
 */
FILE *doc2texYYget_out  (void)
{
        return doc2texYYout;
}

/** Get the length of the current token.
 * 
 */
int doc2texYYget_leng  (void)
{
        return doc2texYYleng;
}

/** Get the current token.
 * 
 */

char *doc2texYYget_text  (void)
{
        return doc2texYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void doc2texYYset_lineno (int  line_number )
{
    
    doc2texYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see doc2texYY_switch_to_buffer
 */
void doc2texYYset_in (FILE *  in_str )
{
        doc2texYYin = in_str ;
}

void doc2texYYset_out (FILE *  out_str )
{
        doc2texYYout = out_str ;
}

int doc2texYYget_debug  (void)
{
        return doc2texYY_flex_debug;
}

void doc2texYYset_debug (int  bdebug )
{
        doc2texYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from doc2texYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    doc2texYYin = stdin;
    doc2texYYout = stdout;
#else
    doc2texYYin = (FILE *) 0;
    doc2texYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * doc2texYYlex_init()
     */
    return 0;
}

/* doc2texYYlex_destroy is for both reentrant and non-reentrant scanners. */
int doc2texYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		doc2texYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		doc2texYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	doc2texYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    doc2texYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * doc2texYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *doc2texYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *doc2texYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void doc2texYYfree (void * ptr )
{
	free( (char *) ptr );	/* see doc2texYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 920 "doc2tex.ll"



static void initLatex()
{
    char ch;
    int	 i;

    if(texFile.length() > 0)
	{
	ifstream env(texFile.c_str());
	if(env)
	    {
	    while(env)
		{
		env.get(ch);		// "env >> ch;" never returns whitespaces and special chars!!!
		putc(ch, out);
		}
	    if(!noLatex)
		{
		if(generateIndex)
		    fprintf(out, "\\makeindex\n");

		for(i = 0; i < texPackages.size(); i++)
		    fprintf(out, "\\usepackage{%s}\n", texPackages[i]->c_str());

		fprintf(out, "\\usepackage{docxx}\n");
		fprintf(out, "\\begin{document}\n");
		fprintf(out, "\\pagebreak\n");
		fprintf(out, "\\sloppy\n");
		}
	    }
	else
	    cerr << "could not open " << texFile.c_str() << endl;
	}
    else
	if(!noLatex)
	    {
	    fprintf(out, "\\documentclass");
	    if(texOption.length() > 0)
		fprintf(out, "[%s]", texOption.c_str());
	    fprintf(out, "{article}\n");

	    if(generateIndex)
		fprintf(out, "\\makeindex\n");

	    for(i = 0; i < texPackages.size(); i++)
		fprintf(out, "\\usepackage{%s}\n", texPackages[i]->c_str());

	    fprintf(out, "\\usepackage{docxx}\n");
	    fprintf(out, "\\begin{document}\n");
	    fprintf(out, "\\pagebreak\n");
	    fprintf(out, "\\sloppy\n");
	    }

    if(texTitle.length() > 0 && !noLatex)
	{
	ifstream title(texTitle.c_str());

	if(title)
	    while(title)
		{
		title.get(ch);
		putc(ch, out);
		}
	else
	    cerr << "could not open " << texTitle.c_str() << endl;
	}
}

static void finitLatex()
{
    char indName[50];
    char *p;
    FILE *file;

    if(!noLatex)
	{
 	if(!onlyClassGraph && generateIndex && texOutputName.length() > 0)
 	    {
 	    strcpy((char *)&indName, texOutputName.c_str());
 
 	    p = strrchr((char *)&indName, '.');

 	    if(p) 
 		*p = '\0';

 	    strcat((char *)&indName, ".ind");

 	    fprintf(out, "\\label{Index}\n");
 	    fprintf(out, "\\input %s\n", (char *)&indName);

 	    file = fopen((char *)&indName, "r");

 	    if(!file)
 		file = fopen((char *)&indName, "w");

 	    if(file)
 		fclose(file);
 	    }

	fprintf(out, "\\end{document}\n");
	}
}

void listing(char *str)
{
    inPos = 0;
    inStr = str;
    skip = 1;

    initLatex();
    doc2texYYrestart(0);
    BEGIN(Listing);
    doc2texYYlex();
    finitLatex();
}

static void printCode(Entry *cur, const char *str)
{
    inPos = 0;
    inStr = str;
    current = cur;
    if(cur && cur->section == MANUAL_SEC)
	{
	printYYDOC(cur, str);
	return;
	}
    doc2texYYrestart(0);
    BEGIN(Code);
    doc2texYYlex();
}

static void printCode(Entry *cur, const McString& str)
{
    printCode(cur, str.c_str());
}

void printYYDOC(Entry *cur, const char *str, int escapePrcnt)
{
    if(strlen(str) > 0)
	{
	inPos = 0;
	inStr = str;
	current = cur;
	escapePercent = escapePrcnt;

	doc2texYYrestart(0);
	BEGIN(HTMLsyntax ? HTML : 0);
	doc2texYYlex();
	}

    escapePercent = 0;
}

void printYYDOC(Entry *cur, const McString& str, int escapePrcnt)
{
    printYYDOC(cur, str.c_str(), escapePrcnt);
}

char *getEntryName(Entry *entry)
{
    McString *name;

    if(entry->fromUnknownPackage && entry->parent)
	{
	name = new McString(getEntryName (entry->parent));

	if(name->length() > 0)
	    *name += ".";

	*name += entry->name;

	return *name;
	}
    else
	return entry->name;
}

static void dumpCxxItem(Entry *tmp)
{
    fprintf(out, "{");
    printCode(tmp, tmp->type);
    fprintf(out, "}\n        {");
    printCode(tmp, getEntryName(tmp));
    fprintf(out, "}\n        {");
    printCode(tmp, tmp->args);
    fprintf(out, "}\n        {");

    printYYDOC(tmp, tmp->memo.c_str());
    fprintf(out, "}\n        {");
    if(MAKE_DOC(tmp))
	{
	tmp->dumpNumber(out);
	fprintf(out, "}\n");
	}
    else
	{
	fprintf(out, "}\n");
	fprintf(out, "\\label{cxx.");
	tmp->dumpNumber(out);
	fprintf(out, "}\n");
	}
}

static int baseDepth(Entry *entry, int n = 1)
{
    if(!HAS_BASES(entry))
	return n;

    int i, j, nn;
    nn = n + 1;

    for(i = 0 ; i < entry->pubBaseclasses.size(); ++i)
	{
	j = baseDepth(entry->pubBaseclasses[i], n + 1);
	if(j > nn)
	    nn = j;
	}
    for(i = 0 ; i < entry->proBaseclasses.size(); ++i)
	{
	j = baseDepth(entry->proBaseclasses[i], n + 1);
	if(j > nn)
	    nn = j;
	}

    return nn;
}

void printYYGraph(const McString& str)
{
    inPos = 0;
    inStr = str.c_str();

    doc2texYYrestart(0);
    BEGIN(Graph);
    doc2texYYlex();
}

static void dumpInheritanceEntry(ClassGraph *cls)
{
    int i;

    fprintf(out, "\\cxxInheritanceEntry{");
	for(i = 0 ; i < cls->indent; ++i)
	    fprintf(out, "\\cxxNone");
    printYYGraph(cls->before);
    fprintf(out, "}{");

    if(cls->entry)
	if(!cls->entry->fromUnknownPackage && !onlyClassGraph)
	    cls->entry->dumpNumber(out);
    fprintf(out, "}{");

    if(cls->entry)
	printCode(cls->entry, getEntryName (cls->entry));
    else
	printCode(0, cls->name.c_str());
    
    fprintf(out, "}{");

    printYYGraph(cls->after);
    fprintf(out, "}\n");
}

static void dumpHierarchy(Entry *entry)
{
    int i;
    ClassGraph *cls;
    ClassGraph cg(entry, 0);
    cg.addBases();
    cg.addDirectChilds();

    fprintf(out, "\\begin{cxxInheritance}\n");
    fprintf(out, "\\paragraph{Inheritance}\\strut\\smallskip\\strut\\\\\n");

    for(cls = cg.firstLine; cls != &cg; cls = cls->nextLine)
	dumpInheritanceEntry(cls);

    fprintf(out, "\\cxxInheritanceEntry[x]{");
    for(i = 0; i < cls->indent; ++i)
	fprintf(out, "\\cxxNone");
    fprintf(out, "}{");

    if(cls->entry)
	if(!cls->entry->fromUnknownPackage && !onlyClassGraph)
	    cls->entry->dumpNumber(out);
    fprintf(out, "}{");
    if(cls->entry)
	printCode(cls->entry, getEntryName(cls->entry));
    else
	printCode(0, cls->name.c_str());
    
    fprintf(out, "}{");
    fprintf(out, "}\n");

    for(cls = cls->nextLine; cls; cls = cls->nextLine)
	dumpInheritanceEntry(cls);

    fprintf(out, "\\end{cxxInheritance}\n");
}

static char *checkStr(const char *str)
{
    char *new_str = (char *)malloc(strlen(str) + 1);
    char *return_str = new_str;
    bool sep_flag = false;

    strcpy(new_str, str);

    while(*new_str != '\0')
	if(*new_str == '\n')
	    strcpy(new_str, new_str + 1);
	else
	    {
	    if(*new_str == ' ')
		sep_flag = true;

	    new_str++;
	    }

    new_str = return_str;

    if(!sep_flag)
	{
	return_str = (char *)malloc(strlen(new_str) + 2);
	strcpy(return_str, new_str);
	strcat(return_str, " ");
	strcpy(new_str, return_str);
	}

    return_str = (char *)malloc(strlen(new_str) + 2);
    strcpy(return_str, new_str);
    strcat(return_str, "\n");

    return return_str;
}

static void dumpTeXList(Entry *entry, int *fields, McDArray<McString *> list,
			char *description)
{
    int i;

    if(list.size() > 0)
	{
	fprintf(out, "\\cxx%s{\n", description);
	fprintf(out, "\\begin{tabular}[t]{lp{0.5\\textwidth}}\n");

	for(i = 0; i < list.size(); ++i)
	    {
	    if(i)
		fprintf(out, "\\\\\n");
	    fprintf(out, "{\\tt\\strut ");
	    inPos = 0;
	    inStr = checkStr(list[i]->c_str());
	    current = entry;
	    doc2texYYrestart(0);
	    BEGIN(HTMLsyntax ? HTMLlist : TeXlist);
	    doc2texYYlex();
	    }
	fprintf(out, "\\end{tabular}}\n");
	(*fields)++;
	}
}

static void dumpTeXField(Entry *entry, int *fields, McString text, char *description)
{
    if(text.length() > 0)
	{
	fprintf(out, "\\cxx%s{\n", description);
	inPos = 0;
	inStr = text.c_str();
	current = entry;
	doc2texYYrestart(0);
	BEGIN(HTMLsyntax ? HTML : 0);
	doc2texYYlex();
	fprintf(out, "\\strut}\n");
	(*fields)++;
	}
}

static int dumpFields(Entry *entry)
{
    int	i, fields = 0;

    dumpTeXList(entry, &fields, entry->invariant, "Invariants");
    dumpTeXList(entry, &fields, entry->exception, "Exceptions");
    dumpTeXList(entry, &fields, entry->param, "Parameter");
    dumpTeXList(entry, &fields, entry->retrn, "Return");
    dumpTeXList(entry, &fields, entry->precondition, "Preconditions");
    dumpTeXList(entry, &fields, entry->postcondition, "Postconditions");

    dumpTeXField(entry, &fields, entry->author, "Author");
    dumpTeXField(entry, &fields, entry->version, "Version");
    dumpTeXField(entry, &fields, entry->deprecated, "Deprecated");
    dumpTeXField(entry, &fields, entry->since, "Since");

    if(entry->see.size())
	{
	fprintf(out, "\\cxxSee{");
	for(i = 0; i < entry->see.size(); ++i)
	    {
	    if(i)
		fprintf(out, "\\\\\n");
	    if(HTMLsyntax)
		fprintf(out, "{\\tt\\strut ");
	    inPos = 0;
	    inStr = entry->see[i]->c_str();
	    current = entry;
	    doc2texYYrestart(0);
	    BEGIN(HTMLsyntax ? HTMLlist : Code);
	    doc2texYYlex();
	    Entry *ref = getRefEntry(*entry->see[i], current);
	    if(ref)
		{
		fprintf(out, " ($\\rightarrow$");
		if(MAKE_DOC(ref))
		    {
		    ref->dumpNumber(out);
		    fprintf(out, ",");
		    }
		fprintf(out, " {\\em page \\pageref{cxx.");
		ref->dumpNumber(out);
		fprintf(out, "}})");
		}
	    }
	fprintf(out, "\\strut}\n");
	fields++;
	}

    return fields;
}

static void strlatex(char *s1, const char *s2)
{
    for(;; ++s2)
	{
	if((*s2) == '\0')
	    {
	    *s1 = *s2;
	    break;
	    }
	if((*s2) == '_')
	    {
	    *s1 = '\\';
	    ++s1;
	    }
	*s1 = *s2;++s1;
	}
}

void dumpEntry(Entry *entry)
{
    Entry *tmp;
    Entry *stack[20];
    int	fields;
    int	stack_cnt = 0;
    char *sectionType = 0;

    if(entry->fromUnknownPackage)
	return;

    if(generateIndex)
	{
 	fprintf(out, "\\index{");
     	tmp = entry;

     	while(tmp->parent)
	    {
 	    stack[stack_cnt++] = tmp;
 	    tmp = tmp->parent;
     	    }

     	while(stack_cnt)
     	    {
    	    tmp = stack[--stack_cnt];

 	    printYYDOC(tmp, tmp->name, 0);

 	    if(stack_cnt)
 		fprintf(out, "!");
     	    }

     	fprintf(out, "}\n");

     	switch(entry->section)
	    {
     	    case VARIABLE_SEC:
 		sectionType = "Variables/Constants";
 		break;
     	    case FUNCTION_SEC:
 		sectionType = "Functions/Methods";
 		break;
    	    case MACRO_SEC:
 		sectionType = "Macros";
 		break;
    	    case CLASS_SEC:
 		sectionType = "Classes";
 		break;
     	    case INTERFACE_SEC:
 		sectionType = "Interfaces";
 		break;
     	    case UNION_SEC:
 		sectionType = "Unions";
 		break;
     	    case NAMESPACE_SEC:
 		sectionType = "Namespaces";
 		break;
     	    default:
 		sectionType = (char *)0;
 	    }

 	if(sectionType)
 	    {
	    if(!(entry->section & CLASS_SEC) &&
		!(entry->section & INTERFACE_SEC) &&
		(entry->section != NAMESPACE_SEC))
		{
 	    	fprintf(out, "\\index{{\\bf %s}!", sectionType);
		printYYDOC(entry->parent, entry->parent->name, 0);
		fprintf(out, "!");
 	    	printYYDOC(entry, entry->name, 0);
 	    	fprintf(out, "}\n");
		}
	    else
		{
 	    	fprintf(out, "\\index{{\\bf %s}!", sectionType);
 	    	printYYDOC(entry, entry->name, 0);
 	    	fprintf(out, "}\n");
		}
 	    }
	}

    switch(entry->section)
	{
	case VARIABLE_SEC:
	    fprintf(out, "\\begin{cxxvariable}\n");
	    break;
	case FUNCTION_SEC:
	    fprintf(out, "\\begin{cxxfunction}\n");
	    break;
	case MACRO_SEC:
	    fprintf(out, "\\begin{cxxmacro}\n");
	    break;
	case CLASS_SEC:
	    fprintf(out, "\\begin{cxxclass}\n");
	    break;
	case INTERFACE_SEC:
	    fprintf(out, "\\begin{cxxinterface}\n");
	    break;
	case UNION_SEC:
	    fprintf(out, "\\begin{cxxunion}\n");
	    break;
	case NAMESPACE_SEC:
	    fprintf(out, "\\begin{cxxnamespace}\n");
	    break;
	default:
	    fprintf(out, "\\begin{cxxentry}\n");
	    break;
	}

    dumpCxxItem(entry);

    char file_name[BUFSIZ];
    strlatex(file_name, entry->file.c_str());
    if(showFilenames &&
	entry->section != PACKAGE_SEC &&
	entry->section != MANUAL_SEC)
	fprintf(out, "In file %s:%d \\\\\n", (const char *)file_name, entry->startLine);

    fields = dumpFields(entry);

    if(HAS_BASES(entry) || entry->pubChilds.size() || entry->proChilds.size())
	dumpHierarchy(entry);

    if(entry->sub)
	if((entry->section & INTERFACE_SEC) || (entry->section & CLASS_SEC))
	    {
	    for(tmp = entry->sub; tmp; tmp = tmp->next)
		if(tmp->protection == PUBL)
		    {
		    fprintf(out, "\\begin{cxxpublic}\n");
		    for(tmp = entry->sub; tmp; tmp = tmp->next)
			if(tmp->protection == PUBL)
			    {
			    fprintf(out, "\\cxxitem");
			    dumpCxxItem(tmp);
			    }
		    fprintf(out, "\\end{cxxpublic}\n");
		    break;
		    }
	    for(tmp = entry->sub; tmp; tmp = tmp->next)
		if(tmp->protection == PROT)
		    {
		    fprintf(out, "\\begin{cxxprotected}\n");
		    for(tmp = entry->sub; tmp; tmp = tmp->next)
			if(tmp->protection == PROT)
			    {
			    fprintf(out, "\\cxxitem");
			    dumpCxxItem(tmp);
			    }
		    fprintf(out, "\\end{cxxprotected}\n");
		    break;
		    }
	    if(withPrivate)
		{
		for(tmp = entry->sub; tmp; tmp = tmp->next)
		    if(tmp->protection == PRIV)
			{
			fprintf(out, "\\begin{cxxprivate}\n");
			for(tmp = entry->sub; tmp; tmp = tmp->next)
			    if(tmp->protection == PRIV)
				{
				fprintf(out, "\\cxxitem");
				dumpCxxItem(tmp);
				}
			fprintf(out, "\\end{cxxprivate}\n");
			break;
			}
		}
	    }
	else
	    if(!hideIndexOnEverySection)
		{
		fprintf(out, "\\begin{cxxnames}\n");
	    
		for(tmp = entry->sub; tmp; tmp = tmp->next)
		    {
		    fprintf(out, "\\cxxitem");
		    dumpCxxItem(tmp);
		    }
		fprintf(out, "\\end{cxxnames}\n");
		}

    if(entry->doc.length())
	{
	fprintf(out, "\\begin{cxxdoc}\n");
	printYYDOC(entry, entry->doc, 0);
	fprintf(out, "\n\\end{cxxdoc}\n");
	}

    for(tmp = entry->sub; tmp; tmp = tmp->next)
	if(tmp->protection == PUBL && MAKE_DOC(tmp))
	    dumpEntry(tmp);

    for(tmp = entry->sub; tmp; tmp = tmp->next)
	if(tmp->protection == PROT && MAKE_DOC(tmp))
	    dumpEntry(tmp);

    if(withPrivate)
	for(tmp = entry->sub; tmp; tmp = tmp->next)
	    if(tmp->protection == PRIV && MAKE_DOC(tmp))
		dumpEntry(tmp);

    switch(entry->section)
	{
	case VARIABLE_SEC:
	    fprintf(out, "\\end{cxxvariable}\n");
	    break;
	case FUNCTION_SEC:
	    fprintf(out, "\\end{cxxfunction}\n");
	    break;
	case UNION_SEC:
	    fprintf(out, "\\end{cxxunion}\n");
	    break;
	case MACRO_SEC:
	    fprintf(out, "\\end{cxxmacro}\n");
	    break;
	case CLASS_SEC:
	    fprintf(out, "\\end{cxxclass}\n");
	    break;
	case INTERFACE_SEC:
	    fprintf(out, "\\end{cxxinterface}\n");
	    break;
	case NAMESPACE_SEC:
	    fprintf(out, "\\end{cxxnamespace}\n");
	    break;
	default:
	    fprintf(out, "\\end{cxxentry}\n");
	    break;
	}
}

static int atMostDepth(Entry *tmp, int depth)
{
    if(depth && tmp)
	return atMostDepth(tmp->parent, depth - 1);

    return !tmp;
}

static bool relevantContents(Entry *tmp)
{
    for(tmp = tmp->sub; tmp; tmp = tmp->next)
	if(MAKE_DOC(tmp) && (atMostDepth(tmp, depthTOC + 1) ||
	    (tmp->section & CLASS_SEC) ||
	    tmp->section == UNION_SEC ||
	    tmp->section == MANUAL_SEC ||
	    (tmp->section & INTERFACE_SEC) ||
	    tmp->section == PACKAGE_SEC ||
	    tmp->section == NAMESPACE_SEC))
	    return true;
    return false;
}

static void dumpContents(Entry *tmp)
{
    for(tmp = tmp->sub; tmp; tmp = tmp->next)
	if(MAKE_DOC(tmp) && (atMostDepth(tmp, depthTOC + 1) ||
	    (tmp->section & CLASS_SEC) ||
	    tmp->section == UNION_SEC ||
	    tmp->section == MANUAL_SEC ||
	    (tmp->section & INTERFACE_SEC) ||
	    tmp->section == PACKAGE_SEC ||
	    tmp->section == NAMESPACE_SEC))
	    {
	    fprintf(out, "\\cxxContentsEntry{");
	    tmp->dumpNumber(out);
	    fprintf(out, "}{");
	    printCode(tmp, getEntryName(tmp));
	    fprintf(out, "}{");
	    printYYDOC(tmp, tmp->memo.c_str());
	    fprintf(out, "}\n");
	    if(tmp->sub && relevantContents(tmp))
		{
		fprintf(out, "\\begin{cxxContents}\n");
		dumpContents(tmp);
		fprintf(out, "\\end{cxxContents}\n");
		}
	    }
}

static void dumpClassGraph(Entry *entry)
{
    ClassGraph cg(entry, 0);
    ClassGraph *cls = &cg;
    cg.addBases();
    cg.addAllChilds();

    fprintf(out, "\\strut\\\\[5pt]\\goodbreak\n");

    if((cls->entry->fromUnknownPackage) || (onlyClassGraph))
    	fprintf(out, "\\cxxClassGraphEntryUnknownPackage{");
    else
	{
    	fprintf(out, "\\cxxClassGraphEntry{");

   	fprintf(out, "}{");
	cls->entry->dumpNumber(out);
	}

    fprintf(out, "}{");
    printCode(cls->entry, getEntryName(cls->entry));

    fprintf(out, "}{");
    fprintf(out, "}\n");

    for(cls = cls->nextLine; cls; cls = cls->nextLine)
	{
	if((cls->entry->fromUnknownPackage) || (onlyClassGraph))
	    fprintf(out, "\\cxxClassGraphEntryUnknownPackage{");
	else
	    fprintf(out, "\\cxxClassGraphEntry{");

	for(int i = 0; i < cls->indent; ++i)
	    fprintf(out, "\\cxxNone");

	printYYGraph(cls->before);

	if((!cls->entry->fromUnknownPackage) && (!onlyClassGraph))
	    {
	    fprintf(out, "}{");

	    cls->entry->dumpNumber(out);
	    }

	fprintf(out, "}{");

	printCode(cls->entry, getEntryName (cls->entry));

	fprintf(out, "}{");
	fprintf(out, "}\n");
	}
}

static void dumpClassGraphs(Entry *tmp)
{
    for(; tmp; tmp = tmp->next)
	{
	if((tmp->section & CLASS_SEC) &&
	    tmp->proBaseclasses.size() == 0 &&
	    tmp->pubBaseclasses.size() == 0)
	    {
	    tmp->currentParent = 0;
	    dumpClassGraph(tmp);
	    }
	dumpClassGraphs(tmp->sub);
	}
}

void usermanTeX(char *str, Entry *root)
{
    Entry *tmp;

    initLatex();

    if(root->sub && root->sub->next == 0 && root->sub->section == MANUAL_SEC)
	{
	root = root->sub;
	root->parent = 0;
	}

    if(!onlyClassGraph)
	{
    	if(root->name.length())
	    {
	    dumpFields(root);
	    fprintf(out, "\\cxxTitle");
	    dumpCxxItem(root);
    	    }

	fprintf(out, "\\begin{cxxContents}\n");
    	dumpContents(root);
	if(!noClassGraph && relevantClassGraphs(root))
    	    fprintf(out, "\\cxxContentsEntry{}{Class Graph}{}");
    	fprintf(out, "\\end{cxxContents}\n");

    	if(root->name.length())
    	    {
	    fprintf(out, "\\clearpage\\pagebreak\n");

	    if(root->doc.length())
		{
	    	fprintf(out, "\\begin{cxxdoc}\n");
	    	printYYDOC(root, root->doc, 0);
	    	fprintf(out, "\n\\end{cxxdoc}\n");
		}
    	    }

    	for(tmp = root->sub; tmp; tmp = tmp->next)
	    dumpEntry(tmp);
	}

    if(!noClassGraph && relevantClassGraphs(root))
	{
	fprintf(out, "\\begin{cxxClassGraph}\n");
	fprintf(out, "\\label{cxx.}\n");
	root->currentParent = 0;
	dumpClassGraphs(root);
	fprintf(out, "\\end{cxxClassGraph}\n");
	}

    finitLatex();
}

