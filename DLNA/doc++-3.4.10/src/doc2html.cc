
#line 3 "doc2html.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer doc2htmlYY_create_buffer
#define yy_delete_buffer doc2htmlYY_delete_buffer
#define yy_flex_debug doc2htmlYY_flex_debug
#define yy_init_buffer doc2htmlYY_init_buffer
#define yy_flush_buffer doc2htmlYY_flush_buffer
#define yy_load_buffer_state doc2htmlYY_load_buffer_state
#define yy_switch_to_buffer doc2htmlYY_switch_to_buffer
#define yyin doc2htmlYYin
#define yyleng doc2htmlYYleng
#define yylex doc2htmlYYlex
#define yylineno doc2htmlYYlineno
#define yyout doc2htmlYYout
#define yyrestart doc2htmlYYrestart
#define yytext doc2htmlYYtext
#define yywrap doc2htmlYYwrap
#define yyalloc doc2htmlYYalloc
#define yyrealloc doc2htmlYYrealloc
#define yyfree doc2htmlYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE doc2htmlYYrestart(doc2htmlYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int doc2htmlYYleng;

extern FILE *doc2htmlYYin, *doc2htmlYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up doc2htmlYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up doc2htmlYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via doc2htmlYYrestart()), so that the user can continue scanning by
	 * just pointing doc2htmlYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when doc2htmlYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int doc2htmlYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow doc2htmlYYwrap()'s to do buffer switches
 * instead of setting up a fresh doc2htmlYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void doc2htmlYYrestart (FILE *input_file  );
void doc2htmlYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE doc2htmlYY_create_buffer (FILE *file,int size  );
void doc2htmlYY_delete_buffer (YY_BUFFER_STATE b  );
void doc2htmlYY_flush_buffer (YY_BUFFER_STATE b  );
void doc2htmlYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void doc2htmlYYpop_buffer_state (void );

static void doc2htmlYYensure_buffer_stack (void );
static void doc2htmlYY_load_buffer_state (void );
static void doc2htmlYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER doc2htmlYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE doc2htmlYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE doc2htmlYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE doc2htmlYY_scan_bytes (yyconst char *bytes,int len  );

void *doc2htmlYYalloc (yy_size_t  );
void *doc2htmlYYrealloc (void *,yy_size_t  );
void doc2htmlYYfree (void *  );

#define yy_new_buffer doc2htmlYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        doc2htmlYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            doc2htmlYY_create_buffer(doc2htmlYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        doc2htmlYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            doc2htmlYY_create_buffer(doc2htmlYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *doc2htmlYYin = (FILE *) 0, *doc2htmlYYout = (FILE *) 0;

typedef int yy_state_type;

extern int doc2htmlYYlineno;

int doc2htmlYYlineno = 1;

extern char *doc2htmlYYtext;
#define yytext_ptr doc2htmlYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up doc2htmlYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	doc2htmlYYleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 135
#define YY_END_OF_BUFFER 136
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[564] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  128,  128,    0,    0,
        0,    0,    0,    0,  128,  128,  128,  128,  128,  128,
      136,  135,  134,  122,   69,  121,  120,  117,  118,  119,
      122,   39,   39,   39,   37,   38,  116,  116,   42,   42,
       42,   49,   49,   49,   45,   45,   45,  130,  131,  129,
      128,  128,  135,  134,   11,  135,  134,  135,  135,  134,
      135,  132,  133,  114,  128,  112,  113,  133,  132,  132,
      115,  132,  124,  132,   66,   32,   31,    0,   36,   35,
        0,    0,   46,  129,  129,  128,  128,    0,   11,    0,

        0,    9,    8,    0,    0,   10,    0,  126,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
      108,    0,  106,  110,  111,    0,  105,    0,   44,  125,
        0,  109,    0,    0,    0,    0,    0,    0,    0,    0,
       33,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   47,   76,   86,
       90,   96,   75,   82,   89,   95,   83,   79,    0,   85,
       88,   94,  100,   74,   81,   87,   93,   99,   84,  102,
       73,   80,  101,    0,    0,    0,    0,    0,    0,  103,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   29,   13,
        0,    0,   15,    0,    0,    0,    0,    0,   27,    0,
        0,    0,   12,    0,    7,    6,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   34,    0,   72,   71,    0,
        0,    0,   62,    0,    0,    6,   78,   92,   98,   77,
       91,   97,    0,    0,    0,    0,   29,   13,    0,    0,
       15,    0,    0,    0,  104,    0,   27,    0,    0,    0,

        0,    0,    1,    0,    0,    0,    4,    0,    0,    0,
        0,   14,    0,    0,    0,    0,    0,    0,   70,   65,
        0,    0,    0,   26,   25,    0,    0,    0,   24,    0,
        0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
        0,    2,  107,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   26,   25,   23,   22,    0,   24,
       21,    0,   20,   17,    0,    0,    0,    0,    5,    0,
        3,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   30,   16,   28,   23,
       22,    0,   21,    0,   20,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   30,   16,   28,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   54,    0,    0,    0,    0,    0,
        0,    0,   18,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   60,  127,    0,   18,   68,    0,   43,   50,    0,
       53,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   19,    0,    0,    0,    0,    0,
        0,    0,   59,    0,    0,    0,   63,   56,    0,   19,
        0,    0,   48,   41,    0,    0,    0,   40,    0,   58,
        0,   61,    0,   51,   55,    0,    0,   67,    0,   57,
      123,   64,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    7,    8,    9,   10,    1,
        1,   11,    1,    1,    1,   12,    1,   12,   12,   12,
       13,   12,   12,   12,   12,   12,   12,   14,    1,   15,
        1,   16,    1,   17,   18,   12,   19,   20,   21,   12,
       22,   23,   24,   12,   12,   25,   26,   12,   27,   12,
       12,   28,   12,   29,   30,   12,   12,   31,   12,   12,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   12,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   12,   59,
       60,   61,   62,   63,   64,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        1,    4,    4,    5,    1,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    6,    1,    4,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    7
    } ;

static yyconst flex_int16_t yy_base[589] =
    {   0,
      980,  979,    0,    3,    7,    8,   19,   39,   14,   17,
       18,   23,   24,   26,  978,  977,   72,  136,   27,   28,
       29,   34,   50,   59,  200,  264,   87,  115,   92,  156,
      979,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      936,  984,  984,    2,  984,  984,  984,  984,  984,  984,
      935,  984,  984,  934,  984,  984,  941,  984,  984,    0,
       32,    0,  910,  909,  984,  938,  937,   35,  936,  935,
      906,  984,  984,  984,    0,  984,  984,  108,  262,  950,
      925,  958,  984,  325,  984,  162,  984,  914,  984,  984,
      913,  912,  984,    0,    0,   46,    0,  897,  984,  926,

       53,  984,  984,  925,  896,  984,  119,  984,   95,  129,
      919,  914,  927,  131,  903,  314,  905,  910,  944,  984,
      984,  201,  984,  984,  984,   87,  984,  151,  984,  984,
      200,  984,  264,  908,  887,   67,  900,  228,  892,  327,
      984,  358,  180,  417,  905,  904,  903,  197,  261,  904,
      899,  916,  900,  898,  353,  892,  894,  984,  984,  984,
      984,  984,  984,  984,  984,  984,  984,  984,   69,  984,
      984,  984,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  984,  892,  148,  883,  893,  887,  890,  984,
      166,  364,  181,  374,  130,   76,  888,  881,  878,  871,

      871,  888,  136,  194,  863,  862,  861,  274,  257,  880,
      859,  261,  872,  881,  413,  868,  871,  245,  870,  851,
      850,  868,  850,  861,  861,  370,  426,    9,  845,  844,
      843,  842,  841,  840,  881,  858,  873,  846,  307,  308,
      848,  854,  311,  843,  842,  857,  830,  843,  318,  834,
      849,  848,  984,  381,  984,  984,  841,  824,  853,  822,
      828,  824,  836,  832,  337,  984,  831,  984,  984,  818,
      395,  837,  846,  411,  387,  984,  984,  984,  984,  984,
      984,  984,  856,  834,  853,  830,  340,  401,  817,  830,
      442,  827,  824,  821,  984,  808,  450,  825,  813,  812,

      802,  799,  984,  828,  799,  796,  984,  818,  462,  816,
      795,  467,  814,  813,  804,  805,  796,  813,  984,  984,
      807,  793,  792,  475,  476,  826,  804,  795,  479,  802,
      791,  794,  480,  787,  783,  789,  774,  773,  794,  483,
      488,  984,  984,  453,  496,  785,  779,  776,  775,  789,
      791,  767,  766,  765,  499,  500,  503,  504,  775,  508,
      511,  769,  512,  515,  785,  785,  784,  757,  984,  756,
      984,  775,  516,  776,  775,  191,  768,  759,  776,  771,
      756,  771,  761,  754,  759,  750,  519,  520,  523,  526,
      527,  750,  530,  750,  531,  766,  747,  748,  747,  750,

      744,  741,  198,  740,  754,  756,  740,  751,  738,  749,
      745,  743,  740,  534,  535,  538,  745,  740,  729,  738,
      729,  744,  725,  740,  730,  740,  739,  721,  726,  717,
      734,  718,  725,  716,  370,  708,  730,  704,  694,  706,
      697,  707,  689,  696,  680,  686,  671,  665,  563,  561,
      558,  567,  539,  550,  563,  558,  553,  556,  543,  550,
      553,  545,  543,  532,  546,  536,  543,  534,  533,  540,
      385,  524,  546,  527,  984,  526,  525,  536,  532,  511,
      510,  511,  539,  507,  540,  506,  523,  503,  514,  527,
      525,  510,  518,  499,  455,  437,  440,  428,  428,  405,

      408,  984,  984,  406,  544,  984,  545,  984,  984,  389,
      984,  358,  355,  350,  356,  359,  354,  330,  309,  319,
      308,  292,  287,  291,  551,  291,  297,  294,  253,  250,
      248,  255,  984,  226,  212,  206,  984,  984,  181,  555,
      172,  148,  132,  984,  119,  119,  510,  984,  110,  984,
      111,  984,   63,  984,  984,   55,  514,  984,    1,  984,
      984,  984,  984,  609,  616,  623,  630,  637,  644,  651,
      658,  665,  672,  679,    9,  684,  686,  691,  698,  705,
      712,  719,  726,  732,  739,  746,  753,  760
    } ;

static yyconst flex_int16_t yy_def[589] =
    {   0,
      564,  564,  565,  565,  566,  566,  565,  565,  567,  567,
      568,  568,  569,  569,  564,  564,  570,  570,  571,  571,
      572,  572,  573,  573,  574,  574,   26,   26,   26,   26,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  575,
      576,  577,  578,  578,  563,  579,  579,  563,  580,  580,
      563,  563,  563,  563,  577,  563,  563,  563,  563,  563,
      563,  581,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  575,  575,  576,  577,  578,  563,  579,

      563,  563,  563,  580,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  581,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  144,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  582,  583,  584,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  582,  563,  583,  563,  584,  563,  563,  585,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  586,  587,  563,  585,
      585,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  586,  563,  587,
      563,  563,  585,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  588,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  588,  563,  563,  563,  563,  563,  563,  563,
      563,  563,    0,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563
    } ;

static yyconst flex_int16_t yy_nxt[1049] =
    {   0,
      563,  563,   35,   36,   37,   35,   36,   37,   38,   43,
       43,   38,   94,  563,   39,   40,   50,   39,   40,   50,
       53,   47,   36,   37,   48,   53,   56,   38,   56,   64,
       64,   67,   41,   39,   40,   41,   67,   95,  563,   44,
       44,   47,   36,   37,   48,   97,   51,   38,  245,   51,
       54,   95,   70,   39,   40,   54,   57,  246,   57,   97,
      563,   70,   68,   89,  562,   90,  102,   68,   45,   45,
       46,   46,   58,   58,   59,   58,   58,   60,   58,   58,
       58,   58,   58,   71,  102,   62,   58,   58,   58,   78,
       65,   65,   71,  237,   78,   72,  103,   81,   82,  218,

       83,   72,   72,   58,   58,   58,   58,  167,   58,  107,
      108,  107,  148,  238,  103,  186,  187,   78,  560,   79,
      107,  108,  107,   72,   84,   85,  554,  218,  168,   72,
       72,  218,  148,   58,   58,   58,   58,   58,   59,   58,
       58,   60,   58,   58,   58,   58,   58,   79,   80,   62,
       58,   58,   58,   86,  149,   87,  149,  148,   78,  235,
      559,   81,   82,  143,   83,  143,  220,   58,   58,   58,
       58,  169,   58,  558,  556,  245,   80,  149,  117,  149,
      153,  143,  555,  143,  246,  563,  236,  221,   84,   85,
      247,  149,  169,  149,  144,  554,  218,   58,   58,   58,

       72,   72,   73,   72,   72,   72,   72,   72,   74,   72,
       72,  552,  193,  169,   76,   77,   72,   86,  159,   87,
      170,  160,  551,  171,  226,  208,  172,  161,  218,  173,
      162,   72,   72,   72,   72,  228,   72,  174,  163,  248,
      402,  175,  164,  403,  550,  176,  265,  426,  265,  249,
      177,  165,  208,  149,  427,  549,  178,  166,  254,  208,
      254,   72,   72,   72,   72,   72,   73,   72,   72,   72,
       72,   72,   74,   72,   72,  548,  149,  153,   76,   77,
       72,  109,  209,  189,  179,  110,  111,  547,  255,  112,
      149,  113,  259,  180,  253,   72,   72,   72,   72,  546,

       72,  181,  109,  545,  209,  182,  266,  114,  287,  288,
      287,  288,  291,  544,  291,  253,  543,  115,  256,  297,
      183,  297,  260,  209,  116,   72,   72,   72,  121,  122,
      123,  148,  124,  125,  126,  542,  253,  127,  265,  149,
      265,  287,  541,  287,  109,  209,  539,  169,  110,  111,
      538,  148,  112,  128,  113,  537,  129,  130,  536,  131,
      132,  133,  149,  134,  135,  109,  136,  535,  191,  137,
      138,  265,  534,  265,  209,  148,  155,  154,  169,  139,
      140,  208,  254,  149,  254,  209,  141,  142,  275,  169,
      275,  229,  208,  533,  218,  148,  209,  532,  266,  169,

      230,  531,  288,  231,  288,  530,  149,  209,  208,  529,
      528,  232,  255,  527,  254,  215,  254,  456,  255,  208,
      192,  194,  218,  457,  233,  274,  227,  275,  526,  275,
      234,  266,  493,  253,  313,  314,  315,  316,  494,  195,
      317,  196,  256,  291,  255,  291,  253,  525,  276,  321,
      318,  297,  524,  297,  253,  197,  322,  255,  198,  199,
      523,  200,  201,  341,  202,  341,  323,  253,  345,  522,
      345,  203,  204,  521,  256,  253,  355,  356,  355,  356,
      360,  364,  360,  364,  373,  520,  373,  276,  253,  341,
      519,  341,  374,  375,  376,  377,  518,  345,  378,  345,

      355,  356,  355,  356,  390,  391,  390,  391,  379,  360,
      380,  360,  393,  395,  393,  395,  364,  373,  364,  373,
      414,  415,  414,  415,  416,  342,  416,  390,  391,  390,
      391,  393,  395,  393,  395,  414,  415,  414,  415,  416,
      505,  416,  505,  507,  517,  505,  342,  505,  507,  557,
      507,  342,  540,  557,  540,  507,  540,  557,  540,  516,
      515,  557,  514,  557,  513,  512,  511,  557,  510,  509,
      506,  504,  557,  503,  502,  501,  557,  561,  500,  342,
      499,  498,  497,  496,  495,  492,  491,  490,  489,  488,
      487,  486,  485,  484,  483,  482,  481,  480,  479,  478,

      477,  476,  475,  508,  474,  473,  472,  471,  508,   32,
       32,   32,   32,   32,   32,   32,   34,   34,   34,   34,
       34,   34,   34,   42,   42,   42,   42,   42,   42,   42,
       49,   49,   49,   49,   49,   49,   49,   52,   52,   52,
       52,   52,   52,   52,   55,   55,   55,   55,   55,   55,
       55,   61,   61,   61,   61,   61,   61,   61,   63,   63,
       63,   63,   63,   63,   63,   66,   66,   66,   66,   66,
       66,   66,   69,   69,   69,   69,   69,   69,   69,   75,
       75,   75,   75,   75,   75,   75,   96,   96,   96,   97,
       97,   98,   98,   98,   98,   98,   98,   98,  100,  100,

      100,  100,  100,  100,  100,  104,  104,  104,  104,  104,
      104,  104,  119,  119,  119,  119,  119,  119,  119,  302,
      470,  302,  302,  302,  469,  302,  304,  468,  304,  304,
      304,  304,  306,  467,  306,  306,  306,  466,  306,  340,
      465,  340,  340,  340,  464,  340,  368,  463,  368,  368,
      368,  462,  368,  370,  461,  370,  370,  370,  460,  370,
      553,  553,  553,  553,  553,  553,  553,  459,  458,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  425,  424,  423,

      422,  421,  420,  419,  418,  417,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  401,  400,  399,  371,
      369,  398,  397,  396,  394,  392,  389,  388,  387,  386,
      385,  384,  383,  382,  381,  372,  371,  369,  367,  366,
      365,  363,  362,  361,  359,  358,  357,  354,  353,  352,
      351,  350,  349,  348,  347,  346,  344,  343,  339,  307,
      338,  305,  303,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  320,  319,  312,
      311,  310,  309,  253,  308,  307,  305,  303,  301,  300,
      299,  298,  296,  295,  294,  293,  292,  290,  289,  286,

      285,  284,  283,  282,  281,  280,  279,  278,  277,  273,
      272,  271,  270,  269,  268,  267,  264,  263,  262,  261,
      258,  257,  252,  251,  250,  244,  243,  242,  241,  240,
      239,  225,  224,  223,  222,  219,  217,  216,  214,  213,
      212,  211,  210,  207,  206,  205,  190,  188,  185,  184,
      158,  157,  156,  154,  152,  151,  150,  106,  105,  101,
       99,  147,  146,  145,  120,  118,  117,  106,  105,  105,
      101,  101,   99,   99,   93,   92,   91,   88,  563,   33,
       33,   33,   33,   31,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563
    } ;

static yyconst flex_int16_t yy_chk[1049] =
    {   0,
        0,    0,    3,    3,    3,    4,    4,    4,    3,    5,
        6,    4,  575,    0,    3,    3,    9,    4,    4,   10,
       11,    7,    7,    7,    7,   12,   13,    7,   14,   19,
       20,   21,    3,    7,    7,    4,   22,   61,    0,    5,
        6,    8,    8,    8,    8,   61,    9,    8,  228,   10,
       11,   96,   23,    8,    8,   12,   13,  228,   14,   96,
        0,   24,   21,   44,  559,   44,   68,   22,    5,    6,
        5,    6,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   23,  101,   17,   17,   17,   17,   27,
       19,   20,   24,  196,   29,   27,   68,   29,   29,  169,

       29,   27,   27,   17,   17,   17,   17,  126,   17,   78,
       78,   78,  109,  196,  101,  136,  136,   28,  556,   27,
      107,  107,  107,   28,   29,   29,  553,  169,  126,   28,
       28,  169,  109,   17,   17,   17,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   28,   27,   18,
       18,   18,   18,   29,  110,   29,  114,  109,   30,  195,
      551,   30,   30,   86,   30,   86,  185,   18,   18,   18,
       18,  128,   18,  549,  546,  203,   28,  110,   86,  114,
      114,  143,  545,  143,  203,  193,  195,  185,   30,   30,
      203,  110,  128,  114,   86,  543,  191,   18,   18,   18,

       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,  542,  143,  128,   25,   25,   25,   30,  122,   30,
      131,  122,  541,  131,  191,  148,  131,  122,  191,  131,
      122,   25,   25,   25,   25,  193,   25,  131,  122,  204,
      376,  131,  122,  376,  539,  131,  218,  403,  218,  204,
      131,  122,  148,  138,  403,  536,  131,  122,  209,  148,
      209,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,  535,  138,  138,   26,   26,
       26,   79,  149,  138,  133,   79,   79,  534,  209,   79,
      138,   79,  212,  133,  208,   26,   26,   26,   26,  532,

       26,  133,   79,  531,  149,  133,  218,   79,  239,  240,
      239,  240,  243,  530,  243,  208,  529,   79,  209,  249,
      133,  249,  212,  149,   79,   26,   26,   26,   84,   84,
       84,  116,   84,   84,   84,  528,  208,   84,  265,  116,
      265,  287,  527,  287,   84,  526,  524,  140,   84,   84,
      523,  116,   84,   84,   84,  522,   84,   84,  521,   84,
       84,   84,  116,   84,   84,   84,   84,  520,  140,   84,
       84,  226,  519,  226,  155,  142,  116,  140,  142,   84,
       84,  155,  254,  142,  254,  192,   84,   84,  275,  140,
      275,  194,  192,  518,  192,  142,  155,  517,  265,  142,

      194,  516,  288,  194,  288,  515,  142,  192,  155,  514,
      513,  194,  254,  512,  215,  155,  215,  435,  275,  192,
      142,  144,  192,  435,  194,  226,  192,  227,  510,  227,
      194,  226,  471,  215,  271,  271,  271,  271,  471,  144,
      271,  144,  254,  291,  215,  291,  227,  504,  275,  274,
      271,  297,  501,  297,  215,  144,  274,  227,  144,  144,
      500,  144,  144,  309,  144,  309,  274,  227,  312,  499,
      312,  144,  144,  498,  215,  215,  324,  325,  324,  325,
      329,  333,  329,  333,  340,  497,  340,  227,  227,  341,
      496,  341,  344,  344,  344,  344,  495,  345,  344,  345,

      355,  356,  355,  356,  357,  358,  357,  358,  344,  360,
      344,  360,  361,  363,  361,  363,  364,  373,  364,  373,
      387,  388,  387,  388,  389,  309,  389,  390,  391,  390,
      391,  393,  395,  393,  395,  414,  415,  414,  415,  416,
      483,  416,  483,  485,  494,  505,  340,  505,  507,  547,
      485,  341,  525,  557,  525,  507,  540,  547,  540,  493,
      492,  557,  491,  547,  490,  489,  488,  557,  487,  486,
      484,  482,  547,  481,  480,  479,  557,  557,  478,  373,
      477,  476,  474,  473,  472,  470,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  456,

      455,  454,  453,  485,  452,  451,  450,  449,  507,  564,
      564,  564,  564,  564,  564,  564,  565,  565,  565,  565,
      565,  565,  565,  566,  566,  566,  566,  566,  566,  566,
      567,  567,  567,  567,  567,  567,  567,  568,  568,  568,
      568,  568,  568,  568,  569,  569,  569,  569,  569,  569,
      569,  570,  570,  570,  570,  570,  570,  570,  571,  571,
      571,  571,  571,  571,  571,  572,  572,  572,  572,  572,
      572,  572,  573,  573,  573,  573,  573,  573,  573,  574,
      574,  574,  574,  574,  574,  574,  576,  576,  576,  577,
      577,  578,  578,  578,  578,  578,  578,  578,  579,  579,

      579,  579,  579,  579,  579,  580,  580,  580,  580,  580,
      580,  580,  581,  581,  581,  581,  581,  581,  581,  582,
      448,  582,  582,  582,  447,  582,  583,  446,  583,  583,
      583,  583,  584,  445,  584,  584,  584,  444,  584,  585,
      443,  585,  585,  585,  442,  585,  586,  441,  586,  586,
      586,  440,  586,  587,  439,  587,  587,  587,  438,  587,
      588,  588,  588,  588,  588,  588,  588,  437,  436,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  402,  401,  400,

      399,  398,  397,  396,  394,  392,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  375,  374,  372,  370,
      368,  367,  366,  365,  362,  359,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  339,  338,  337,  336,  335,
      334,  332,  331,  330,  328,  327,  326,  323,  322,  321,
      318,  317,  316,  315,  314,  313,  311,  310,  308,  306,
      305,  304,  302,  301,  300,  299,  298,  296,  294,  293,
      292,  290,  289,  286,  285,  284,  283,  273,  272,  270,
      267,  264,  263,  262,  261,  260,  259,  258,  257,  252,
      251,  250,  248,  247,  246,  245,  244,  242,  241,  238,

      237,  236,  235,  234,  233,  232,  231,  230,  229,  225,
      224,  223,  222,  221,  220,  219,  217,  216,  214,  213,
      211,  210,  207,  206,  205,  202,  201,  200,  199,  198,
      197,  189,  188,  187,  186,  184,  157,  156,  154,  153,
      152,  151,  150,  147,  146,  145,  139,  137,  135,  134,
      119,  118,  117,  115,  113,  112,  111,  105,  104,  100,
       98,   92,   91,   88,   82,   81,   80,   71,   70,   69,
       67,   66,   64,   63,   57,   54,   51,   41,   31,   16,
       15,    2,    1,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,

      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  563,  563,  563
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int doc2htmlYY_flex_debug;
int doc2htmlYY_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *doc2htmlYYtext;
#line 1 "doc2html.ll"
/*
  doc2html.ll

  Copyright (c) 1996 Roland Wunderling, Malte Zoeckler
  Copyright (c) 1998 Michael Meeks
  Copyright (c) 1998-2000 Dragos Acostachioaie

  This file is part of DOC++.

  DOC++ is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the license, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
#line 26 "doc2html.ll"
#include <string.h>
#include <time.h>

#include "doc.h"
#include "nametable.h"

extern NameTable	gifs;

#define YY_DECL int doc2htmlYYlex()

#undef	YY_INPUT
#define	YY_INPUT(buf, result, max_size) result = yyread(buf, max_size);

#define forbidden(c)	(c == ' ' || c == '\t' || c == '\n' || c == '}' || \
			c == ']' || c == '{' || c == '[' )

McString outStr;
static int inputPosition = 0, inLen = 0, texBracketCount = 0;
static const char *inStr;
static void push(char *);
static char *pop();
static void Output(const char *);
static void Output(const McString& o);
static char *tabFlag = 0;
static int doItem = 0;
static bool yyWithLinks = false;
static McString img, imgArg1, imgArg2;

static Entry *context;

static int yyread(char *buf, int max_size)
{
    int c = 0;
    while(c < max_size && inputPosition < inLen)
	{
	*buf = inStr[inputPosition++];
	c++;
	buf++;
	}
    return c;
}

static void outputTeX(const char *text)
{
    int num = 0;

    if(strstr(text, "\\hspace") == text)
	/* if the command starts with hspace it can not be visualized in a gif*/
	return;

    if(noGifs)
	{
	Output("<PRE>");
	Output(text);
	Output("</PRE>");
	}
    if(!gifs.has(text))
	{
	gifs.add(gifs.num() + 1, text);
	num = gifs.num();
	}
    else
	num = gifs[text];

    char buf[200];
    sprintf(buf, "<IMG BORDER=0 SRC=g%06d.gif>", num);
    Output(buf);
}

static char *getArg()
{
    doc2htmlYYtext[--doc2htmlYYleng] = 0;
    while(forbidden(doc2htmlYYtext[doc2htmlYYleng - 1]))
	doc2htmlYYtext[--doc2htmlYYleng] = 0;

    while(doc2htmlYYtext[doc2htmlYYleng - 1] != '{' && doc2htmlYYtext[doc2htmlYYleng - 1] != '[')
	--doc2htmlYYleng;
    return &doc2htmlYYtext[doc2htmlYYleng];
}

static char *getArgContainingSpaces()
{
    doc2htmlYYtext[--doc2htmlYYleng] = 0;
    while(forbidden(doc2htmlYYtext[doc2htmlYYleng - 1]))
	doc2htmlYYtext[--doc2htmlYYleng] = 0;

    while(doc2htmlYYtext[doc2htmlYYleng - 1] != '{' && doc2htmlYYtext[doc2htmlYYleng - 1] != '[' && doc2htmlYYtext[doc2htmlYYleng - 1] != ' ')
	--doc2htmlYYleng;
    return &doc2htmlYYtext[doc2htmlYYleng];
}

static int initial;
    














#line 1032 "doc2html.cc"

#define INITIAL 0
#define Verbatim 1
#define texmode 2
#define Fence 3
#define equation 4
#define eqnarray 5
#define eqn 6
#define texgif 7
#define JAVA_SEE 8
#define Image 9
#define ImageArg1 10
#define ImageArg2 11
#define DXXisCode 12
#define DXXisHTML 13
#define DXXisTeX 14

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int doc2htmlYYlex_destroy (void );

int doc2htmlYYget_debug (void );

void doc2htmlYYset_debug (int debug_flag  );

YY_EXTRA_TYPE doc2htmlYYget_extra (void );

void doc2htmlYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *doc2htmlYYget_in (void );

void doc2htmlYYset_in  (FILE * in_str  );

FILE *doc2htmlYYget_out (void );

void doc2htmlYYset_out  (FILE * out_str  );

int doc2htmlYYget_leng (void );

char *doc2htmlYYget_text (void );

int doc2htmlYYget_lineno (void );

void doc2htmlYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int doc2htmlYYwrap (void );
#else
extern int doc2htmlYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( doc2htmlYYtext, doc2htmlYYleng, 1, doc2htmlYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( doc2htmlYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( doc2htmlYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, doc2htmlYYin))==0 && ferror(doc2htmlYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(doc2htmlYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int doc2htmlYYlex (void);

#define YY_DECL int doc2htmlYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after doc2htmlYYtext and doc2htmlYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 144 "doc2html.ll"


#line 1236 "doc2html.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! doc2htmlYYin )
			doc2htmlYYin = stdin;

		if ( ! doc2htmlYYout )
			doc2htmlYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			doc2htmlYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				doc2htmlYY_create_buffer(doc2htmlYYin,YY_BUF_SIZE );
		}

		doc2htmlYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of doc2htmlYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 564 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 984 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 146 "doc2html.ll"
{
			char *arg = getArg();
			McString bla, tmp;
			tmp = arg;
			Entry *ref = getRefEntry(tmp, context);
			if(ref)
			    {
			    entry2link(bla, ref);
			    Output(bla);
			    }
			else
			    Output(arg);
                        }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 160 "doc2html.ll"
{
                        char *arg2 = getArgContainingSpaces();
			char *arg1 = getArgContainingSpaces();
			McString bla, tmp(arg1);
			Entry *ref = getRefEntry(tmp, context);
			if(ref)
			    {
			    entry2link(bla, ref, arg2);
			    Output(bla);
			    }
			else
			    Output(arg2);
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 174 "doc2html.ll"
{
			Output("<A HREF=");
			char *arg2 = getArg();
                        char *arg = getArg();
                        Output(arg2);
                        Output(">");
			Output(arg);
			Output("</A>");
            		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 184 "doc2html.ll"
{
			Output("<A HREF=");
			char *arg = getArg();
                        Output(arg);
                        Output(">");
			Output(arg);
			Output("</A>");
                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 193 "doc2html.ll"
{
			Output("<A NAME=");
			char *arg = getArg();
			Output(arg);
			Output("></A>");
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 200 "doc2html.ll"
{
			img.clear();
			imgArg1.clear();
			imgArg2.clear();
			BEGIN(Image);
			}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 207 "doc2html.ll"
{
			img.clear();
			imgArg1.clear();
			imgArg2.clear();
			BEGIN(ImageArg1);
			}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 214 "doc2html.ll"
{
    			if(strlen(doc2htmlYYtext) > 2 && imgArg1.length() == 0)
			    imgArg1 = McString(doc2htmlYYtext, 0, strlen(doc2htmlYYtext) - 2);
			BEGIN(Image);
			}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 220 "doc2html.ll"
{
    			if(strlen(doc2htmlYYtext) > 2 && imgArg1.length() == 0)
			    imgArg1 = McString(doc2htmlYYtext, 0, strlen(doc2htmlYYtext) - 2);
			BEGIN(ImageArg2);
			}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 226 "doc2html.ll"
{
			if(strlen(doc2htmlYYtext) > 2 && imgArg2.length() == 0)
	    		    imgArg2 = McString(doc2htmlYYtext, 0, strlen(doc2htmlYYtext) - 2);
			BEGIN(Image);
			}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 232 "doc2html.ll"
{
			if(strlen(doc2htmlYYtext) > 1 && img.length() == 0)
			    img = McString(doc2htmlYYtext, 0, strlen(doc2htmlYYtext) - 1);
			if(img.length() > 0)
			    {
        		    Output("<IMG ");
        		    if(imgArg1.length() > 0)
            			{
            			Output(imgArg1);
            			Output(" ");
            			}
        		    Output("SRC=\"");
        		    Output(img);
        		    // check for extension
			    if(img.index('.') == -1)  // no extension: add `.gif'
            			Output(".gif");
        		    Output("\">");
			    }
			img.clear();
			imgArg1.clear();
			imgArg2.clear();
                	BEGIN(initial);
                	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 256 "doc2html.ll"
{
			time_t ltime;
			(void)time(&ltime);
			char timebuf[64];
			strftime(timebuf, 64, "%c", localtime(&ltime));
			Output(timebuf);
			}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 264 "doc2html.ll"
{
			Output("<EM>");
			push("</EM>");
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 269 "doc2html.ll"
{
			Output("<EM>");
			push("</EM>");
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 274 "doc2html.ll"
{
			Output("<I>");
			push("</I>");
			}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 279 "doc2html.ll"
{
			Output("<I>");
			push("</I>");
			}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 284 "doc2html.ll"
{
			Output("<FONT SIZE=\"-4\">");
			push("</FONT>");
			}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 289 "doc2html.ll"
{
			Output("<FONT SIZE=\"-3\">");
			push("</FONT>");
			}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 294 "doc2html.ll"
{
			Output("<FONT SIZE=\"-2\">");
			push("</FONT>");
			}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 299 "doc2html.ll"
{
			Output("<FONT SIZE=\"-1\">");
			push("</FONT>");
			}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 304 "doc2html.ll"
{
			Output("<FONT SIZE=\"+1\">");
			push("</FONT>");
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 309 "doc2html.ll"
{
			Output("<FONT SIZE=\"+2\">");
			push("</FONT>");
			}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 314 "doc2html.ll"
{
			Output("<FONT SIZE=\"+3\">");
			push("</FONT>");
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 319 "doc2html.ll"
{
			Output("<FONT SIZE=\"+4\">");
			push("</FONT>");
			}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 324 "doc2html.ll"
{
			Output("<FONT SIZE=\"+5\">");
			push("</FONT>");
			}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 329 "doc2html.ll"
{
			Output("<FONT SIZE=\"+6\">");
			push("</FONT>");
			}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 334 "doc2html.ll"
{
			Output("<TT>");
			push("</TT>");
			}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 339 "doc2html.ll"
{
			Output("<TT>");
			push("</TT>");
			}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 344 "doc2html.ll"
{
			Output("<B>");
			push("</B>");
			}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 349 "doc2html.ll"
{
			Output("<B>");
			push("</B>");
			}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 354 "doc2html.ll"
{
			Output(pop());
			}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 358 "doc2html.ll"
{
			Output("{");
			push("}");
			}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 363 "doc2html.ll"
{
			Output("{");
			}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 367 "doc2html.ll"
{
			BEGIN(texmode);
			texBracketCount = 1;
			}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 372 "doc2html.ll"
{
			yymore();
			}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 376 "doc2html.ll"
{
			yymore();
			}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 380 "doc2html.ll"
{
			texBracketCount++;
			yymore();
			}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 385 "doc2html.ll"
{
			if(--texBracketCount == 0)
			    {
			    doc2htmlYYtext[--doc2htmlYYleng] = 0;
			    outputTeX(doc2htmlYYtext);
			    BEGIN(initial);
			    }
			else
			    yymore();
			}
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 396 "doc2html.ll"
{
			yymore();
			}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 401 "doc2html.ll"
{
			Output("<PRE>");
			BEGIN(Verbatim);
			}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 406 "doc2html.ll"
{
			yymore();
			BEGIN(equation);
			}
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 411 "doc2html.ll"
{
			yymore();
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 415 "doc2html.ll"
{
                        Output("<BR><CENTER>");
			outputTeX(doc2htmlYYtext);
			Output("<BR></CENTER>");
			BEGIN(initial);
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 422 "doc2html.ll"
{
			yymore();
			BEGIN(eqn);
			}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 427 "doc2html.ll"
{
			yymore();
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 431 "doc2html.ll"
{
                        Output("<BR><CENTER>");
			outputTeX(doc2htmlYYtext);
			Output("<BR></CENTER>");
			BEGIN(initial);
			}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 438 "doc2html.ll"
{
			outputTeX(doc2htmlYYtext);
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 442 "doc2html.ll"
{
			yymore();
			BEGIN(eqnarray);
			}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 447 "doc2html.ll"
{
			yymore();
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 451 "doc2html.ll"
{
                        Output("<BR><CENTER>");
			outputTeX(doc2htmlYYtext);
			Output("<BR></CENTER>");
			BEGIN(initial);
			}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 458 "doc2html.ll"
{
			Output("<PRE>");
			BEGIN(Verbatim);
			}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 463 "doc2html.ll"
{
			Output("<PRE>");
			BEGIN(Verbatim);
			}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 468 "doc2html.ll"
{
			Output("<CENTER>");
			}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 472 "doc2html.ll"
{
			Output("</CENTER>");
			}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 476 "doc2html.ll"
{
			Output(" ");
			}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 480 "doc2html.ll"
{
			Output(" ");
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 484 "doc2html.ll"
{
			Output(" ");
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 488 "doc2html.ll"
{
			Output(" ");
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 492 "doc2html.ll"
{
			Output("<UL>");
			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 496 "doc2html.ll"
{
			Output("</UL>");
			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 500 "doc2html.ll"
{
			Output("<OL>");
			}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 504 "doc2html.ll"
{
			Output("<LI>");
			}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 508 "doc2html.ll"
{
			Output("</OL>");
			}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 512 "doc2html.ll"
{
			Output("<DL>");
			}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 516 "doc2html.ll"
{
			Output("<DT><B>");
			doItem = 1;
			}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 521 "doc2html.ll"
{
			if(doItem )
			    {
			    Output("</B><DD>");
			    doItem = 0;
			    }
			else
			    Output("]");
			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 531 "doc2html.ll"
{
			Output("</DL>");
			}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 535 "doc2html.ll"
{
			Output("</PRE>");
			BEGIN(initial);
			}
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 540 "doc2html.ll"
{
			Output(doc2htmlYYtext);
			}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 544 "doc2html.ll"
{
			if(tabFlag)
			    Output("</TD></TR><TR><TD>");
			else
			    Output("<HR>");
			}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 551 "doc2html.ll"
{
			Output("&ccedil;");
			}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 555 "doc2html.ll"
{
			Output("&Ccedil;");
			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 559 "doc2html.ll"
{
			Output("&agrave;");
			}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 563 "doc2html.ll"
{
			Output("&acirc;");
			}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 567 "doc2html.ll"
{
			Output("&auml;");
			}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 571 "doc2html.ll"
{
			Output("&Auml;");
			}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 575 "doc2html.ll"
{
			Output("&auml;");
			}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 579 "doc2html.ll"
{
			Output("&Auml;");
			}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 583 "doc2html.ll"
{
			Output("&eacute;");
			}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 587 "doc2html.ll"
{
			Output("&egrave;");
			}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 591 "doc2html.ll"
{
			Output("&ecirc;");
			}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 595 "doc2html.ll"
{
			Output("&euml;");
			}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 599 "doc2html.ll"
{
			Output("&Eacute;");
			}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 603 "doc2html.ll"
{
			Output("&Egrave;");
			}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 607 "doc2html.ll"
{
			Output("&Ecirc;");
			}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 611 "doc2html.ll"
{
			Output("&Euml;");
			}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 615 "doc2html.ll"
{
			Output("&icirc;");
			}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 619 "doc2html.ll"
{
			Output("&Icirc;");
			}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 623 "doc2html.ll"
{
			Output("&ouml;");
			}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 627 "doc2html.ll"
{
			Output("&Ouml;");
			}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 631 "doc2html.ll"
{
			Output("&ouml;");
			}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 635 "doc2html.ll"
{
			Output("&Ouml;");
			}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 639 "doc2html.ll"
{
			Output("&ocirc;");
			}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 643 "doc2html.ll"
{
			Output("&Ocirc;");
			}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 647 "doc2html.ll"
{
			Output("&uuml;");
			}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 651 "doc2html.ll"
{
			Output("&Uuml;");
			}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 655 "doc2html.ll"
{
			Output("&uuml;");
			}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 659 "doc2html.ll"
{
			Output("&Uuml;");
			}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 663 "doc2html.ll"
{
			Output("&ucirc;");
			}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 667 "doc2html.ll"
{
			Output("&Ucirc;");
			}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 671 "doc2html.ll"
{
			Output("&ugrave;");
			}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 675 "doc2html.ll"
{
			Output("&Ugrave;");
			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 679 "doc2html.ll"
{
			Output("&szlig;");
			}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 683 "doc2html.ll"
{
			Output("&szlig;");
			}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 687 "doc2html.ll"
{
			Output("&#223;");
			}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 691 "doc2html.ll"
{
			Output("#");
			}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 695 "doc2html.ll"
{
			Output("#define");
			}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 699 "doc2html.ll"
{
			Output(" ");
			}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 703 "doc2html.ll"
{
			Output("_");
			}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 707 "doc2html.ll"
{
			Output("%");
			}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 711 "doc2html.ll"
{
			Output("&amp;");
			}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 715 "doc2html.ll"
{
			Output("&lt;");
			}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 719 "doc2html.ll"
{
			Output("&gt;");
			}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 723 "doc2html.ll"
{
			Output("&amp;");
			}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 727 "doc2html.ll"
{
			Output("<TT>");
			BEGIN(Fence);
			}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 732 "doc2html.ll"
{
			Output("</TT>");
			BEGIN(initial);
			}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 737 "doc2html.ll"
{
			Output("&amp;");
			}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 741 "doc2html.ll"
{
			Output("&lt;");
			}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 745 "doc2html.ll"
{
			Output("&gt;");
			}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 749 "doc2html.ll"
{
			Output("&quot;");
			}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 753 "doc2html.ll"
{
			Output("&nbsp;");
			}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 757 "doc2html.ll"
{
			Output(doc2htmlYYtext);
			}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 761 "doc2html.ll"
{
			Output("<TABLE BORDER>\n<TR><TD>");
			tabFlag++;
			}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 766 "doc2html.ll"
{
			if(tabFlag)
			    Output("</TD><TD>");
			else
			    Output("&amp;");
			}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 773 "doc2html.ll"
{
			if(tabFlag)
			    Output("</TD></TR><TR><TD>");
			else
			    Output("<BR>");
			}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 780 "doc2html.ll"
{
			Output("\n\n<P>");
			}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 784 "doc2html.ll"
{
			Output("</TR></TABLE>");
			tabFlag--;
			}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 789 "doc2html.ll"
{
			if(yyWithLinks)
			    {
                            Entry *ref = getRefEntry(doc2htmlYYtext, context);
			    if(ref)
				{
				McString tmp;
				entry2link(tmp, ref, (const char *)doc2htmlYYtext);
				Output(tmp);			
		    		}
			    else
				Output(doc2htmlYYtext);
                    	    }
			else
			    Output(doc2htmlYYtext);
    			}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 806 "doc2html.ll"
{
			McString tmp(doc2htmlYYtext);
                        McString base(tmp, 0, tmp.index('#'));
                        McString label(tmp, tmp.index('#') + 1, tmp.length() - tmp.index('#') - 1);
                        if(base.length())
			    {
	                    if(context)
				context->makeFullName(base);
		            base += htmlSuffix;
			    }
                        Output("<A HREF=\"");
                        Output(base); 
                        Output("#"); 
                        Output(label); 
                        Output("\">"); 
                        Output(label); 
                        Output("</A>"); 
                	}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 825 "doc2html.ll"
{
			Output(doc2htmlYYtext);
			}
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 829 "doc2html.ll"
{
			Output(doc2htmlYYtext);
			}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 833 "doc2html.ll"
{
			Output(doc2htmlYYtext);
			}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 837 "doc2html.ll"
{
			Output(doc2htmlYYtext);
			}
	YY_BREAK
case 134:
/* rule 134 can match eol */
YY_RULE_SETUP
#line 841 "doc2html.ll"

	YY_BREAK
case 135:
YY_RULE_SETUP
#line 842 "doc2html.ll"
ECHO;
	YY_BREAK
#line 2444 "doc2html.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Verbatim):
case YY_STATE_EOF(texmode):
case YY_STATE_EOF(Fence):
case YY_STATE_EOF(equation):
case YY_STATE_EOF(eqnarray):
case YY_STATE_EOF(eqn):
case YY_STATE_EOF(texgif):
case YY_STATE_EOF(JAVA_SEE):
case YY_STATE_EOF(Image):
case YY_STATE_EOF(ImageArg1):
case YY_STATE_EOF(ImageArg2):
case YY_STATE_EOF(DXXisCode):
case YY_STATE_EOF(DXXisHTML):
case YY_STATE_EOF(DXXisTeX):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed doc2htmlYYin at a new source and called
			 * doc2htmlYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = doc2htmlYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( doc2htmlYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * doc2htmlYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of doc2htmlYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					doc2htmlYYrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			doc2htmlYYrestart(doc2htmlYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) doc2htmlYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 564 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 564 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 563);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up doc2htmlYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					doc2htmlYYrestart(doc2htmlYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( doc2htmlYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve doc2htmlYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void doc2htmlYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        doc2htmlYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            doc2htmlYY_create_buffer(doc2htmlYYin,YY_BUF_SIZE );
	}

	doc2htmlYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	doc2htmlYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void doc2htmlYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		doc2htmlYYpop_buffer_state();
	 *		doc2htmlYYpush_buffer_state(new_buffer);
     */
	doc2htmlYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	doc2htmlYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (doc2htmlYYwrap()) processing, but the only time this flag
	 * is looked at is after doc2htmlYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void doc2htmlYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	doc2htmlYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE doc2htmlYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) doc2htmlYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in doc2htmlYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) doc2htmlYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in doc2htmlYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	doc2htmlYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with doc2htmlYY_create_buffer()
 * 
 */
    void doc2htmlYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		doc2htmlYYfree((void *) b->yy_ch_buf  );

	doc2htmlYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a doc2htmlYYrestart() or at EOF.
 */
    static void doc2htmlYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	doc2htmlYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then doc2htmlYY_init_buffer was _probably_
     * called from doc2htmlYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void doc2htmlYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		doc2htmlYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void doc2htmlYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	doc2htmlYYensure_buffer_stack();

	/* This block is copied from doc2htmlYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from doc2htmlYY_switch_to_buffer. */
	doc2htmlYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void doc2htmlYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	doc2htmlYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		doc2htmlYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void doc2htmlYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)doc2htmlYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in doc2htmlYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)doc2htmlYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in doc2htmlYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE doc2htmlYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) doc2htmlYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in doc2htmlYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	doc2htmlYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to doc2htmlYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       doc2htmlYY_scan_bytes() instead.
 */
YY_BUFFER_STATE doc2htmlYY_scan_string (yyconst char * yystr )
{
    
	return doc2htmlYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to doc2htmlYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE doc2htmlYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) doc2htmlYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in doc2htmlYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = doc2htmlYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in doc2htmlYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up doc2htmlYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		doc2htmlYYtext[doc2htmlYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = doc2htmlYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		doc2htmlYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int doc2htmlYYget_lineno  (void)
{
        
    return doc2htmlYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *doc2htmlYYget_in  (void)
{
        return doc2htmlYYin;
}

/** Get the output stream.
 * 
 */
FILE *doc2htmlYYget_out  (void)
{
        return doc2htmlYYout;
}

/** Get the length of the current token.
 * 
 */
int doc2htmlYYget_leng  (void)
{
        return doc2htmlYYleng;
}

/** Get the current token.
 * 
 */

char *doc2htmlYYget_text  (void)
{
        return doc2htmlYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void doc2htmlYYset_lineno (int  line_number )
{
    
    doc2htmlYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see doc2htmlYY_switch_to_buffer
 */
void doc2htmlYYset_in (FILE *  in_str )
{
        doc2htmlYYin = in_str ;
}

void doc2htmlYYset_out (FILE *  out_str )
{
        doc2htmlYYout = out_str ;
}

int doc2htmlYYget_debug  (void)
{
        return doc2htmlYY_flex_debug;
}

void doc2htmlYYset_debug (int  bdebug )
{
        doc2htmlYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from doc2htmlYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    doc2htmlYYin = stdin;
    doc2htmlYYout = stdout;
#else
    doc2htmlYYin = (FILE *) 0;
    doc2htmlYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * doc2htmlYYlex_init()
     */
    return 0;
}

/* doc2htmlYYlex_destroy is for both reentrant and non-reentrant scanners. */
int doc2htmlYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		doc2htmlYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		doc2htmlYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	doc2htmlYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * doc2htmlYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *doc2htmlYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *doc2htmlYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void doc2htmlYYfree (void * ptr )
{
	free( (char *) ptr );	/* see doc2htmlYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 842 "doc2html.ll"



McDArray <char *> stack;

extern "C" {
    int doc2htmlYYwrap()
	{
	return 1;
	}
}

void push(char *s)
{
    stack.append(s);
}

char *pop()
{
    if(stack.size())
	{
	char *s = stack.last();
	stack.removeLast();
	return s;
	}
    else
	return ("}");
}

static void Output(const char *o)
{
    outStr += o;
}

static void Output(const McString& o)
{
    outStr += o;
}

// This is really called lots, so add a quick exit if nothing to do!
static char blank[] = "";
char *strToHtml(McString &in, char *dest, Entry* ct, bool withLinks, bool pureCode)
{
    if(in.length() == 0) // This really does save time.
	if(dest)
	    {
	    strcpy(dest, blank);
	    return dest;
	    }
	else
    	    return blank;

    context = ct ? ct : root;
    inStr = in.c_str();
    outStr = "";
    inLen = strlen(inStr);
    inputPosition = 0;
    stack.resize(0);
    yyWithLinks = withLinks;
    if(pureCode)
        initial = DXXisCode;
    else
	if(HTMLsyntax)
	    initial = DXXisHTML;
	else
	    initial = DXXisTeX;
    BEGIN(initial);
    doc2htmlYYlex();
    if(dest)
	{
	strcpy(dest, outStr.c_str());
	return dest;
	}
    else 
	return strdup(outStr.c_str());
}

char *seeToHtml(McString &in, Entry *ct)
{
    if(in.length() == 0)
	return blank;
    context = ct ? ct : root;
    inStr = in.c_str();
    outStr = "";
    inLen = strlen(inStr);
    inputPosition = 0;
    stack.resize(0);
    yyWithLinks = true;
    BEGIN(JAVA_SEE);
    doc2htmlYYlex();
    return strdup(outStr.c_str());
}

