
#line 3 "php.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer phpYY_create_buffer
#define yy_delete_buffer phpYY_delete_buffer
#define yy_flex_debug phpYY_flex_debug
#define yy_init_buffer phpYY_init_buffer
#define yy_flush_buffer phpYY_flush_buffer
#define yy_load_buffer_state phpYY_load_buffer_state
#define yy_switch_to_buffer phpYY_switch_to_buffer
#define yyin phpYYin
#define yyleng phpYYleng
#define yylex phpYYlex
#define yylineno phpYYlineno
#define yyout phpYYout
#define yyrestart phpYYrestart
#define yytext phpYYtext
#define yywrap phpYYwrap
#define yyalloc phpYYalloc
#define yyrealloc phpYYrealloc
#define yyfree phpYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE phpYYrestart(phpYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int phpYYleng;

extern FILE *phpYYin, *phpYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up phpYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up phpYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via phpYYrestart()), so that the user can continue scanning by
	 * just pointing phpYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when phpYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int phpYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow phpYYwrap()'s to do buffer switches
 * instead of setting up a fresh phpYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void phpYYrestart (FILE *input_file  );
void phpYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE phpYY_create_buffer (FILE *file,int size  );
void phpYY_delete_buffer (YY_BUFFER_STATE b  );
void phpYY_flush_buffer (YY_BUFFER_STATE b  );
void phpYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void phpYYpop_buffer_state (void );

static void phpYYensure_buffer_stack (void );
static void phpYY_load_buffer_state (void );
static void phpYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER phpYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE phpYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE phpYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE phpYY_scan_bytes (yyconst char *bytes,int len  );

void *phpYYalloc (yy_size_t  );
void *phpYYrealloc (void *,yy_size_t  );
void phpYYfree (void *  );

#define yy_new_buffer phpYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        phpYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            phpYY_create_buffer(phpYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        phpYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            phpYY_create_buffer(phpYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *phpYYin = (FILE *) 0, *phpYYout = (FILE *) 0;

typedef int yy_state_type;

extern int phpYYlineno;

int phpYYlineno = 1;

extern char *phpYYtext;
#define yytext_ptr phpYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up phpYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	phpYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[234] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    4,    4,
        6,    6,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   62,   59,
       59,   60,   59,   60,   57,   59,   59,   59,   59,   59,
       10,   10,    9,   18,   18,   18,   15,   17,   18,   13,
       14,   59,    4,    4,    5,    6,    6,    7,   11,   59,
       21,   19,   21,   33,   23,   22,   24,   25,   38,   39,

       27,   30,   32,   28,   31,   26,   29,   35,   35,   35,
       35,   34,   35,   35,   36,   37,   41,   41,   40,   41,
       59,   60,   59,   59,   48,   48,   46,   48,   53,   53,
       53,   50,   53,    0,    1,    0,    0,    0,    0,    0,
        0,   55,   54,    0,    0,    0,    0,    0,    9,   10,
       10,    9,    0,    0,   12,    0,    0,    4,    6,   11,
        0,    0,   21,   21,   22,    0,    0,    0,    1,    0,
       42,    0,    0,    0,    0,   43,    0,   47,    0,    0,
       52,   52,   51,    0,   49,    0,   58,    0,    0,    0,
       10,   12,   12,    0,   16,    0,   20,   42,    0,   45,

       52,   49,   49,   49,   56,    0,    0,    0,   10,   20,
       20,   45,   45,   45,   44,   49,    0,    0,    0,   10,
       45,    2,    0,    0,   10,    0,    0,    8,    0,    8,
        8,    3,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    5,    1,    1,    1,    1,    5,    6,
        7,    8,    1,    9,    1,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,   13,    1,
       14,    1,    1,    1,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       15,   16,   17,    1,   12,    1,   18,   12,   19,   20,

       21,   22,   12,   12,   23,   12,   12,   24,   12,   25,
       26,   12,   12,   27,   28,   29,   30,   31,   12,   32,
       12,   12,   33,    1,   34,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[35] =
    {   0,
        1,    1,    1,    2,    1,    1,    1,    3,    1,    4,
        3,    5,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1
    } ;

static yyconst flex_int16_t yy_base[252] =
    {   0,
        0,    1,    4,    0,   26,    0,   59,   92,  126,    0,
      160,    0,  194,    0,   62,   63,  228,    0,  262,    0,
       65,   71,  295,    0,  328,  338,   87,   88,    9,   12,
       16,   17,   75,  111,  301,  309,  316,  319,  331,  335,
      341,  345,  349,  353,  355,  359,  363,  367,  373,  377,
      381,  385,  387,  391,  395,  399,   70,   85,  652,  653,
      649,  653,  419,  113,  653,  639,   60,  625,  618,  439,
        0,  615,  643,  653,  643,  408,  421,  653,  100,  653,
      653,  425,  633,  632,  653,  631,  630,  653,    0,  445,
        0,  653,  622,  653,  653,    0,  653,  653,  653,  653,

      653,  653,  653,  653,  653,  653,  653,  653,  637,  451,
      653,  653,  627,  296,  653,  653,  629,  357,  653,  397,
      460,  441,  625,  627,  653,  632,  653,    0,  653,  631,
      412,  431,  429,  630,  653,    0,  454,  620,  622,  605,
      598,  653,  619,  622,  607,  599,    0,  591,  619,    0,
      592,  617,  463,  611,   14,  614,  474,  606,  605,    0,
      476,  597,    0,  587,    0,  605,  462,  389,  604,  484,
      603,  486,  495,  586,  579,  653,  529,  653,  497,  485,
      500,  506,  653,  528,  507,  531,  653,  506,  507,  491,
      492,  509,  115,  498,  653,  464,  480,  517,  473,  519,

      472,  423,  466,  520,  653,  433,  372,  366,  358,  376,
      370,  443,  366,  521,  653,  508,  352,  328,  322,  317,
      530,  323,  290,  295,  281,  275,  270,  109,   99,   85,
       77,   73,  653,  538,  543,  548,  553,  558,  563,  568,
        5,  571,  574,  576,  578,  580,  585,  590,  595,  600,
      605
    } ;

static yyconst flex_int16_t yy_def[252] =
    {   0,
      234,  234,  234,    3,  233,    5,  235,  235,  233,    9,
      233,   11,  233,   13,    3,    3,  233,   17,  233,   19,
      234,  234,  234,   23,  236,  236,    3,    3,  234,  234,
      237,  237,  234,  234,  238,  238,  239,  239,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,  234,  234,  233,  233,
      240,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      241,  241,  233,  233,  240,  233,  233,  233,  233,  233,
      233,  233,  242,  242,  233,  243,  243,  233,  244,  233,
      245,  233,  245,  233,  233,  246,  233,  233,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  240,  233,
      233,  233,  233,  233,  233,  233,  247,  248,  233,  247,
      233,  233,  233,  233,  233,  240,  233,  249,  233,  240,
      233,  233,  233,  240,  233,   63,  233,  233,  233,  233,
      233,  233,  233,  250,  233,  233,   70,  233,  233,  241,
      241,  233,  233,  233,  233,  251,  233,  242,  243,  244,
      233,  233,  245,  245,  246,  247,  247,  248,  247,  248,
      247,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  250,  233,  233,  233,  233,
      241,  233,  233,  251,  233,  233,  245,  248,  233,  233,

      233,  233,  233,  233,  233,  233,  233,  233,  241,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  241,
      233,  233,  233,  233,  241,  233,  233,  241,  233,  233,
      233,  233,    0,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233
    } ;

static yyconst flex_int16_t yy_nxt[688] =
    {   0,
      233,   61,   61,   62,   62,   61,   63,   64,   65,  150,
       61,   66,   62,   61,   67,   62,  192,  118,  118,  119,
      119,  193,   68,  120,  120,   69,   60,   61,   70,   64,
       65,   60,   60,   66,   60,   60,   67,   71,   60,   60,
       60,   60,   60,   71,   71,   71,   72,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   73,   60,
       75,   76,   77,   78,   82,   82,   61,  143,   62,   79,
      144,   61,   61,   62,   62,  232,   61,  121,  122,  231,
       60,   60,  123,   60,   60,  124,   61,  231,   62,   82,
       82,   80,   81,   75,   76,   77,   78,   99,  100,  115,

      115,  232,   79,   99,  100,   60,   60,  155,   60,   60,
      156,  231,   61,  121,  122,  137,  137,  192,  123,  116,
      116,  124,  193,  139,   80,   81,   60,   61,   82,   64,
       65,   60,   60,   83,   60,   84,   67,   84,   85,   60,
       60,   60,   60,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   60,   60,
       60,   61,   82,   64,   65,   60,   60,   86,   60,   87,
       67,   87,   88,   60,   60,   60,   60,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   60,   60,   60,   61,   82,   64,   65,   60,

       60,   66,   60,   89,   67,   89,   60,   60,   60,   60,
       60,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   60,   60,   60,   61,
       90,   64,   65,   60,   60,   66,   60,   91,   67,   91,
       92,   60,   60,   60,   60,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   93,   91,
       60,   60,   60,   61,   82,   64,   65,   94,   60,   66,
       95,   96,   67,   96,   97,   98,   60,   60,   60,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   60,   60,   61,  230,   62,  229,

      101,  102,  126,  143,   62,  127,  144,  103,  228,  104,
      126,  105,   62,  127,  227,  226,  128,  130,  131,  132,
      130,  131,  132,  133,  128,  222,  133,  106,  107,  109,
      110,   64,  111,   82,  112,  113,  225,   82,  114,  109,
      110,   64,  111,   82,  112,  113,  224,   82,  114,   60,
      223,   82,   60,   60,  222,   82,   60,   82,  169,   60,
      134,   82,   60,   60,  170,   82,   60,   60,  213,   82,
       60,   60,  211,   60,   60,   82,   60,   60,  211,   82,
       60,   60,  220,   82,   60,   60,  219,   82,   60,   82,
      169,   60,  134,   82,   60,   60,  170,   82,   60,   60,

      218,   82,   60,   60,  167,   60,   60,  171,   60,   60,
      153,  153,   60,   60,  179,  179,   60,   60,  154,  180,
       60,  136,  137,  153,  153,  203,  138,  157,  137,  139,
      216,  154,  138,  181,  179,  139,  180,  140,  182,  183,
      141,  147,  137,  173,  173,  213,  138,  161,  137,  139,
      221,  175,  138,  157,  137,  139,  137,  137,  138,  148,
      217,  139,  172,  173,  139,  153,  153,  174,  203,  167,
      175,  149,  171,  154,  201,  162,  157,  137,  161,  137,
      212,  138,  211,  138,  139,  169,  139,  134,  172,  173,
      210,  170,  180,  174,  198,  183,  175,  173,  173,  179,

      179,  195,  181,  179,  180,  175,  162,  182,  201,  203,
      203,  192,  209,  182,  204,  216,  183,  205,  169,  208,
      134,  213,  203,  213,  170,  207,  214,  204,  214,  215,
      205,  215,  213,  206,  187,  202,  200,  221,   60,   60,
       60,   60,   60,   74,   74,   74,   74,   74,  108,  108,
      108,  108,  108,  117,  117,  117,  117,  117,  125,  125,
      125,  125,  125,  129,  129,  129,  129,  129,  134,  134,
      134,  134,  134,  158,  158,  158,  159,  159,  159,  160,
      160,  163,  163,  165,  165,  166,  199,  166,  166,  166,
      168,  168,  168,  168,  168,  178,  176,  178,  178,  178,

      186,  186,  186,  186,  186,  194,  194,  194,  194,  194,
      167,  167,  167,  197,  196,  233,  233,  195,  155,  152,
      191,  152,  190,  189,  188,  187,  185,  146,  145,  184,
      142,  135,  135,  135,  177,  176,  167,  142,  135,  164,
      233,  142,  233,  142,  135,  152,  151,  146,  145,  142,
      135,  233,   59,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233
    } ;

static yyconst flex_int16_t yy_chk[688] =
    {   0,
        0,    1,    2,    1,    2,    3,    3,    3,    3,  241,
       29,    3,   29,   30,    3,   30,  155,   31,   32,   31,
       32,  155,    3,   31,   32,    3,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    7,    7,    7,   15,   16,   21,   67,   21,    7,
       67,   57,   22,   57,   22,  232,   33,   33,   33,  231,
       15,   16,   33,   15,   16,   33,   58,  230,   58,   27,
       28,    7,    7,    8,    8,    8,    8,   21,   21,   27,

       28,  229,    8,   22,   22,   27,   28,   79,   27,   28,
       79,  228,   34,   34,   34,   64,   64,  193,   34,   27,
       28,   34,  193,   64,    8,    8,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   23,  227,   23,  226,

       23,   23,   35,  114,   35,   35,  114,   23,  225,   23,
       36,   23,   36,   36,  224,  223,   35,   37,   37,   37,
       38,   38,   38,   37,   36,  222,   38,   23,   23,   25,
       25,   25,   25,   39,   25,   25,  220,   40,   25,   26,
       26,   26,   26,   41,   26,   26,  219,   42,   26,   39,
      218,   43,   39,   40,  217,   44,   40,   45,  118,   41,
      118,   46,   41,   42,  118,   47,   42,   43,  213,   48,
       43,   44,  211,   45,   44,   49,   45,   46,  210,   50,
       46,   47,  209,   51,   47,   48,  208,   52,   48,   53,
      168,   49,  168,   54,   49,   50,  168,   55,   50,   51,

      207,   56,   51,   52,  120,   53,   52,  120,   53,   54,
       76,   76,   54,   55,  131,  131,   55,   56,   76,  131,
       56,   63,   63,   77,   77,  202,   63,   82,   82,   63,
      202,   77,   82,  132,  132,   82,  133,   63,  132,  133,
       63,   70,   70,  122,  122,  212,   70,   90,   90,   70,
      212,  122,   90,  110,  110,   90,  137,  137,  110,   70,
      206,  110,  121,  121,  137,  153,  153,  121,  203,  167,
      121,   70,  167,  153,  201,   90,  157,  157,  161,  161,
      199,  157,  197,  161,  157,  170,  161,  170,  172,  172,
      196,  170,  180,  172,  170,  180,  172,  173,  173,  179,

      179,  194,  181,  181,  179,  173,  161,  181,  182,  185,
      216,  192,  191,  182,  185,  216,  182,  185,  198,  190,
      198,  200,  204,  214,  198,  189,  200,  204,  214,  200,
      204,  214,  221,  188,  186,  184,  177,  221,  234,  234,
      234,  234,  234,  235,  235,  235,  235,  235,  236,  236,
      236,  236,  236,  237,  237,  237,  237,  237,  238,  238,
      238,  238,  238,  239,  239,  239,  239,  239,  240,  240,
      240,  240,  240,  242,  242,  242,  243,  243,  243,  244,
      244,  245,  245,  246,  246,  247,  175,  247,  247,  247,
      248,  248,  248,  248,  248,  249,  174,  249,  249,  249,

      250,  250,  250,  250,  250,  251,  251,  251,  251,  251,
      171,  169,  166,  164,  162,  159,  158,  156,  154,  152,
      151,  149,  148,  146,  145,  144,  143,  141,  140,  139,
      138,  134,  130,  126,  124,  123,  117,  113,  109,   93,
       87,   86,   84,   83,   75,   73,   72,   69,   68,   66,
       61,   59,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int phpYY_flex_debug;
int phpYY_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *phpYYtext;
#line 1 "php.ll"
/*
  php.ll

  Copyright (c) 2001 Dragos Acostachioaie

  This file is part of DOC++.

  DOC++ is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public
  License as published by the Free Software Foundation; either
  version 2 of the license, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.

  You should have received a copy of the GNU General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
#line 24 "php.ll"
#include <assert.h>
#include <ctype.h>
#include <iostream>
#include <stdio.h>

#include "doc.h"

using namespace std;

static const char	*inputString;
static int		inputPosition;
static int		lastContext;
static int		bracketCount  = 0;
static Entry		*current_root = 0;
static Entry		*global_root  = 0;
static Entry		*current      = 0;
// this one trackes whether we're looking for first-level classes (true)
// or members and nested classes (false).
static bool		findClasses  = false;

static int		yyLineNr = 0;
static char		yyFileName[264];

static char		ssEndChar;
static int		ssSave;

// these two variables count brackets in two new flex-start-conditions.
static int		skip_to_semi_count = 0;
static int		skip_to_bracket_count = 0;

static void msg(const char *str, const char *str2 = 0)
{
#ifdef DEBUG
    if(verb)
	{
	printf("%s(%d): %s", yyFileName, yyLineNr, str);
	if(str2)
	    printf("`%s'", str2);
	printf("\n");
	}
#endif
}

static void lineCount()
{
    for(const char *c = phpYYtext; *c; ++c)
	yyLineNr += (*c == '\n');
}

#undef	YY_INPUT
#define	YY_INPUT(buf, result, max_size) result = yyread(buf, max_size);

static int yyread(char *buf, int max_size)
{
    int c = 0;

    while(c < max_size && inputString[inputPosition])
	{
	*buf = inputString[inputPosition++];
	c++;
	buf++;
	}
    return c;
}





























#line 822 "php.cc"

#define INITIAL 0
#define FindClasses 1
#define ClassName 2
#define ClassBody 3
#define Require 4
#define Include 5
#define Extends 6
#define Implements 7
#define FindMembers 8
#define Member 9
#define SkipToBracket 10
#define SkipToSemi 11
#define Args 12
#define Function 13
#define Throws 14
#define Comment 15
#define SkipComment 16
#define SkipString 17
#define PHPDoc 18
#define See 19
#define Author 20
#define Version 21
#define Param 22
#define Return 23
#define Exception 24
#define Precondition 25
#define Postcondition 26
#define Invariant 27
#define File 28

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int phpYYlex_destroy (void );

int phpYYget_debug (void );

void phpYYset_debug (int debug_flag  );

YY_EXTRA_TYPE phpYYget_extra (void );

void phpYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *phpYYget_in (void );

void phpYYset_in  (FILE * in_str  );

FILE *phpYYget_out (void );

void phpYYset_out  (FILE * out_str  );

int phpYYget_leng (void );

char *phpYYget_text (void );

int phpYYget_lineno (void );

void phpYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int phpYYwrap (void );
#else
extern int phpYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( phpYYtext, phpYYleng, 1, phpYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( phpYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( phpYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, phpYYin))==0 && ferror(phpYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(phpYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int phpYYlex (void);

#define YY_DECL int phpYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after phpYYtext and phpYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 124 "php.ll"

#line 1039 "php.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! phpYYin )
			phpYYin = stdin;

		if ( ! phpYYout )
			phpYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			phpYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				phpYY_create_buffer(phpYYin,YY_BUF_SIZE );
		}

		phpYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of phpYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 234 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 653 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 125 "php.ll"
{
					int i;
					yyLineNr = 1;
					if(bracketCount != 0 || YY_START != FindClasses )
					    fprintf(stderr, "Warning end of duff file: `%s', {} %d, %d\n",
						yyFileName, bracketCount, YY_START);
					for(i = 0; phpYYtext[i + 1] != 6; i++)
					    yyFileName[i] = phpYYtext[i + 1];
					yyFileName[i] = 0;
					current_root  = global_root;
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 136 "php.ll"
{
					current->section = CLASS_SEC;
					current->protection = PUBL;
					current->type += "class";
					findClasses = true;
					BEGIN(ClassName);
					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 144 "php.ll"
{
						if (current->section != CLASS_SEC)
						{
							current->section = FUNCTION_SEC;
							current->protection = PUBL;
							findClasses = true;
							BEGIN(Member);
						}
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 154 "php.ll"
{
					current->import.append(new McString(phpYYtext));
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 158 "php.ll"
{
					BEGIN(FindClasses);
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 162 "php.ll"
{
					current->import.append(new McString(phpYYtext));
					}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 166 "php.ll"
{
					BEGIN(FindClasses);
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 170 "php.ll"
{
					BEGIN(Extends);
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 174 "php.ll"
{
					BEGIN(ClassBody);
    					current->file = yyFileName;
					current->startLine = yyLineNr;
					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 180 "php.ll"
{
					current->name = phpYYtext;
					msg("found class ", phpYYtext);
					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 185 "php.ll"
{
					current->extends.append(new McString(phpYYtext));
					msg(" Extends : ",phpYYtext);
					BEGIN(ClassName);
					}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 191 "php.ll"
{
					current->program += phpYYtext;
					lineCount();
					lastContext = YY_START;
					BEGIN(Comment);
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 198 "php.ll"
{
					current->program += phpYYtext;
					++bracketCount;
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 203 "php.ll"
{
					if(bracketCount)
					    {
					    current->program += phpYYtext;
					    --bracketCount;
					    }
					else
					    {
					    current_root->addSubEntry(current);
					    current = new Entry;
					    if(findClasses)
						BEGIN(FindClasses);
					    else
						BEGIN(FindMembers);
					    }
					}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 220 "php.ll"
{
					current->program += phpYYtext;
					yyLineNr++;
					}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 225 "php.ll"
{
					current->program += phpYYtext;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 229 "php.ll"
{
					ssEndChar = *phpYYtext;
					ssSave = 0;
					lastContext = YY_START;
					BEGIN(SkipString);
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 236 "php.ll"
{
					current->program += phpYYtext;
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 240 "php.ll"
{
					current->name.clear();
					current->type.clear();
					current->args.clear();
					current->program.clear();
					current->doc.clear();
					current->section = EMPTY_SEC;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 250 "php.ll"
{
					current->protection = PUBL;
					current->type += "";
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 255 "php.ll"
{
					// if we find a non-keyword word, make note of it and go to rule <Member>
					if(current->type.length())
					    current->type += ' ';
					current->protection = PUBL;
					current->type += current->name;
					current->name = phpYYtext;
					BEGIN(Member);
					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 265 "php.ll"
{
// The rule <Member> I had to make a small adjustment:
// splitting <Member>[;=] into <Member>";" and <Member>"="
// (see below for explaination)

					if(current->type.length())
					    current->type += ' ';
					current->type += current->name;
					current->name = phpYYtext;
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 276 "php.ll"
{
// this is "business as usual"
					current->section = VARIABLE_SEC;
					current_root->addSubEntry(current);
					msg("found field ", current->name.c_str());
					current = new Entry;
					BEGIN(Member);
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 284 "php.ll"
{
// this is "business as usual"
					current->section = VARIABLE_SEC;
					current_root->addSubEntry(current);
					msg("found field ", current->name.c_str());
					current = new Entry;
					BEGIN(FindMembers);
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 293 "php.ll"
{
// we made this an extra rule because otherwise the initialized had been
// treated as Member (which it obviously isn't). So if we have an "=", we go to
// a new rule <SkipToSemi> where we skip everything including the ending ";"
// then we go to FindMembers 

					current->section = VARIABLE_SEC;
					current_root->addSubEntry(current);
					msg("found field ", current->name.c_str());
					current = new Entry;
					skip_to_semi_count = 0; // we count bracket-levels "{}"
					BEGIN(SkipToSemi);
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 307 "php.ll"
{
// We take care for bracket-levels because there might be definition of an
// anonymous class here that makes use of Semicolons we are not interested in.
					skip_to_semi_count++;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 313 "php.ll"
{
					skip_to_semi_count++;
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 317 "php.ll"
{
					skip_to_semi_count++;
					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 321 "php.ll"
{
					skip_to_semi_count--;
					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 325 "php.ll"
{
					skip_to_semi_count--;
					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 329 "php.ll"
{
					skip_to_semi_count--;
					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 333 "php.ll"
{
// So if there is a semicolon at "our" bracket level, we expect members again.
					if(skip_to_semi_count == 0)
					    BEGIN(FindMembers); 
					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 339 "php.ll"
{
					current->section = FUNCTION_SEC;
					current->protection = PUBL;
					current->args = phpYYtext;
					msg("found method ", current->name.c_str());
					BEGIN(Args);
					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 347 "php.ll"
{
					current->args += *phpYYtext;
					BEGIN(Function);
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 352 "php.ll"
{
					current->args += *phpYYtext;
					}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 357 "php.ll"
{
					current_root->addSubEntry(current);
					current = new Entry;
					BEGIN(FindMembers);
					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 363 "php.ll"
{
					current_root->addSubEntry(current);
					current = new Entry;
					skip_to_bracket_count = 1; // we take care of bracket level
					BEGIN(SkipToBracket);
					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 370 "php.ll"
{ 
// this skips the function body.
					skip_to_bracket_count++;
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 375 "php.ll"
{
					if(--skip_to_bracket_count == 0)
					   if (findClasses)
						BEGIN(FindClasses);
					    else
      					        BEGIN(FindMembers);
					}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 383 "php.ll"
{
					current->program += phpYYtext;
					yyLineNr++;
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 388 "php.ll"
{
					current->program += phpYYtext;
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 392 "php.ll"
{
					current->program += phpYYtext;
					BEGIN(lastContext);
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 397 "php.ll"
{
					BEGIN(lastContext);
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 401 "php.ll"

	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 402 "php.ll"

	YY_BREAK
case 46:
YY_RULE_SETUP
#line 404 "php.ll"
{
					if(*phpYYtext == ssEndChar)
					    BEGIN(lastContext);
					if(ssSave)
					    current->program += *phpYYtext;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 411 "php.ll"
{
					if(ssSave)
					    current->program += phpYYtext;
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 416 "php.ll"
{
					if(ssSave)
					    current->program += *phpYYtext;
					}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 421 "php.ll"
{
					lastContext = YY_START;
					lineCount();
					current->doc.clear();
					BEGIN(PHPDoc);
					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 428 "php.ll"
{
					current->doc += *phpYYtext;
					yyLineNr++;
					}
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 433 "php.ll"
{
// Before the fix, it was context-sensitive which state to go next - depending
// on current->section. I changed this, since it doesn't make sense.
					BEGIN(lastContext);
					}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 439 "php.ll"
{
					current->doc += '\n';
					yyLineNr++;
					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 444 "php.ll"
{
					current->doc += *phpYYtext;
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 448 "php.ll"
{ 
					if(YY_START != SkipComment) // Default rules are hellspawn
					    lastContext = YY_START;
					BEGIN(SkipComment);
					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 454 "php.ll"
{
					BEGIN(lastContext);
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 458 "php.ll"

	YY_BREAK
case 57:
YY_RULE_SETUP
#line 460 "php.ll"
{
					ssEndChar = *phpYYtext;
					ssSave = 0;
					lastContext = YY_START;
					BEGIN(SkipString);
					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 467 "php.ll"

	YY_BREAK
case 59:
YY_RULE_SETUP
#line 468 "php.ll"

	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 469 "php.ll"
{
					yyLineNr++;
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 472 "php.ll"
ECHO;
	YY_BREAK
#line 1670 "php.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(FindClasses):
case YY_STATE_EOF(ClassName):
case YY_STATE_EOF(ClassBody):
case YY_STATE_EOF(Require):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(Extends):
case YY_STATE_EOF(Implements):
case YY_STATE_EOF(FindMembers):
case YY_STATE_EOF(Member):
case YY_STATE_EOF(SkipToBracket):
case YY_STATE_EOF(SkipToSemi):
case YY_STATE_EOF(Args):
case YY_STATE_EOF(Function):
case YY_STATE_EOF(Throws):
case YY_STATE_EOF(Comment):
case YY_STATE_EOF(SkipComment):
case YY_STATE_EOF(SkipString):
case YY_STATE_EOF(PHPDoc):
case YY_STATE_EOF(See):
case YY_STATE_EOF(Author):
case YY_STATE_EOF(Version):
case YY_STATE_EOF(Param):
case YY_STATE_EOF(Return):
case YY_STATE_EOF(Exception):
case YY_STATE_EOF(Precondition):
case YY_STATE_EOF(Postcondition):
case YY_STATE_EOF(Invariant):
case YY_STATE_EOF(File):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed phpYYin at a new source and called
			 * phpYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = phpYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( phpYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * phpYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of phpYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					phpYYrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			phpYYrestart(phpYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) phpYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 234 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 234 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 233);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up phpYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					phpYYrestart(phpYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( phpYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve phpYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void phpYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        phpYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            phpYY_create_buffer(phpYYin,YY_BUF_SIZE );
	}

	phpYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	phpYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void phpYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		phpYYpop_buffer_state();
	 *		phpYYpush_buffer_state(new_buffer);
     */
	phpYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	phpYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (phpYYwrap()) processing, but the only time this flag
	 * is looked at is after phpYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void phpYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	phpYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE phpYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) phpYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in phpYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) phpYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in phpYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	phpYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with phpYY_create_buffer()
 * 
 */
    void phpYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		phpYYfree((void *) b->yy_ch_buf  );

	phpYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a phpYYrestart() or at EOF.
 */
    static void phpYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	phpYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then phpYY_init_buffer was _probably_
     * called from phpYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void phpYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		phpYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void phpYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	phpYYensure_buffer_stack();

	/* This block is copied from phpYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from phpYY_switch_to_buffer. */
	phpYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void phpYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	phpYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		phpYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void phpYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)phpYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in phpYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)phpYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in phpYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE phpYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) phpYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in phpYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	phpYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to phpYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       phpYY_scan_bytes() instead.
 */
YY_BUFFER_STATE phpYY_scan_string (yyconst char * yystr )
{
    
	return phpYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to phpYYlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE phpYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) phpYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in phpYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = phpYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in phpYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up phpYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		phpYYtext[phpYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = phpYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		phpYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int phpYYget_lineno  (void)
{
        
    return phpYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *phpYYget_in  (void)
{
        return phpYYin;
}

/** Get the output stream.
 * 
 */
FILE *phpYYget_out  (void)
{
        return phpYYout;
}

/** Get the length of the current token.
 * 
 */
int phpYYget_leng  (void)
{
        return phpYYleng;
}

/** Get the current token.
 * 
 */

char *phpYYget_text  (void)
{
        return phpYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void phpYYset_lineno (int  line_number )
{
    
    phpYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see phpYY_switch_to_buffer
 */
void phpYYset_in (FILE *  in_str )
{
        phpYYin = in_str ;
}

void phpYYset_out (FILE *  out_str )
{
        phpYYout = out_str ;
}

int phpYYget_debug  (void)
{
        return phpYY_flex_debug;
}

void phpYYset_debug (int  bdebug )
{
        phpYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from phpYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    phpYYin = stdin;
    phpYYout = stdout;
#else
    phpYYin = (FILE *) 0;
    phpYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * phpYYlex_init()
     */
    return 0;
}

/* phpYYlex_destroy is for both reentrant and non-reentrant scanners. */
int phpYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		phpYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		phpYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	phpYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * phpYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *phpYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *phpYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void phpYYfree (void * ptr )
{
	free( (char *) ptr );	/* see phpYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 472 "php.ll"



void parsePHPClasses(Entry *rt)
{
    if(rt == 0)
	return;
    for(Entry *cr = rt->sub; cr; cr = cr->next)
	{
	if(cr->program.length())
	    {
	    inputString = cr->program.c_str();
	    inputPosition = 0;
	    phpYYrestart(phpYYin);

	    // We're looking for members and nested classes.
	    findClasses = false;
	    BEGIN(FindMembers);

	    current_root = cr;
	    strcpy(yyFileName, cr->file.c_str());
	    yyLineNr = cr->startLine;
	    phpYYlex();
	    cr->program.clear();
	    }
	parsePHPClasses(cr);
	}
    parseDoc(rt);
}

void parsePHP(Entry *rt)
{
    assert(rt);

    current_root = rt;
    global_root = rt;
    current = new Entry;

    inputString = rt->program.c_str();
    inputPosition = 0;
    phpYYrestart(phpYYin);

    // We're looking for first-level Classes.
    BEGIN(FindClasses);
    findClasses = true;

    phpYYlex();
    rt->program.clear();

    parsePHPClasses(rt);

    delete current;
}

extern "C" {
  int phpYYwrap()
    {
    return 1;
    }
};


